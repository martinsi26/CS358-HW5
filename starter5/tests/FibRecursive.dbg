 .data # Program at 5.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
4236:CLASS_Object: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
4256:CLASS_String: # ClassDecl at 0.0
  .word mth_String_hashCode # MethodDeclNonVoid at 0.0
  .word mth_String_equals # MethodDeclNonVoid at 0.0
  .word mth_String_toString # MethodDeclNonVoid at 0.0
  .word mth_String_concat # MethodDeclNonVoid at 0.0
  .word mth_String_substring # MethodDeclNonVoid at 0.0
  .word mth_String_length # MethodDeclNonVoid at 0.0
  .word mth_String_charAt # MethodDeclNonVoid at 0.0
  .word mth_String_compareTo # MethodDeclNonVoid at 0.0
4288:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
4292:CLASS_Lib: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
4336:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
4344:CLASS_RunMain: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
4356:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class Main ****** # ClassDecl at 5.7
  .byte 205 # 'M' with high bit set # ClassDecl at 5.7
  .byte 97 # 'a' # ClassDecl at 5.7
  .byte 105 # 'i' # ClassDecl at 5.7
  .byte 110 # 'n' # ClassDecl at 5.7
4360:CLASS_Main: # ClassDecl at 5.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Main_main # MethodDeclVoid at 8.17
  .word mth_Main_fib # MethodDeclNonVoid at 29.16
4380:END_CLASS_Main: # ClassDecl at 5.7
4380:dataArrayVTableStart: # IntegerType at 0.0
4380:END_CLASS_Object: # ClassDecl at 0.0
  .byte 84 # StringLiteral at 20.15
  .byte 104 # StringLiteral at 20.15
  .byte 101 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 102 # StringLiteral at 20.15
  .byte 105 # StringLiteral at 20.15
  .byte 98 # StringLiteral at 20.15
  .byte 111 # StringLiteral at 20.15
  .byte 110 # StringLiteral at 20.15
  .byte 97 # StringLiteral at 20.15
  .byte 99 # StringLiteral at 20.15
  .byte 99 # StringLiteral at 20.15
  .byte 105 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 110 # StringLiteral at 20.15
  .byte 117 # StringLiteral at 20.15
  .byte 109 # StringLiteral at 20.15
  .byte 98 # StringLiteral at 20.15
  .byte 101 # StringLiteral at 20.15
  .byte 114 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 111 # StringLiteral at 20.15
  .byte 102 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .word CLASS_String # StringLiteral at 20.15
  .word 7 # StringLiteral at 20.15
  .word -24 # StringLiteral at 20.15
4416:strLit_16: # StringLiteral at 20.15
  .byte 32 # StringLiteral at 22.15
  .byte 105 # StringLiteral at 22.15
  .byte 115 # StringLiteral at 22.15
  .byte 32 # StringLiteral at 22.15
  .word CLASS_String # StringLiteral at 22.15
  .word 2 # StringLiteral at 22.15
  .word -4 # StringLiteral at 22.15
4432:strLit_24: # StringLiteral at 22.15
  .byte 46 # StringLiteral at 24.15
  .byte 10 # StringLiteral at 24.15
  .byte 0 # StringLiteral at 24.15
  .byte 0 # StringLiteral at 24.15
  .word CLASS_String # StringLiteral at 24.15
  .word 2 # StringLiteral at 24.15
  .word -2 # StringLiteral at 24.15
4448:strLit_32: # StringLiteral at 24.15
# begin: Program at 5.1; stackHeight = 0
.text
.globl main
0:main:
0#  jal vm_init
# begin: CallStatement at 0.0; stackHeight = 0
# begin: Call at 0.0; stackHeight = 0
# begin: NewObject at 0.0; stackHeight = 0
4#li $s6, 2
8#li $s7, 1
12#jal newObject
16#la $t0, CLASS_Main
20#sw $t0, -12($s7)
# end: NewObject at 0.0; stackHeight = 4
24#lw $t0, 0($sp)
28#sw $s2, 0($sp)
32#move $s2, $t0
36#beq $s2, $0, nullPtrException
40#lw $t0, -12($s2)
44#lw $t0, 12($t0)
48#jalr $t0
52#addu $sp, $sp, 0
56#lw $s2, ($sp)
60#addu $sp, $sp, 4
64#subu $sp, $sp, 4
68#sw $t0, ($sp)
# end: Call at 0.0; stackHeight = 4
72#lw $t0, ($sp)
76#addu $sp, $sp, 4
# end: CallStatement at 0.0; stackHeight = 0
80#  li $v0, 10
84#  syscall
# begin: MethodDeclVoid at 8.17; stackHeight = 0
.globl mth_Main_main
88:mth_Main_main:
88#subu $sp, $sp, 4
92#sw $ra, ($sp)
# begin: LocalVarDecl at 11.6; stackHeight = 0
# begin: NewObject at 11.12; stackHeight = 0
96#li $s6, 2
100#li $s7, 1
104#jal newObject
108#la $t0, CLASS_Lib
112#sw $t0, -12($s7)
# end: NewObject at 11.12; stackHeight = 4
116#lw $0, ($sp) #**lib
# end: LocalVarDecl at 11.6; stackHeight = 4
# begin: LocalVarDecl at 14.6; stackHeight = 4
# begin: IntegerLiteral at 14.12; stackHeight = 4
120#li $t0, 14
124#subu $sp, $sp, 8
128#sw $s5, 4($sp)
132#sw $t0, ($sp)
# end: IntegerLiteral at 14.12; stackHeight = 12
136#lw $0, ($sp) #**val
# end: LocalVarDecl at 14.6; stackHeight = 12
# begin: LocalVarDecl at 17.6; stackHeight = 12
# begin: Call at 17.15; stackHeight = 12
140#subu $sp, $sp, 4
144#sw $s2, ($sp)
# begin: IdentifierExp at 17.19; stackHeight = 16
148#lw $t0, 4($sp) #**LocalVar
152#subu $sp, $sp, 8
156#sw $s5, 4($sp)
160#sw $t0, ($sp)
# end: IdentifierExp at 17.19; stackHeight = 24
164#lw $t0, 8($sp)
168#sw $s2, 8($sp)
172#move $s2, $t0
176#beq $s2, $0, nullPtrException
180#lw $t0, -12($s2)
184#lw $t0, 16($t0)
188#jalr $t0
192#addu $sp, $sp, 8
196#lw $s2, ($sp)
200#addu $sp, $sp, 4
204#subu $sp, $sp, 8
208#sw $s5, 4($sp)
212#sw $t0, ($sp)
# end: Call at 17.15; stackHeight = 20
216#lw $0, ($sp) #**result
# end: LocalVarDecl at 17.6; stackHeight = 20
# begin: CallStatement at 20.6; stackHeight = 20
# begin: Call at 20.6; stackHeight = 20
# begin: IdentifierExp at 20.2; stackHeight = 20
220#lw $t0, 16($sp) #**LocalVar
224#subu $sp, $sp, 4
228#sw $t0, ($sp)
# end: IdentifierExp at 20.2; stackHeight = 24
# begin: StringLiteral at 20.15; stackHeight = 24
232#li $t0, strLit_16
236#subu $sp, $sp, 4
240#sw $t0, ($sp)
# end: StringLiteral at 20.15; stackHeight = 28
244#lw $t0, 4($sp)
248#sw $s2, 4($sp)
252#move $s2, $t0
256#beq $s2, $0, nullPtrException
260#lw $t0, -12($s2)
264#lw $t0, 24($t0)
268#jalr $t0
272#addu $sp, $sp, 4
276#lw $s2, ($sp)
280#addu $sp, $sp, 4
284#subu $sp, $sp, 4
288#sw $t0, ($sp)
# end: Call at 20.6; stackHeight = 24
292#lw $t0, ($sp)
296#addu $sp, $sp, 4
# end: CallStatement at 20.6; stackHeight = 20
# begin: CallStatement at 21.6; stackHeight = 20
# begin: Call at 21.6; stackHeight = 20
# begin: IdentifierExp at 21.2; stackHeight = 20
300#lw $t0, 16($sp) #**LocalVar
304#subu $sp, $sp, 4
308#sw $t0, ($sp)
# end: IdentifierExp at 21.2; stackHeight = 24
# begin: IdentifierExp at 21.15; stackHeight = 24
312#lw $t0, 12($sp) #**LocalVar
316#subu $sp, $sp, 8
320#sw $s5, 4($sp)
324#sw $t0, ($sp)
# end: IdentifierExp at 21.15; stackHeight = 32
328#lw $t0, 8($sp)
332#sw $s2, 8($sp)
336#move $s2, $t0
340#beq $s2, $0, nullPtrException
344#lw $t0, -12($s2)
348#lw $t0, 32($t0)
352#jalr $t0
356#addu $sp, $sp, 8
360#lw $s2, ($sp)
364#addu $sp, $sp, 4
368#subu $sp, $sp, 4
372#sw $t0, ($sp)
# end: Call at 21.6; stackHeight = 24
376#lw $t0, ($sp)
380#addu $sp, $sp, 4
# end: CallStatement at 21.6; stackHeight = 20
# begin: CallStatement at 22.6; stackHeight = 20
# begin: Call at 22.6; stackHeight = 20
# begin: IdentifierExp at 22.2; stackHeight = 20
384#lw $t0, 16($sp) #**LocalVar
388#subu $sp, $sp, 4
392#sw $t0, ($sp)
# end: IdentifierExp at 22.2; stackHeight = 24
# begin: StringLiteral at 22.15; stackHeight = 24
396#li $t0, strLit_24
400#subu $sp, $sp, 4
404#sw $t0, ($sp)
# end: StringLiteral at 22.15; stackHeight = 28
408#lw $t0, 4($sp)
412#sw $s2, 4($sp)
416#move $s2, $t0
420#beq $s2, $0, nullPtrException
424#lw $t0, -12($s2)
428#lw $t0, 24($t0)
432#jalr $t0
436#addu $sp, $sp, 4
440#lw $s2, ($sp)
444#addu $sp, $sp, 4
448#subu $sp, $sp, 4
452#sw $t0, ($sp)
# end: Call at 22.6; stackHeight = 24
456#lw $t0, ($sp)
460#addu $sp, $sp, 4
# end: CallStatement at 22.6; stackHeight = 20
# begin: CallStatement at 23.6; stackHeight = 20
# begin: Call at 23.6; stackHeight = 20
# begin: IdentifierExp at 23.2; stackHeight = 20
464#lw $t0, 16($sp) #**LocalVar
468#subu $sp, $sp, 4
472#sw $t0, ($sp)
# end: IdentifierExp at 23.2; stackHeight = 24
# begin: IdentifierExp at 23.15; stackHeight = 24
476#lw $t0, 4($sp) #**LocalVar
480#subu $sp, $sp, 8
484#sw $s5, 4($sp)
488#sw $t0, ($sp)
# end: IdentifierExp at 23.15; stackHeight = 32
492#lw $t0, 8($sp)
496#sw $s2, 8($sp)
500#move $s2, $t0
504#beq $s2, $0, nullPtrException
508#lw $t0, -12($s2)
512#lw $t0, 32($t0)
516#jalr $t0
520#addu $sp, $sp, 8
524#lw $s2, ($sp)
528#addu $sp, $sp, 4
532#subu $sp, $sp, 4
536#sw $t0, ($sp)
# end: Call at 23.6; stackHeight = 24
540#lw $t0, ($sp)
544#addu $sp, $sp, 4
# end: CallStatement at 23.6; stackHeight = 20
# begin: CallStatement at 24.6; stackHeight = 20
# begin: Call at 24.6; stackHeight = 20
# begin: IdentifierExp at 24.2; stackHeight = 20
548#lw $t0, 16($sp) #**LocalVar
552#subu $sp, $sp, 4
556#sw $t0, ($sp)
# end: IdentifierExp at 24.2; stackHeight = 24
# begin: StringLiteral at 24.15; stackHeight = 24
560#li $t0, strLit_32
564#subu $sp, $sp, 4
568#sw $t0, ($sp)
# end: StringLiteral at 24.15; stackHeight = 28
572#lw $t0, 4($sp)
576#sw $s2, 4($sp)
580#move $s2, $t0
584#beq $s2, $0, nullPtrException
588#lw $t0, -12($s2)
592#lw $t0, 24($t0)
596#jalr $t0
600#addu $sp, $sp, 4
604#lw $s2, ($sp)
608#addu $sp, $sp, 4
612#subu $sp, $sp, 4
616#sw $t0, ($sp)
# end: Call at 24.6; stackHeight = 24
620#lw $t0, ($sp)
624#addu $sp, $sp, 4
# end: CallStatement at 24.6; stackHeight = 20
628#addu $sp, $sp, 20
632#lw $ra, ($sp)
636#addu $sp, $sp, 4
640#jr $ra
# end: MethodDeclVoid at 8.17; stackHeight = -4
.globl mth_Main_fib
644:mth_Main_fib:
644#subu $sp, $sp, 4
648#sw $ra, ($sp)
# begin: LocalVarDecl at 31.6; stackHeight = 0
# begin: IdentifierExp at 31.15; stackHeight = 0
652#lw $t0, 4($sp) #**LocalVar
656#subu $sp, $sp, 8
660#sw $s5, 4($sp)
664#sw $t0, ($sp)
# end: IdentifierExp at 31.15; stackHeight = 8
668#lw $0, ($sp) #**rtnVal
# end: LocalVarDecl at 31.6; stackHeight = 8
# begin: If at 32.2; stackHeight = 8
# begin: GreaterThan at 32.8; stackHeight = 8
# begin: IdentifierExp at 32.6; stackHeight = 8
672#lw $t0, 12($sp) #**LocalVar
676#subu $sp, $sp, 8
680#sw $s5, 4($sp)
684#sw $t0, ($sp)
# end: IdentifierExp at 32.6; stackHeight = 16
# begin: IntegerLiteral at 32.10; stackHeight = 16
688#li $t0, 1
692#subu $sp, $sp, 8
696#sw $s5, 4($sp)
700#sw $t0, ($sp)
# end: IntegerLiteral at 32.10; stackHeight = 24
704#lw $t2, ($sp)
708#addu $sp, $sp, 8
712#lw $t1, ($sp)
716#addu $sp, $sp, 8
720#sgt $t0, $t1, $t2
724#subu $sp, $sp, 4
728#sw $t0, ($sp)
# end: GreaterThan at 32.8; stackHeight = 12
732#lw $t0, ($sp)
736#addu $sp, $sp, 4
740#beq $t0, $0, if_else_61
# begin: Block at 32.13; stackHeight = 8
# begin: Assign at 34.13; stackHeight = 8
# begin: Plus at 34.24; stackHeight = 8
# begin: Call at 34.15; stackHeight = 8
744#subu $sp, $sp, 4
748#sw $s2, ($sp)
# begin: Minus at 34.20; stackHeight = 12
# begin: IdentifierExp at 34.19; stackHeight = 12
752#lw $t0, 16($sp) #**LocalVar
756#subu $sp, $sp, 8
760#sw $s5, 4($sp)
764#sw $t0, ($sp)
# end: IdentifierExp at 34.19; stackHeight = 20
# begin: IntegerLiteral at 34.21; stackHeight = 20
768#li $t0, 1
772#subu $sp, $sp, 8
776#sw $s5, 4($sp)
780#sw $t0, ($sp)
# end: IntegerLiteral at 34.21; stackHeight = 28
784#lw $t2, ($sp)
788#addu $sp, $sp, 8
792#lw $t1, ($sp)
796#addu $sp, $sp, 8
800#subu $t0, $t1, $t2
804#subu $sp, $sp, 8
808#sw $s5, 4($sp)
812#sw $t0, ($sp)
# end: Minus at 34.20; stackHeight = 20
816#lw $t0, 8($sp)
820#sw $s2, 8($sp)
824#move $s2, $t0
828#beq $s2, $0, nullPtrException
832#lw $t0, -12($s2)
836#lw $t0, 16($t0)
840#jalr $t0
844#addu $sp, $sp, 8
848#lw $s2, ($sp)
852#addu $sp, $sp, 4
856#subu $sp, $sp, 8
860#sw $s5, 4($sp)
864#sw $t0, ($sp)
# end: Call at 34.15; stackHeight = 16
# begin: Call at 34.26; stackHeight = 16
868#subu $sp, $sp, 4
872#sw $s2, ($sp)
# begin: Minus at 34.31; stackHeight = 20
# begin: IdentifierExp at 34.30; stackHeight = 20
876#lw $t0, 24($sp) #**LocalVar
880#subu $sp, $sp, 8
884#sw $s5, 4($sp)
888#sw $t0, ($sp)
# end: IdentifierExp at 34.30; stackHeight = 28
# begin: IntegerLiteral at 34.32; stackHeight = 28
892#li $t0, 2
896#subu $sp, $sp, 8
900#sw $s5, 4($sp)
904#sw $t0, ($sp)
# end: IntegerLiteral at 34.32; stackHeight = 36
908#lw $t2, ($sp)
912#addu $sp, $sp, 8
916#lw $t1, ($sp)
920#addu $sp, $sp, 8
924#subu $t0, $t1, $t2
928#subu $sp, $sp, 8
932#sw $s5, 4($sp)
936#sw $t0, ($sp)
# end: Minus at 34.31; stackHeight = 28
940#lw $t0, 8($sp)
944#sw $s2, 8($sp)
948#move $s2, $t0
952#beq $s2, $0, nullPtrException
956#lw $t0, -12($s2)
960#lw $t0, 16($t0)
964#jalr $t0
968#addu $sp, $sp, 8
972#lw $s2, ($sp)
976#addu $sp, $sp, 4
980#subu $sp, $sp, 8
984#sw $s5, 4($sp)
988#sw $t0, ($sp)
# end: Call at 34.26; stackHeight = 24
992#lw $t2, ($sp)
996#addu $sp, $sp, 8
1000#lw $t1, ($sp)
1004#addu $sp, $sp, 8
1008#addu $t0, $t1, $t2
1012#subu $sp, $sp, 8
1016#sw $s5, 4($sp)
1020#sw $t0, ($sp)
# end: Plus at 34.24; stackHeight = 16
1024#lw $t0, ($sp)
1028#addu $sp, $sp, 8
1032#sw $t0, 0($sp)
# end: Assign at 34.13; stackHeight = 8
1036#addu $sp, $sp, 0
# end: Block at 32.13; stackHeight = 8
1040#j if_done_61
1044:if_else_61:
# begin: Block at 36.2; stackHeight = 8
1044#addu $sp, $sp, 0
# end: Block at 36.2; stackHeight = 8
1048:if_done_61:
# end: If at 32.2; stackHeight = 8
# begin: IdentifierExp at 36.9; stackHeight = 8
1048#lw $t0, 0($sp) #**LocalVar
1052#subu $sp, $sp, 8
1056#sw $s5, 4($sp)
1060#sw $t0, ($sp)
# end: IdentifierExp at 36.9; stackHeight = 16
1064#lw $t0, ($sp)
1068#addu $sp, $sp, 8
1072#addu $sp, $sp, 8
1076#lw $ra, ($sp)
1080#addu $sp, $sp, 4
1084#jr $ra
# end: Program at 5.1; stackHeight = -4
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1088:mth_Object_hashCode:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
1088#    lw $t0,-8($s2) # get word with hash bits from this
1092#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
1096#    addu $t0,$t1

1100#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1104:mth_Object_equals:
1104#    move $t0,$s2 # first pointer (this)
1108#    lw $t1,($sp) # second pointer
1112#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
1113##...subu $at,$t0,$t1
1117##...sltiu $t0,$at,1

1120#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1124:mth_String_hashCode:
1124#    move $t0,$s2 # put this pointer in t0

1128#    li $t2,0 # current hash value
1132#    lw $t1,-4($t0) # negative of number of characters in string
1136#    beq $t1,$zero,done_hashCode_String # if zero length => done
1140#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
1144#    and $t0,0xfffffffc # adjust for padding
1145##...lui $at,65535
1149##...ori $at,$at,0xfffc
1153##...and $t0,$t0,$at
1156#    subu $t1,$t0,$t1 # address at end of string +12
1160:loop_hashCode_String:    
1160#    sll $t4,$t2,5 # multiply by 32
1164#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
1168#    lbu $t3,-12($t0) # current character
1172#    addu $t2,$t3 # add in current character
1176#    addu $t0,1 # go to next character's address
1180#    bne $t0,$t1,loop_hashCode_String # loop back if more
1184:done_hashCode_String:    

    # push int on stack
1184#    move $t0, $t2 # put $t2 in return slot
1188#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
1192:mth_Object_toString:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
1192#    subu $sp,4
1196#    sw $ra,($sp)
    
    # get hash value
1200#    lw $t2,-12($s2) # vtable address
1204#    lw $t0,($t2) # method address
1208#    jalr $t0
1212#    subu $sp,8 # push result (int in $t0) on stack
1216#    sw $s5,4($sp)
1220#    sw $t0,($sp)

    # compute print-size of hash value
1224#    li $t0, 1
1228#    lw $t1, ($sp)
1232#    srl $t1,$t1,4
1236#    beq $t1,$zero,toString_skip_loop
1240:toString_loop_top:
1240#    addu $t0,1
1244#    srl $t1,$t1,4
1248#    bne $t1,$zero,toString_loop_top
1252:toString_skip_loop:
1252#    subu $sp,8
1256#    sw $s5,4($sp)
1260#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
1264#    lw $t2,-12($s2) # vtable address
1268#    move $t0,$t2
1272:toString_checkTagBit:
1272#    subu $t0,1
1276#    lb $t1,($t0)
1280#    and $t1,0x80
1281##...lui $at,0
1285##...ori $at,$at,0x80
1289##...and $t1,$t1,$at
1292#    beq $t1,$zero,toString_checkTagBit
1296#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
1300#    subu $sp,8
1304#    sw $t1,($sp)
1308#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
1312#    move $s7,$zero # -4 offset header word
1316#    lw $t4,8($sp) # bytes for hash value
1320#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
1324#    addu $t4,8
1328#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
1332#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

1336#    li $t0,CLASS_String # store string vtable address into ...
1340#    sw $t0,-12($s7) # ... -12 offset in object header
1344#    lw $t2,-12($s2) # our object's vtable address
1348#    lw $t5,4($sp) # number characters in prefix
1352#    lw $t1,12($sp) # number of characters in hashcode
1356#    addu $t3,$t1,$t5 # number of characters in string ...
1360#    addu $t3,1 # ... including the '@' character
1364#    subu $t0,$zero,$t3 # store negated length into ...
1368#    sw $t0,-4($s7) # ... -4 offset header word
1372#    lw $t0,-8($s7) # get -8 offset header-word
1376#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
1377##...slt $at,$t0,$zero
1381##...beq $at,$zero,1400
1384#    and $t0,0xff # mask off object's hash value ...
1385##...lui $at,0
1389##...ori $at,$at,0xff
1393##...and $t0,$t0,$at
1396#    sw $t0,-8($s7) # ... and store back into -8 header-word
1400:skipMask_toString:
1400#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
1404#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
1408#    subu $t4,$t2,$t5
1412:toString_copyLoop:    
1412#    lb $t3,($t4)
1416#    and $t3,0x7f # mask off sign bit (in case first word)
1417##...lui $at,0
1421##...ori $at,$at,0x7f
1425##...and $t3,$t3,$at
1428#    sb $t3,-8($t0)
1432#    addu $t4,1
1436#    addu $t0,1
1440#    blt $t4,$t2,toString_copyLoop
1441##...slt $at,$t4,$t2
1445##...bne $at,$zero,1412

    # copy the '@' sign
1448#    li $t3,'@'
1452#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
1456#    addu $t2,$t0,$t1 # address of last byte in string to store +8
1460#    lw $t3,20($sp) # hash code to print
1464:toString_hashCopyLoop:
1464#    and $t4,$t3,0xf
1468#    srl $t3,4
1472#    lb $t4,hexChars($t4)
1476#    sb $t4,-8($t2)
1480#    subu $t2,$t2,1
1484#    bgt $t2,$t0,toString_hashCopyLoop
1485##...slt $at,$t0,$t2
1489##...bne $at,$zero,1464

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
1492#    addu $sp,28
1496#    lw $ra,($sp)
1500#    addu $sp,4
1504#    move $t0, $s7 # return string we created
1508#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
1512:mth_String_equals:
    
    # quick test for obvious false
1512#    lw $t0,($sp) # second parameter
1516#    beq $t0,$zero,goEsFalse # go return false if null
1520#    lw $t1,-12($t0) # vtable pointer
1524#    la $t2,CLASS_String # string vtable pointer
1528#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
1532#    subu $sp,12
1536#    sw $ra,8($sp)
1540#    sw $s2,4($sp)
1544#    sw $t0,($sp)
1548#    jal mth_String_compareTo
1552#    lw $s2, 4($sp) #restore this pointer and pop parameters
1556#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
1560#    seq $t0,$t0,$zero
1561##...subu $at,$t0,$zero
1565##...sltiu $t0,$at,1

    # pop return address and return $t0
1568#    lw $ra,($sp)
1572#    addu $sp,4

1576#    jr $ra # return
    
1580:goEsFalse:
    # put 0 in $t0 and return
1580#    li $t0, 0
1584#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
1588:mth_String_toString:
    #we are a string, so return this.
1588#    move $t0, $s2
1592#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1596:mth_Lib_readLine:
    
1596#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
1600#    sw $ra, 4($sp) # save $ra
1604#    move $t1,$sp # save "original" sp

1608:  doRead:

    # read the character
1608#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
1612#    subu $t2,$v0,13
1616#    bne $t2,$zero,notReturnRL
1620#    jal readLogicalChar
1624#    subu $t2,$v0,10 # check for newline
1628#    beq $t2,$zero,foundNewLine
1632#    sw $v0,lastCharRead # push back character into queue
1636#    j foundNewLine # go process the line

1640:  notReturnRL:

    # at this point, $v0 has our character

1640#    subu $t0,$v0,10
1644#    beq $t0,$zero,foundNewLine
1648#    blt $v0,$zero,foundEof
1649##...slt $at,$v0,$zero
1653##...bne $at,$zero,1668

    # we have a character, so push it onto stack
1656#    subu $sp,$sp,4
1660#    sw $v0,($sp)

    # loop back up to get next character
1664#    j doRead

1668:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1668#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
1672#    li $s7, 0 # return-value: null
1676#    j rlReturn # return

1680:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
1680#    subu $t0,$t1,$sp # number of chars we read (times 4)
1684#    srl $s6,$t0,2 # number of words on stack with chars
1688#    subu $sp,$sp,4 # push char-count ...
1692#    sw $s6,($sp) # ... onto stack
1696#    addu $t2,$t0,5 # GC tag, incl. for count-word
1700#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
1704#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1708#    srl $s6,$s6,2  # data words in object
1712#    move $s7,$zero # object words in object
1716#    jal newObject  # allocate space
    
    # store header words
1720#    la $t0,CLASS_String
1724#    sw $t0,-12($s7)# store class tag (String) into object
1728#    lw $t2,4($sp) # char-count
1732#    sll $t1,$t2,2 # 4 times number of chars
1736#    subu $t2,$zero,$t2 # negative of char-count
1740#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
1744#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
1748#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
1749##...slt $at,$t0,$zero
1753##...beq $at,$zero,1772
1756#    and $t0,0xff # mask off object's hash value ...
1757##...lui $at,0
1761##...ori $at,$at,0xff
1765##...and $t0,$t0,$at
1768#    sw $t0,-8($s7) # ... and store back into -8 header-word
1772:  skipMask_readLine:

1772#    sll $t0,$t0,2 # data bytes in object
1776#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
1780#    subu $t0,$t0,$t2 # place to store last character (plus 9)
1784#    addu $sp,$sp,8 # pop redundant object-pointer and count
1788#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

1792#    beq $sp,$t1,rlReturn
1796:  charCopyLoop:
1796#    lw $t2,($sp)
1800#    sb $t2,-9($t0)
1804#    addu $sp,$sp,4
1808#    subu $t0,$t0,1
1812#    bne $sp,$t1,charCopyLoop
1816:  rlReturn:

1816#    lw $ra, 4($sp)
1820#    addu $sp, 8   # pop $ra and pointless word off stack
1824#    move $t0, $s7 # return string we allocated in $s7
1828#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1832:mth_Lib_readInt:

    # save $ra by pushing onto stack
1832#    subu $sp,$sp,4
1836#    sw $ra,($sp)

1840:  riSkipWhiteLoop:
    # read a character
1840#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
1844#    subu $t0,$v0,32
1848#    bgt $t0,$zero,nonWhite
1849##...slt $at,$zero,$t0
1853##...bne $at,$zero,1896
1856#    beq $t0,$zero,riSkipWhiteLoop # start over if space
1860#    subu $t0,$v0,10
1864#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
1868#    subu $t0,$v0,9
1872#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
1876#    subu $t0,$v0,13
1880#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1884#    subu $t0,$v0,12
1888#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1892#    j badIntegerFormat # illegal integer char: abort program

1896:  nonWhite:
1896#    subu $t0,$v0,'-'
1900#    li $t4,1 # final multiplier
1904#    bne $t0,$zero,helpReadInt # go read
1908#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
1912#    jal readLogicalChar

1916:  helpReadInt:
1916#    li $t2,10
1920#    subu $t1,$v0,'0' # convert digit to 0-9 value
1924#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
1925##...sltu $at,$t1,$t2
1929##...beq $at,$zero,4212
1932#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

1936:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

1936#    jal readLogicalChar # read next character
1940#    subu $t1,$v0,'0' # convert digit to 0-9 value
1944#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
1945##...sltu $at,$t1,$t2
1949##...beq $at,$zero,1968

1952#    mul $t3,$t3,$t2 # multiply old value by 10
1953##...mult $t3,$t2
1957##...mflo $t3
1960#    addu $t3,$t3,$t1 # add in value of new digit
1964#    j digitLoop

1968:  doneDigitLoop:

    # "push back" unused character into queue
1968#    sw $v0,lastCharRead

    # restore return address
1972#    lw $ra,($sp)
1976#    addu $sp, 4

    # multiply by sign and put return value in $t0
1980#    mult $t3,$t4 # multiply to account for poss. minus sign
1984#    mflo $t3
1988#    move $t0, $t3
    
    # return
1992#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1996:mth_Lib_readChar:

    # save $ra by pushing onto stack
1996#    subu $sp,$sp,4
2000#    sw $ra,($sp)

      # read the character
2004#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
2008#    lw $ra,($sp)
2012#    addu $sp, 4
2016#    move $t0, $v0

    # return
2020#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
2024:mth_Lib_printStr:
    # check for null, printing "(null)", if so
2024#    lw $t0,($sp)
2028#    bne $t0,$zero,psNotNull

    # print "(null)"
2032#    la $a0,nullStr
2036#    li $v0,4
2040#    syscall
2044#    j donePrintStr
    
2048:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
2048#    subu $t0,$t0,8
2052#    lw $t1,($t0) # number of data words, but needs modification
2056#    blt $t1,$zero,skipPrintStr1
2057##...slt $at,$t1,$zero
2061##...bne $at,$zero,2080
2064#    and $t1,0xff # mask out all but low byte
2065##...lui $at,0
2069##...ori $at,$at,0xff
2073##...and $t1,$t1,$at
2076#    b skipPrintStr2
2080:skipPrintStr1:
2080#    and $t1,0x7ffffff
2081##...lui $at,2047
2085##...ori $at,$at,0xffff
2089##...and $t1,$t1,$at
2092:skipPrintStr2:    
2092#    sll $t1,$t1,2
2096#    subu $t1,$t0,$t1 # first word in string
2100#    lw $t0,4($t0) # negative of string-length
2104#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
2108#    beq $t0,$t1,donePrintStr
2112:  psLoop:
2112#    lb $a0,($t1) # next byte
2116#    li $v0,11 # code for printing char
2120#        syscall # print the char
2124#    addu $t1,$t1,1 # go to next char
2128#    blt $t1,$t0,psLoop
2129##...slt $at,$t1,$t0
2133##...bne $at,$zero,2112

2136:  donePrintStr:
2136#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
2140:mth_Lib_printInt:
2140#    lw $a0,($sp)

    # print it
2144#    li $v0,1 # code for print-int
2148#    syscall

    # return
2152#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
2156:mth_Lib_printBool:
    # pop value off stack, along with 'this'
2156#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
2160#    la $a0,falseString
2164#    beq $t0,$zero,skipPB
2168#    la $a0,trueString
2172:  skipPB:
2172#    li $v0,4 # code for print-string
2176#    syscall

    # return
2180#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
2184:mth_String_substring:

    # save $ra by pushing onto stack
2184#    subu $sp,$sp,4
2188#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
2192#    move $t0,$s2
2196#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
2200#    lw $t0,-4($t0) # negative of string length
2204#    subu $t0,$zero,$t0 # string length
2208#    lw $t1,4($sp) # k
2212#    lw $t2,12($sp) # n
2216#    bgt $zero,$t2,strIndexOutOfBounds
2217##...slt $at,$t2,$zero
2221##...bne $at,$zero,4180
2224#    bgt $t2,$t1,strIndexOutOfBounds
2225##...slt $at,$t1,$t2
2229##...bne $at,$zero,4180
2232#    bgt $t1,$t0,strIndexOutOfBounds
2233##...slt $at,$t0,$t1
2237##...bne $at,$zero,4180

    # allocate memory
2240#    subu $s6,$t1,$t2 # # chars in target-string
2244#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2248#    srl $s6,$s6,2 # convert bytes-count to word-count
2252#    move $s7,$zero # (no object-bytes in string)
2256#    jal newObject

    # store "String" tag in object-type field
2260#    la $t0,CLASS_String
2264#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
2268#    lw $t4,-8($s7) # data words in source string
2272#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
2273##...slt $at,$t4,$zero
2277##...beq $at,$zero,2296
2280#    and $t4,0xff # mask off object's hash value ...
2281##...lui $at,0
2285##...ori $at,$at,0xff
2289##...and $t4,$t4,$at
2292#    sw $t4,-8($s7) # ... and store back into -8 header-word
2296:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
2296#    lw $t1,8($sp) # k
2300#    lw $t2,16($sp) # n
2304#    subu $t0,$t2,$t1 # value to store
2308#    sw $t0,-4($s7) # store value
    
2312#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
2316#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
2320#    lw $t4,-8($t3) # data words in source string
2324#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
2328#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2332#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2336#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2340#    lw $t2,-8($s7)   # data words in target string
2344#    sll $t2,$t2,2    # data bytes in target string
2348#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
2352:  subCopyLoopzz:
2352#    lb $t4,-8($t3)
2356#    sb $t4,-8($t2)
2360#    addu $t2,$t2,1
2364#    addu $t3,$t3,1
2368#    blt $t3,$t1,subCopyLoopzz
2369##...slt $at,$t3,$t1
2373##...bne $at,$zero,2352
    
2376:  doneSubCopyzz:
    # restore return address, store return value, pop stack
2376#    lw $ra,4($sp) # restore $ra
2380#    addu $sp,$sp,8 # pop ra, and allocated newObject
2384#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
2388#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
2392:mth_String_length:

    # the length is the negative of 4($s2)
2392#    lw $t0,-4($s2) # -length
2396#    subu $t0,$zero,$t0

    # return
2400#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
2404:mth_String_concat:
    # save $ra by pushing onto stack
2404#    subu $sp,$sp,4
2408#    sw $ra, ($sp)

    # get string pointers and check parameter for null
2412#    lw $t0,4($sp)
2416#    beq $t0,$zero,nullPtrException
2420#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
2424#    lw $t0,-4($t0) # negative size of second object
2428#    lw $t1,-4($t1) # negative size of first object
2432#    addu $s6,$t0,$t1 # sum of negative sizes
2436#    sra $s6,$s6,2 # negative word-size of char part
2440#    subu $s6,$zero,$s6 # word size of char part
2444#    addu $s6,$s6,1 # data word size, including v-table word
2448#    move $s7,$zero
2452#    jal newObject

    # store String vtable address in vtable address field
2456#    la $t0,CLASS_String
2460#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2464#    lw $t4,-8($s7) # # data words in source string
2468#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
2469##...slt $at,$t4,$zero
2473##...beq $at,$zero,2492
2476#    and $t4,0xff # mask off object's hash value ...
2477##...lui $at,0
2481##...ori $at,$at,0xff
2485##...and $t4,$t4,$at
2488#    sw $t4,-8($s7) # ... and store back into -8 header-word
2492:skipMask_concat:

2492#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
2496#    move $t1,$s2   # first object
2500#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
2504#    lw $t2,-4($t0) # negative length of second object
2508#    lw $t3,-4($t1) # negative length of first object
2512#    addu $t4,$t2,$t3 # sum of negative lengths
2516#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
2520#    lw $t4,-8($t1) # # data words in first string
2524#    sll $t4,$t4,2 # # data bytes in first string
2528#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2532#    lw $t4,-8($s7) # # data words in new string
2536#    sll $t4,$t4,2 # # data bytes in new string
2540#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2544#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2548#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
2552:  concatLoop1zz:
2552#    lb $t4,-8($t1)
2556#    sb $t4,-8($s7)
2560#    addu $s7,$s7,1
2564#    addu $t1,$t1,1
2568#    blt $t1,$t3,concatLoop1zz
2569##...slt $at,$t1,$t3
2573##...bne $at,$zero,2552
2576:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2576#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
2580#    lw $t4,-8($t0) # # data words in second string
2584#    sll $t4,$t4,2 # # data bytes in second string
2588#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2592#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
2596:  concatLoop2zz:
2596#    lb $t4,-8($t1)
2600#    sb $t4,-8($s7)
2604#    addu $s7,$s7,1
2608#    addu $t1,$t1,1
2612#    blt $t1,$t3,concatLoop2zz
2613##...slt $at,$t1,$t3
2617##...bne $at,$zero,2596
2620:  doneConcatLoop2zz:
 
2620:  concatRtnzz:
    # return
2620#    move $t0, $t9 # put saved return string in $t0
2624#    lw $ra, 4($sp)
2628#    addu $sp, 8 # pop ra and allocated newObject
2632#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
2636:mth_String_charAt:
    # get string
2636#    move $t0,$s2

    # check that index is in bounds
2640#    lw $t1,-4($t0) # negative of # data words in string
2644#    subu $t3,$zero,$t1 # # chars in string
2648#    lw $t2,($sp) # index
2652#    bgeu $t2,$t3,strIndexOutOfBounds
2653##...sltu $at,$t2,$t3
2657##...beq $at,$zero,4180

    # access element
2660#    lw $t1,-8($t0) # # data words in object
2664#    sll $t1,$t1,2 # - byte-offset from end of chars
2668#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2672#    addu $t0,$t0,$t1 # - address of our char, offset by 8
2676#    lb $t0,-8($t0) # our char

    # return
2680#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
2684:mth_Lib_intToString:

    # save return address on stack; allocate space for dummy GC tag
2684#    subu $sp,$sp,8
2688#    sw $ra,4($sp)

    # save current sp
2692#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
2696#    li $t3,10

    # get argument, negate if negative
2700#    lw $t1,8($sp)
2704#    bge $t1,$zero,itsNonNegLoop
2705##...slt $at,$t1,$zero
2709##...beq $at,$zero,2716
2712#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
2716:  itsNonNegLoop:
2716#    divu $t1,$t3
2720#    mflo $t1 # quotient
2724#    mfhi $t4 # remainder
2728#    addu $t4,$t4,'0' # turn remainder into digit
2732#    subu $sp,$sp,4
2736#    sw $t4,($sp) # push digit onto stack
2740#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
2744#    lw $t4,8($t0)
2748#    bge $t4,$zero,itsSkipNeg
2749##...slt $at,$t4,$zero
2753##...beq $at,$zero,2768
2756#    li $t4,'-'
2760#    subu $sp,$sp,4
2764#    sw $t4,($sp)
2768:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
2768#    subu $s6,$t0,$sp
2772#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
2776#    sw $t3,($t0)
2780#    srl $s6,$s6,2
2784#    subu $sp,$sp,4
2788#    sw $s6,($sp)
    
    # allocate memory
2792#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2796#    srl $s6,$s6,2
2800#    move $s7,$zero # no "object" words in object
2804#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
2808#    lw $t0,4($sp)
2812#    addu $sp,$sp,8

    # store "String" tag into class field
2816#    subu $s7,$s7,8 # address of header-1 word
2820#    la $t1,CLASS_String
2824#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
2828#    lw $t4,($s7) # # data words in source string
2832#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
2833##...slt $at,$t4,$zero
2837##...beq $at,$zero,2856
2840#    and $t4,0xff # mask off object's hash value ...
2841##...lui $at,0
2845##...ori $at,$at,0xff
2849##...and $t4,$t4,$at
2852#    sw $t4,($s7) # ... and store back into -8 header-word
2856:skipMask_intToString:
    
    # store negative of char-count into header-2 word
2856#    subu $t0,$zero,$t0
2860#    sw $t0,4($s7)

2864#    lw $t1,($s7) # number of data words in string
2868#    sll $t1,$t1,2 # number data bytes in string
2872#    subu $t1,$s7,$t1 # first location to store chars in string
2876#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
2880:  itsLoop:
2880#    lw $t2,($sp)
2884#    addu $sp,$sp,4
2888#    sb $t2,($t1)
2892#    addu $t1,$t1,1
2896#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
2900#    lw $ra,4($sp)
2904#    addu $sp,$sp,8
2908#    addu $t0,$t0,15
2912#    and $t0,$t0,0xfffffffc
2913##...lui $at,65535
2917##...ori $at,$at,0xfffc
2921##...and $t0,$t0,$at
2924#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2928:mth_Lib_intToChar:
    # save return address
2928#    subu $sp,$sp,4
2932#    sw $ra,($sp)

    # allocate object
2936#    li $s6,2
2940#    move $s7,$zero
2944#    jal newObject

    # get n from string.
2948#    lw $t1,8($sp)

    # store "String" tag into class field
2952#    la $t0,CLASS_String
2956#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2960#    lw $t4,-8($s7) # # data words in source string
2964#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
2965##...slt $at,$t4,$zero
2969##...beq $at,$zero,2988
2972#    and $t4,0xff # mask off object's hash value ...
2973##...lui $at,0
2977##...ori $at,$at,0xff
2981##...and $t4,$t4,$at
2984#    sw $t4,-8($s7) # ... and store back into -8 header-word
2988:  skipMask_intToChar:

    # store data in string
2988#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
2992#    li $t0,-1
2996#    sw $t0,-4($s7)

    # we're returning $s7
3000#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
3004#    lw $ra,4($sp)
3008#    addu $sp,$sp,8

    # return
3012#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
3016:mth_String_compareTo:
    # get string pointers and check parameter for null
3016#    lw $t0,($sp) # second string
3020#    beq $t0,$zero,nullPtrException
3024#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
3028#    lw $t2,-4($t0) # negative length of second string
3032#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
3036#    slt $t4,$t3,$t2
3040#    slt $t5,$t2,$t3
3044#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
3048#    lw $t2,-8($t0) # # data words in second string
3052#    lw $t3,-8($t1) # # data words in first string
3056#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
3060#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
3064#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
3068#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
3072#    beq $zero,$t5,skipStrCmpLenzz
3076#    move $t2,$t3
3080:  skipStrCmpLenzz:
3080#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
3084:  cmpLoopzz:
3084#    lw $t3,-8($t1) # word from str2
3088#    lw $t4,-8($t0) # word from str1
3092#    bne $t3,$t4,cmpNotEqualzz
3096#    addu $t1,$t1,4
3100#    addu $t0,$t0,4
3104#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
3108#    j cmpHitLimitzz

3112:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
3112#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
3116#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
3120#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
3124:  cmpHitLimitzz:
3124#    move $t0, $t5 # store return value
3128#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
3132:readLogicalChar:

    # check if we already have a character
3132#    lw $v0,lastCharRead
3136#    li $t0,-2
3140#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
3144#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3148#    jr $ra # return
    
3152:  doReadCh:
    # we need to actually read a character: read and return
3152#    li $v0,12 # use system call to read a character
3156#    syscall
3160#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3164:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
3164#    blt $s7,$zero arraySizeOutOfBounds
3165##...slt $at,$s7,$zero
3169##...bne $at,$zero,4196

    # mark the fact that we have not yet GC'd for this allocation
3172#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

3176:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
3176#    addu $t0,$s6,$s7
3180#    sll $t0,$t0,2
3184#    addu $t0,$t0,8 # amount of memory needed
3188#    addu $t1,$t0,$s3
3192#    bgtu $t1,$s4,doGC
3193##...sltu $at,$s4,$t1
3197##...bne $at,$zero,3320

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
3200#    move $t2,$s3
3204:  zeroObjLoop:
3204#    sw $zero,($s3)
3208#    lw $zero,($s3)

3212#    addu $s3,4
3216#    bltu $s3,$t1,zeroObjLoop
3217##...sltu $at,$s3,$t1
3221##...bne $at,$zero,3204

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
3224#    sll $t0,$s7,2    # number of post-header bytes
3228#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
3232#    li $t2,255
3236#    bgeu $s6,$t2 firstHeaderLarge
3237##...sltu $at,$s6,$t2
3241##...beq $at,$zero,3288
3244#    lw $t1,prevHashConstant
3248#    addu $t1,0x12b68fd2
3249##...lui $at,4791
3253##...addiu $at,$at,-28718
3257##...addu $t1,$at,$t1
3260#    sw $t1,prevHashConstant # update hash constant
3264#    or $t1,0x80000000 # set top bit
3265##...lui $at,32768
3269##...or $t1,$at,$t1
3272#    and $t1,0xffffff00 # clear low bit
3273##...lui $at,65535
3277##...ori $at,$at,0xff00
3281##...and $t1,$t1,$at
3284#    or $s6,$t1
3288:firstHeaderLarge:
3288#    sw $s6,-8($t0) # store header-1 value
3292#    lw $zero,-8($t0)

    # store second header-value
3296#    sw $s7,-4($t0)   # second header-word
3300#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
3304#    move $s7,$t0
3308#    subu $sp,$sp,4
3312#    sw $t0,($sp)

3316#    jr $ra
    
3320:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
3320#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
3324#    lw $t5,gcCount
3328#    addu $t5,1
3332#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
3336#    subu $sp,$sp,4
3340#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
3344#    lw $t0,cur_seg
3348#    move $t7,$s4
3352#    la $t6,seg1_start
3353##...lui $t6,16
3357##...addiu $t6,$t6,4820
3360#    la $s3,seg0_start
3364#    la $s4,seg0_end
3365##...lui $s4,16
3369##...addiu $s4,$s4,4820
3372#    sw $zero,cur_seg
3376#    bne $t0,$zero,skipGc1
3380#    la $t6,seg0_start
3384#    la $s3,seg1_start
3385##...lui $s3,16
3389##...addiu $s3,$s3,4820
3392#    la $s4,seg1_end
3393##...lui $s4,32
3397##...addiu $s4,$s4,4820
3400#    sw $s5,cur_seg
3404:  skipGc1:
3404#    li $t5,0x80000000
3408#    lw $t0,stack_bottom
3412#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

3416:  gcStackCopyLoop:
3416#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
3420#    sll $t2,$t1,31 # zero iff low bit was zero
3424#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
3428#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
3432#    bleu $t1,$t6,gcTestIterDone1
3433##...sltu $at,$t6,$t1
3437##...beq $at,$zero,3600
3440#    bgtu $t1,$t7,gcTestIterDone1
3441##...sltu $at,$t7,$t1
3445##...bne $at,$zero,3600

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
3448#    lw $t2,-8($t1) # possible forwarding tag
3452#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
3456#    lw $t2,-4($t1) # forwarding pointer: object's new address
3460#    sw $t2,4($t0) # update stack value
3464#    j gcTestIterDone1 # do next iteration

3468:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
3468#    bge $t2,$zero,gcSkip2
3469##...slt $at,$t2,$zero
3473##...beq $at,$zero,3488
3476#    and $t2,0xff #### mask off hash value
3477##...lui $at,0
3481##...ori $at,$at,0xff
3485##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

3488:  gcSkip2:
3488#    sll $t2,$t2,2
3492#    addu $t2,$t2,8
3496#    subu $t4,$t1,$t2 # address of first word of source
3500#    lw $t3,-4($t1) # number of object words (negative means zero)
3504#    bge $t3,$zero,gcH2Neg1
3505##...slt $at,$t3,$zero
3509##...beq $at,$zero,3516
3512#    move $t3,$zero
3516:  gcH2Neg1:
3516#    sll $t3,$t3,2
3520#    addu $t3,$t3,$t1 # address one word past last word of source

3524#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
3528#    lw $s0,($t4)
3532#    lw $s1,-8($t1)
3536#    sw $s1,($t4)
3540#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
3544:  gCinnerCopy1:
3544#    lw $s0,($t4)
3548#    sw $s0,($s3)
3552#    addu $t4,$t4,4
3556#    addu $s3,$s3,4
3560#    bltu $t4,$t3,gCinnerCopy1
3561##...sltu $at,$t4,$t3
3565##...bne $at,$zero,3544

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3568#    sw $zero,-8($t1) # 0 in first header-slot
3572#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
3576#    sw $t2,4($t0)
3580#    lw $zero,-8($t2)
3584#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
3588#    j gcTestIterDone1

3592:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
3592#    subu $t0,$t0,$t1
3596#    subu $t0,$t0,3

3600:  gcTestIterDone1:
3600#    bgeu $t0,$sp,gcStackCopyLoop
3601##...sltu $at,$t0,$sp
3605##...beq $at,$zero,3416

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
3608#    lw $t1,cur_seg
3612#    la $t0,seg0_start
3616#    beq $t1,$zero,gcSkip4
3620#    la $t0,seg1_start
3621##...lui $t0,16
3625##...addiu $t0,$t0,4820


3628:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
3628#    bgeu $t0,$s3,gcFinishUp
3629##...sltu $at,$t0,$s3
3633##...beq $at,$zero,3924

    ###### begin outer loop to copy all non-stack-direct objects ######

3636:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
3636#    lw $t1,($t0) # (what will be) first header word for current object
3640#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
3644#    bge $t2,$zero,gcSkip4a # are there hash bits?
3645##...slt $at,$t2,$zero
3649##...beq $at,$zero,3664
3652#    and $t2,0xff # mask off hash bits
3653##...lui $at,0
3657##...ori $at,$at,0xff
3661##...and $t2,$t2,$at
3664:gcSkip4a:    
3664#    sll $t2,$t2,2 # # data bytes
3668#    addu $t2,$t2,8 # to skip header words
3672#    addu $t2,$t0,$t2 # pointer to new object
3676#    lw $t3,-8($t2) # word to swap
3680#    sw $t1,-8($t2) # store header word
3684#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
3688#    lw $t1,-12($t2) # vtable pointer
3692#    li $t0,dataArrayVTableStart # address of vtable for first data array
3696#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
3697##...slt $at,$t1,$t0
3701##...bne $at,$zero,3720

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
3704:  skipToNextObj:
3704#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
3708#    sll $t1,$t1,2 # convert to byte-count
3712#    addu $t0,$t2,$t1 # skip over object
3716#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
3720:  gcNotDataArray:
3720#    lw $t3,-4($t2) # # object words (negative treated as zero)
3724#    bge $t3,$zero,gcH2Neg2
3725##...slt $at,$t3,$zero
3729##...beq $at,$zero,3736
3732#    move $t3,$zero
3736:  gcH2Neg2:
3736#    sll $t3,$t3,2 # # object bytes
3740#    move $t0,$t2 # address of first pointer in object
3744#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
3748#    beq $t0,$s1,gcTestIterDone2
    
3752:  gcNextPointerInObject:
    # get pointer from object
3752#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
3756#    bleu $t1,$t6,gcGoNextPointerSlot
3757##...sltu $at,$t6,$t1
3761##...beq $at,$zero,3904
3764#    bgtu $t1,$t7,gcGoNextPointerSlot
3765##...sltu $at,$t7,$t1
3769##...bne $at,$zero,3904

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
3772#    lw $t8,-8($t1) # possible forwarding tag
3776#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
3780#    lw $t8,-4($t1) # forwarding pointer: object's new address
3784#    sw $t8,($t0) # update pointer in object
3788#    j gcGoNextPointerSlot # do next iteration

3792:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
3792#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
3793##...slt $at,$t8,$zero
3797##...beq $at,$zero,3812
3800#    and $t8,0xff # mask off hash bits
3801##...lui $at,0
3805##...ori $at,$at,0xff
3809##...and $t8,$t8,$at

3812:  gcSkip5:
3812#    sll $t8,$t8,2 # bytes in negative-offset portion ...
3816#    addu $t8,$t8,8 # ... add in bytes for header-words
3820#    subu $t4,$t1,$t8 # address of first word of source object
3824#    lw $t3,-4($t1) # # words in positive-offset portion
3828#    bge $t3,$zero,gcNoNeg
3829##...slt $at,$t3,$zero
3833##...beq $at,$zero,3840
3836#    move $t3,$zero # negative treated as zero
3840:  gcNoNeg:
3840#    sll $t3,$t3,2 # bytes in negative-offset portion
3844#    addu $t3,$t3,$t1 # address one word past last word of source

3848#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
3852#    lw $s0,($t4)
3856#    lw $t9,-8($t1)
3860#    sw $t9,($t4)
3864#    sw $s0,-8($t1)

    # copy all source bytes to the target
3868:  gCinnerCopy2:
3868#    lw $s0,($t4)
3872#    sw $s0,($s3)
3876#    addu $t4,$t4,4
3880#    addu $s3,$s3,4
3884#    bltu $t4,$t3,gCinnerCopy2
3885##...sltu $at,$t4,$t3
3889##...bne $at,$zero,3868

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3892#    sw $zero,-8($t1) # 0 in first header-slot
3896#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
3900#    sw $t8,($t0)

3904:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
3904#    addu $t0,$t0,4
3908#    bltu $t0,$s1,gcNextPointerInObject
3909##...sltu $at,$t0,$s1
3913##...bne $at,$zero,3752

3916:  gcTestIterDone2:
3916#    bltu $t0,$s3,gcHeapCopyLoop
3917##...sltu $at,$t0,$s3
3921##...bne $at,$zero,3636

    ###### end outer loop to copy all non-stack-direct objects ######

3924:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
3924#    lw $s2,($sp)
3928#    addu $sp,$sp,4

    # mark us as having already GC'd
3932#    move $t5,$s5

    # go try and allocate again
3936#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3940:vm_init:

    # mark bottom of stack
3940#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
3944#    move $s2,$zero

    #set up the "five" register
3948#    li $s5,5

3952#    la $s3,seg0_start
3956#    la $s4,seg0_end
3957##...lui $s4,16
3961##...addiu $s4,$s4,4820
    
    # return
3964#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3968:divide:
    # get parameters; abort if divisor zero
3968#    lw $t0,($sp)
3972#    lw $t1,8($sp)
3976#    beq $t0,$zero,divByZeroError
    
    # perform division
3980#    div $t1,$t0
3984#    mflo $t0

    # store result, adjust stack and return
3988#    addu $sp,$sp,8 # adjust stack
3992#    sw $t0,($sp) # store result
3996#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4000:remainder:
    # get parameters; abort if divisor zero
4000#    lw $t0,($sp)
4004#    lw $t1,8($sp)
4008#    beq $t0,$zero,divByZeroError
    
    # perform division
4012#    div $t1,$t0
4016#    mfhi $t0

    # store result, adjust stack and return
4020#    addu $sp,$sp,8 # adjust stack
4024#    sw $t0,($sp) # store result
4028#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
4032:checkCast:
    # get object, allow immediately if null
4032#    lw $t2,($sp)
4036#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
4040#    lw $t2,-12($t2) # vtable address
4044#    bge $t2,$t1,castException
4045##...slt $at,$t2,$t1
4049##...beq $at,$zero,4220
4052#    blt $t2,$t0,castException
4053##...slt $at,$t2,$t0
4057##...bne $at,$zero,4220
    
    # return, leaving object unchanged on stack
4060:  checkCastReturn:    
4060#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
4064:instanceOf:
    # get object, go return false if null
4064#    lw $t2,($sp)
4068#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
4072#    lw $t2,-12($t2) # vtable address
4076#    sge $t0,$t2,$t0 # are we >= the lower limit?
4077##...slt $t0,$t2,$t0
4081##...xori $t0,$t0,0x1
4084#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
4088#    and $t2,$t0,$t1
4092#    sw $t2,($sp)
4096:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
4096#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

4100:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
4100#    li $v0,4 # syscall-code for print-string
4104#    syscall
4108:exit:
    # print termination message
4108#    li $v0,4 # syscall-code for print-string
4112#    la $a0,exitString
4116#    syscall

    # print number of garbage collections
4120#    li $v0,4 # syscall-code for print-string
4124#    la $a0,gcCountMsg
4128#    syscall # print "Number of ..."
4132#    lw $a0,gcCount # number of GC's
4136#    li $v0,1 # code for print-int
4140#    syscall
4144#    li $v0,4 # syscall-code for print-string
4148#    la $a0,newlineString
4152#    syscall # print newline

    # terminate execution
4156#    li $v0,10 #syscall-code for "exit"
4160#    syscall

4164:outOfHeapMemory:
4164#    la $a0,heapMemoryMsg
4168#    j exitError
4172:divByZeroError:
4172#    la $a0,divByZeroMsg
4176#    j exitError
4180:strIndexOutOfBounds:
4180#    la $a0,strIndexOutOfBoundsMsg
4184#    j exitError
4188:arrayIndexOutOfBounds:
4188#    la $a0,arrayIndexOutOfBoundsMsg
4192#    j exitError
4196:arraySizeOutOfBounds:
4196#    la $a0,arraySizeOutOfBoundsMsg
4200#    j exitError
4204:nullPtrException:
4204#    la $a0,nullPtrExceptionMsg
4208#    j exitError
4212:badIntegerFormat:
4212#    la $a0,badIntegerFormatMsg
4216#    j exitError
4220:castException:
4220#    la $a0,castExceptionMsg
4224#    j exitError
############## data section ################
    .data
4448:hexChars:
    .ascii "0123456789abcdef"
    .align 2
4464:cur_seg:
    .word 0

4468:lastCharRead:
    .word -2 # -2 => no buffered character
4472:prevHashConstant:
    .word 0x2785173c
4476:gcCount:
    .word 0

4480:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
4507:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
4530:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
4565:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
4599:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
4632:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
4663:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
4711:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
4732:gcMsg: 
      .asciiz "\nGC!\n"
4738:gcCountMsg: 
      .asciiz "Number of garbage collections: "

4770:nullStr:
    .asciiz "null"
4775:trueString:
    .asciiz "true"
4780:falseString:
    .asciiz "false"
4786:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
4814:newlineString:
    .asciiz "\n"
    
    .align 2
4816:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

4820:seg0_start:
    .space 0x100000
1053396:seg0_end:
1053396:seg1_start:
    .space 0x100000
2101972:seg1_end:
