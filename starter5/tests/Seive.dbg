 .data # Program at 5.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
5424:CLASS_Object: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
5444:CLASS_String: # ClassDecl at 0.0
  .word mth_String_hashCode # MethodDeclNonVoid at 0.0
  .word mth_String_equals # MethodDeclNonVoid at 0.0
  .word mth_String_toString # MethodDeclNonVoid at 0.0
  .word mth_String_concat # MethodDeclNonVoid at 0.0
  .word mth_String_substring # MethodDeclNonVoid at 0.0
  .word mth_String_length # MethodDeclNonVoid at 0.0
  .word mth_String_charAt # MethodDeclNonVoid at 0.0
  .word mth_String_compareTo # MethodDeclNonVoid at 0.0
5476:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
5480:CLASS_Lib: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
# ****** class Seive ****** # ClassDecl at 12.7
  .byte 0 # ClassDecl at 12.7
  .byte 0 # ClassDecl at 12.7
  .byte 0 # ClassDecl at 12.7
  .byte 211 # 'S' with high bit set # ClassDecl at 12.7
  .byte 101 # 'e' # ClassDecl at 12.7
  .byte 105 # 'i' # ClassDecl at 12.7
  .byte 118 # 'v' # ClassDecl at 12.7
  .byte 101 # 'e' # ClassDecl at 12.7
5532:CLASS_Seive: # ClassDecl at 12.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
  .word mth_Seive_exec # MethodDeclVoid at 15.17
5580:END_CLASS_Seive: # ClassDecl at 12.7
5580:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
5588:CLASS_RunMain: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
5600:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class Main ****** # ClassDecl at 5.7
  .byte 205 # 'M' with high bit set # ClassDecl at 5.7
  .byte 97 # 'a' # ClassDecl at 5.7
  .byte 105 # 'i' # ClassDecl at 5.7
  .byte 110 # 'n' # ClassDecl at 5.7
5604:CLASS_Main: # ClassDecl at 5.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Main_main # MethodDeclVoid at 6.17
5620:END_CLASS_Main: # ClassDecl at 5.7
5620:dataArrayVTableStart: # IntegerType at 0.0
  .byte 0 # ArrayType at 32.20
  .byte 0 # ArrayType at 32.20
  .byte 219 # '[' with high bit set # ArrayType at 32.20
  .byte 90 # 'Z' # ArrayType at 32.20
5624:CLASS_ARRAY_BOOLEAN: # ArrayType at 32.20
  .word mth_Object_hashCode # ArrayType at 32.20
  .word mth_Object_equals # ArrayType at 32.20
  .word mth_Object_toString # ArrayType at 32.20
5636:END_CLASS_ARRAY_BOOLEAN: # ArrayType at 32.20
5636:END_CLASS_Object: # ClassDecl at 0.0
  .byte 70 # StringLiteral at 18.11
  .byte 105 # StringLiteral at 18.11
  .byte 110 # StringLiteral at 18.11
  .byte 100 # StringLiteral at 18.11
  .byte 32 # StringLiteral at 18.11
  .byte 112 # StringLiteral at 18.11
  .byte 114 # StringLiteral at 18.11
  .byte 105 # StringLiteral at 18.11
  .byte 109 # StringLiteral at 18.11
  .byte 101 # StringLiteral at 18.11
  .byte 115 # StringLiteral at 18.11
  .byte 32 # StringLiteral at 18.11
  .byte 116 # StringLiteral at 18.11
  .byte 104 # StringLiteral at 18.11
  .byte 114 # StringLiteral at 18.11
  .byte 111 # StringLiteral at 18.11
  .byte 117 # StringLiteral at 18.11
  .byte 103 # StringLiteral at 18.11
  .byte 104 # StringLiteral at 18.11
  .byte 58 # StringLiteral at 18.11
  .byte 32 # StringLiteral at 18.11
  .byte 0 # StringLiteral at 18.11
  .byte 0 # StringLiteral at 18.11
  .byte 0 # StringLiteral at 18.11
  .word CLASS_String # StringLiteral at 18.11
  .word 7 # StringLiteral at 18.11
  .word -21 # StringLiteral at 18.11
5672:strLit_6: # StringLiteral at 18.11
  .byte 112 # StringLiteral at 48.11
  .byte 114 # StringLiteral at 48.11
  .byte 105 # StringLiteral at 48.11
  .byte 109 # StringLiteral at 48.11
  .byte 101 # StringLiteral at 48.11
  .byte 115 # StringLiteral at 48.11
  .byte 32 # StringLiteral at 48.11
  .byte 117 # StringLiteral at 48.11
  .byte 112 # StringLiteral at 48.11
  .byte 32 # StringLiteral at 48.11
  .byte 116 # StringLiteral at 48.11
  .byte 104 # StringLiteral at 48.11
  .byte 114 # StringLiteral at 48.11
  .byte 111 # StringLiteral at 48.11
  .byte 117 # StringLiteral at 48.11
  .byte 103 # StringLiteral at 48.11
  .byte 104 # StringLiteral at 48.11
  .byte 32 # StringLiteral at 48.11
  .byte 0 # StringLiteral at 48.11
  .byte 0 # StringLiteral at 48.11
  .word CLASS_String # StringLiteral at 48.11
  .word 6 # StringLiteral at 48.11
  .word -18 # StringLiteral at 48.11
5704:strLit_84: # StringLiteral at 48.11
  .byte 58 # StringLiteral at 50.11
  .byte 10 # StringLiteral at 50.11
  .byte 0 # StringLiteral at 50.11
  .byte 0 # StringLiteral at 50.11
  .word CLASS_String # StringLiteral at 50.11
  .word 2 # StringLiteral at 50.11
  .word -2 # StringLiteral at 50.11
5720:strLit_92: # StringLiteral at 50.11
  .byte 10 # StringLiteral at 61.16
  .byte 0 # StringLiteral at 61.16
  .byte 0 # StringLiteral at 61.16
  .byte 0 # StringLiteral at 61.16
  .word CLASS_String # StringLiteral at 61.16
  .word 2 # StringLiteral at 61.16
  .word -1 # StringLiteral at 61.16
5736:strLit_129: # StringLiteral at 61.16
  .byte 32 # StringLiteral at 66.16
  .byte 0 # StringLiteral at 66.16
  .byte 0 # StringLiteral at 66.16
  .byte 0 # StringLiteral at 66.16
  .word CLASS_String # StringLiteral at 66.16
  .word 2 # StringLiteral at 66.16
  .word -1 # StringLiteral at 66.16
5752:strLit_137: # StringLiteral at 66.16
  .byte 10 # StringLiteral at 72.11
  .byte 0 # StringLiteral at 72.11
  .byte 0 # StringLiteral at 72.11
  .byte 0 # StringLiteral at 72.11
  .word CLASS_String # StringLiteral at 72.11
  .word 2 # StringLiteral at 72.11
  .word -1 # StringLiteral at 72.11
5768:strLit_150: # StringLiteral at 72.11
# begin: Program at 5.1; stackHeight = 0
.text
.globl main
0:main:
0#  jal vm_init
# begin: CallStatement at 0.0; stackHeight = 0
# begin: Call at 0.0; stackHeight = 0
# begin: NewObject at 0.0; stackHeight = 0
4#li $s6, 2
8#li $s7, 1
12#jal newObject
16#la $t0, CLASS_Main
20#sw $t0, -12($s7)
# end: NewObject at 0.0; stackHeight = 4
24#lw $t0, 0($sp)
28#sw $s2, 0($sp)
32#move $s2, $t0
36#beq $s2, $0, nullPtrException
40#lw $t0, -12($s2)
44#lw $t0, 12($t0)
48#jalr $t0
52#addu $sp, $sp, 0
56#lw $s2, ($sp)
60#addu $sp, $sp, 4
64#subu $sp, $sp, 4
68#sw $t0, ($sp)
# end: Call at 0.0; stackHeight = 4
72#lw $t0, ($sp)
76#addu $sp, $sp, 4
# end: CallStatement at 0.0; stackHeight = 0
80#  li $v0, 10
84#  syscall
# begin: MethodDeclVoid at 6.17; stackHeight = 0
.globl mth_Main_main
88:mth_Main_main:
88#subu $sp, $sp, 4
92#sw $ra, ($sp)
# begin: CallStatement at 7.14; stackHeight = 0
# begin: Call at 7.14; stackHeight = 0
# begin: NewObject at 7.2; stackHeight = 0
96#li $s6, 2
100#li $s7, 1
104#jal newObject
108#la $t0, CLASS_Seive
112#sw $t0, -12($s7)
# end: NewObject at 7.2; stackHeight = 4
116#lw $t0, 0($sp)
120#sw $s2, 0($sp)
124#move $s2, $t0
128#beq $s2, $0, nullPtrException
132#lw $t0, -12($s2)
136#lw $t0, 44($t0)
140#jalr $t0
144#addu $sp, $sp, 0
148#lw $s2, ($sp)
152#addu $sp, $sp, 4
156#subu $sp, $sp, 4
160#sw $t0, ($sp)
# end: Call at 7.14; stackHeight = 4
164#lw $t0, ($sp)
168#addu $sp, $sp, 4
# end: CallStatement at 7.14; stackHeight = 0
172#addu $sp, $sp, 0
176#lw $ra, ($sp)
180#addu $sp, $sp, 4
184#jr $ra
# end: MethodDeclVoid at 6.17; stackHeight = -4
# begin: MethodDeclVoid at 15.17; stackHeight = -4
.globl mth_Seive_exec
188:mth_Seive_exec:
188#subu $sp, $sp, 4
192#sw $ra, ($sp)
# begin: CallStatement at 18.2; stackHeight = 0
# begin: Call at 18.2; stackHeight = 0
196#subu $sp, $sp, 4
200#sw $s2, ($sp)
# begin: StringLiteral at 18.11; stackHeight = 4
204#li $t0, strLit_6
208#subu $sp, $sp, 4
212#sw $t0, ($sp)
# end: StringLiteral at 18.11; stackHeight = 8
216#lw $t0, 4($sp)
220#sw $s2, 4($sp)
224#move $s2, $t0
228#beq $s2, $0, nullPtrException
232#lw $t0, -12($s2)
236#lw $t0, 24($t0)
240#jalr $t0
244#addu $sp, $sp, 4
248#lw $s2, ($sp)
252#addu $sp, $sp, 4
256#subu $sp, $sp, 4
260#sw $t0, ($sp)
# end: Call at 18.2; stackHeight = 4
264#lw $t0, ($sp)
268#addu $sp, $sp, 4
# end: CallStatement at 18.2; stackHeight = 0
# begin: LocalVarDecl at 19.6; stackHeight = 0
# begin: Call at 19.12; stackHeight = 0
272#subu $sp, $sp, 4
276#sw $s2, ($sp)
280#lw $t0, 0($sp)
284#sw $s2, 0($sp)
288#move $s2, $t0
292#beq $s2, $0, nullPtrException
296#lw $t0, -12($s2)
300#lw $t0, 16($t0)
304#jalr $t0
308#addu $sp, $sp, 0
312#lw $s2, ($sp)
316#addu $sp, $sp, 4
320#subu $sp, $sp, 8
324#sw $s5, 4($sp)
328#sw $t0, ($sp)
# end: Call at 19.12; stackHeight = 8
332#lw $0, ($sp) #**num
# end: LocalVarDecl at 19.6; stackHeight = 8
# begin: LocalVarDecl at 22.6; stackHeight = 8
# begin: IdentifierExp at 22.10; stackHeight = 8
336#lw $t0, 0($sp) #**LocalVar
340#subu $sp, $sp, 8
344#sw $s5, 4($sp)
348#sw $t0, ($sp)
# end: IdentifierExp at 22.10; stackHeight = 16
352#lw $0, ($sp) #**n
# end: LocalVarDecl at 22.6; stackHeight = 16
# begin: If at 23.2; stackHeight = 16
# begin: LessThan at 23.8; stackHeight = 16
# begin: IdentifierExp at 23.6; stackHeight = 16
356#lw $t0, 0($sp) #**LocalVar
360#subu $sp, $sp, 8
364#sw $s5, 4($sp)
368#sw $t0, ($sp)
# end: IdentifierExp at 23.6; stackHeight = 24
# begin: IntegerLiteral at 23.10; stackHeight = 24
372#li $t0, 0
376#subu $sp, $sp, 8
380#sw $s5, 4($sp)
384#sw $t0, ($sp)
# end: IntegerLiteral at 23.10; stackHeight = 32
388#lw $t2, ($sp)
392#addu $sp, $sp, 8
396#lw $t1, ($sp)
400#addu $sp, $sp, 8
404#slt $t0, $t1, $t2
408#subu $sp, $sp, 4
412#sw $t0, ($sp)
# end: LessThan at 23.8; stackHeight = 20
416#lw $t0, ($sp)
420#addu $sp, $sp, 4
424#beq $t0, $0, if_else_27
# begin: Block at 23.13; stackHeight = 16
# begin: Assign at 24.8; stackHeight = 16
# begin: IntegerLiteral at 24.10; stackHeight = 16
428#li $t0, 0
432#subu $sp, $sp, 8
436#sw $s5, 4($sp)
440#sw $t0, ($sp)
# end: IntegerLiteral at 24.10; stackHeight = 24
444#lw $t0, ($sp)
448#addu $sp, $sp, 8
452#sw $t0, 0($sp)
# end: Assign at 24.8; stackHeight = 16
456#addu $sp, $sp, 0
# end: Block at 23.13; stackHeight = 16
460#j if_done_27
464:if_else_27:
# begin: Block at 32.2; stackHeight = 16
464#addu $sp, $sp, 0
# end: Block at 32.2; stackHeight = 16
468:if_done_27:
# end: If at 23.2; stackHeight = 16
# begin: LocalVarDecl at 32.12; stackHeight = 16
# begin: NewArray at 32.20; stackHeight = 16
# begin: Plus at 32.33; stackHeight = 16
# begin: IdentifierExp at 32.32; stackHeight = 16
468#lw $t0, 0($sp) #**LocalVar
472#subu $sp, $sp, 8
476#sw $s5, 4($sp)
480#sw $t0, ($sp)
# end: IdentifierExp at 32.32; stackHeight = 24
# begin: IntegerLiteral at 32.34; stackHeight = 24
484#li $t0, 1
488#subu $sp, $sp, 8
492#sw $s5, 4($sp)
496#sw $t0, ($sp)
# end: IntegerLiteral at 32.34; stackHeight = 32
500#lw $t2, ($sp)
504#addu $sp, $sp, 8
508#lw $t1, ($sp)
512#addu $sp, $sp, 8
516#addu $t0, $t1, $t2
520#subu $sp, $sp, 8
524#sw $s5, 4($sp)
528#sw $t0, ($sp)
# end: Plus at 32.33; stackHeight = 24
532#li $s6, 1
536#lw $s7, ($sp)
540#addu $sp, $sp, 4
544#jal newObject
548#la $t0, CLASS_ARRAY_BOOLEAN
552#sw $t0, -12($s7)
# end: NewArray at 32.20; stackHeight = 20
556#lw $0, ($sp) #**seive
# end: LocalVarDecl at 32.12; stackHeight = 20
# begin: Block at 35.2; stackHeight = 20
# begin: LocalVarDecl at 35.11; stackHeight = 20
# begin: IntegerLiteral at 35.15; stackHeight = 20
560#li $t0, 2
564#subu $sp, $sp, 8
568#sw $s5, 4($sp)
572#sw $t0, ($sp)
# end: IntegerLiteral at 35.15; stackHeight = 28
576#lw $0, ($sp) #**i
# end: LocalVarDecl at 35.11; stackHeight = 28
# begin: BreakTarget at 35.2; stackHeight = 28
580:while_cond_82:
# begin: Not at 35.20; stackHeight = 28
# begin: GreaterThan at 35.20; stackHeight = 28
# begin: IdentifierExp at 35.18; stackHeight = 28
580#lw $t0, 0($sp) #**LocalVar
584#subu $sp, $sp, 8
588#sw $s5, 4($sp)
592#sw $t0, ($sp)
# end: IdentifierExp at 35.18; stackHeight = 36
# begin: IdentifierExp at 35.23; stackHeight = 36
596#lw $t0, 20($sp) #**LocalVar
600#subu $sp, $sp, 8
604#sw $s5, 4($sp)
608#sw $t0, ($sp)
# end: IdentifierExp at 35.23; stackHeight = 44
612#lw $t2, ($sp)
616#addu $sp, $sp, 8
620#lw $t1, ($sp)
624#addu $sp, $sp, 8
628#sgt $t0, $t1, $t2
632#subu $sp, $sp, 4
636#sw $t0, ($sp)
# end: GreaterThan at 35.20; stackHeight = 32
640#lw $t0, ($sp)
644#xor $t0, $t0, 1
648#sw $t0, ($sp)
# end: Not at 35.20; stackHeight = 32
652#lw $t0, ($sp)
656#addu $sp, $sp, 4
660#beq $t0, $0, break_target_82
# begin: Block at 35.2; stackHeight = 28
# begin: Block at 35.31; stackHeight = 28
# begin: If at 36.6; stackHeight = 28
# begin: Not at 36.10; stackHeight = 28
# begin: ArrayLookup at 36.16; stackHeight = 28
# begin: IdentifierExp at 36.17; stackHeight = 28
664#lw $t0, 0($sp) #**LocalVar
668#subu $sp, $sp, 8
672#sw $s5, 4($sp)
676#sw $t0, ($sp)
# end: IdentifierExp at 36.17; stackHeight = 36
# begin: IdentifierExp at 36.11; stackHeight = 36
680#lw $t0, 16($sp) #**LocalVar
684#subu $sp, $sp, 4
688#sw $t0, ($sp)
# end: IdentifierExp at 36.11; stackHeight = 40
692#lw $t0, ($sp)
696#addu $sp, $sp, 4
700#lw $t1, ($sp)
704#addu $sp, $sp, 8
708#beq $t0, $0, nullPtrException
712#lw $t3, -4($t0)
716#bgeu $t1, $t3, arrayIndexOutOfBounds
717##...sltu $at,$t1,$t3
721##...beq $at,$zero,5376
724#sll $t1, $t1, 2
728#addu $t1, $t1, $t0
732#lw $t0, ($t1)
736#subu $sp, $sp, 4
740#sw $t0, ($sp)
# end: ArrayLookup at 36.16; stackHeight = 32
744#lw $t0, ($sp)
748#xor $t0, $t0, 1
752#sw $t0, ($sp)
# end: Not at 36.10; stackHeight = 32
756#lw $t0, ($sp)
760#addu $sp, $sp, 4
764#beq $t0, $0, if_else_79
# begin: Block at 36.21; stackHeight = 28
# begin: Block at 37.3; stackHeight = 28
# begin: LocalVarDecl at 37.12; stackHeight = 28
# begin: Times at 37.17; stackHeight = 28
# begin: IntegerLiteral at 37.16; stackHeight = 28
768#li $t0, 2
772#subu $sp, $sp, 8
776#sw $s5, 4($sp)
780#sw $t0, ($sp)
# end: IntegerLiteral at 37.16; stackHeight = 36
# begin: IdentifierExp at 37.18; stackHeight = 36
784#lw $t0, 8($sp) #**LocalVar
788#subu $sp, $sp, 8
792#sw $s5, 4($sp)
796#sw $t0, ($sp)
# end: IdentifierExp at 37.18; stackHeight = 44
800#lw $t2, ($sp)
804#addu $sp, $sp, 8
808#lw $t1, ($sp)
812#addu $sp, $sp, 8
816#mul $t0, $t1, $t2
817##...mult $t1,$t2
821##...mflo $t0
824#subu $sp, $sp, 8
828#sw $s5, 4($sp)
832#sw $t0, ($sp)
# end: Times at 37.17; stackHeight = 36
836#lw $0, ($sp) #**j
# end: LocalVarDecl at 37.12; stackHeight = 36
# begin: BreakTarget at 37.3; stackHeight = 36
840:while_cond_75:
# begin: LessThan at 37.23; stackHeight = 36
# begin: IdentifierExp at 37.21; stackHeight = 36
840#lw $t0, 0($sp) #**LocalVar
844#subu $sp, $sp, 8
848#sw $s5, 4($sp)
852#sw $t0, ($sp)
# end: IdentifierExp at 37.21; stackHeight = 44
# begin: IdentifierExp at 37.25; stackHeight = 44
856#lw $t0, 28($sp) #**LocalVar
860#subu $sp, $sp, 8
864#sw $s5, 4($sp)
868#sw $t0, ($sp)
# end: IdentifierExp at 37.25; stackHeight = 52
872#lw $t2, ($sp)
876#addu $sp, $sp, 8
880#lw $t1, ($sp)
884#addu $sp, $sp, 8
888#slt $t0, $t1, $t2
892#subu $sp, $sp, 4
896#sw $t0, ($sp)
# end: LessThan at 37.23; stackHeight = 40
900#lw $t0, ($sp)
904#addu $sp, $sp, 4
908#beq $t0, $0, break_target_75
# begin: Block at 37.3; stackHeight = 36
# begin: Block at 37.39; stackHeight = 36
# begin: Assign at 38.16; stackHeight = 36
# begin: IdentifierExp at 38.7; stackHeight = 36
912#lw $t0, 16($sp) #**LocalVar
916#subu $sp, $sp, 4
920#sw $t0, ($sp)
# end: IdentifierExp at 38.7; stackHeight = 40
# begin: IdentifierExp at 38.13; stackHeight = 40
924#lw $t0, 4($sp) #**LocalVar
928#subu $sp, $sp, 8
932#sw $s5, 4($sp)
936#sw $t0, ($sp)
# end: IdentifierExp at 38.13; stackHeight = 48
# begin: True at 38.18; stackHeight = 48
940#li $t0, 1
944#subu $sp, $sp, 4
948#sw $t0, ($sp)
# end: True at 38.18; stackHeight = 52
952#lw $t0, ($sp)
956#addu $sp, $sp, 4
960#lw $t1, ($sp)
964#addu $sp, $sp, 8
968#lw $t2, ($sp)
972#addu $sp, $sp, 4
976#beq $t2, $0, nullPtrException
980#lw $t3, -4($t2)
984#bgeu $t1, $t3, arrayIndexOutOfBounds
985##...sltu $at,$t1,$t3
989##...beq $at,$zero,5376
992#sll $t1, $t1, 2
996#addu $t1, $t1, $t2
1000#sw $t0, ($t1)
# end: Assign at 38.16; stackHeight = 36
1004#addu $sp, $sp, 0
# end: Block at 37.39; stackHeight = 36
# begin: Assign at 37.30; stackHeight = 36
# begin: Plus at 37.34; stackHeight = 36
# begin: IdentifierExp at 37.32; stackHeight = 36
1008#lw $t0, 0($sp) #**LocalVar
1012#subu $sp, $sp, 8
1016#sw $s5, 4($sp)
1020#sw $t0, ($sp)
# end: IdentifierExp at 37.32; stackHeight = 44
# begin: IdentifierExp at 37.36; stackHeight = 44
1024#lw $t0, 16($sp) #**LocalVar
1028#subu $sp, $sp, 8
1032#sw $s5, 4($sp)
1036#sw $t0, ($sp)
# end: IdentifierExp at 37.36; stackHeight = 52
1040#lw $t2, ($sp)
1044#addu $sp, $sp, 8
1048#lw $t1, ($sp)
1052#addu $sp, $sp, 8
1056#addu $t0, $t1, $t2
1060#subu $sp, $sp, 8
1064#sw $s5, 4($sp)
1068#sw $t0, ($sp)
# end: Plus at 37.34; stackHeight = 44
1072#lw $t0, ($sp)
1076#addu $sp, $sp, 8
1080#sw $t0, 0($sp)
# end: Assign at 37.30; stackHeight = 36
1084#addu $sp, $sp, 0
# end: Block at 37.3; stackHeight = 36
1088#j while_cond_75
1092:break_target_75:
# end: BreakTarget at 37.3; stackHeight = 36
1092#addu $sp, $sp, 8
# end: Block at 37.3; stackHeight = 28
1096#addu $sp, $sp, 0
# end: Block at 36.21; stackHeight = 28
1100#j if_done_79
1104:if_else_79:
# begin: Block at 41.2; stackHeight = 28
1104#addu $sp, $sp, 0
# end: Block at 41.2; stackHeight = 28
1108:if_done_79:
# end: If at 36.6; stackHeight = 28
1108#addu $sp, $sp, 0
# end: Block at 35.31; stackHeight = 28
# begin: Assign at 35.26; stackHeight = 28
# begin: Plus at 35.27; stackHeight = 28
# begin: IdentifierExp at 35.26; stackHeight = 28
1112#lw $t0, 0($sp) #**LocalVar
1116#subu $sp, $sp, 8
1120#sw $s5, 4($sp)
1124#sw $t0, ($sp)
# end: IdentifierExp at 35.26; stackHeight = 36
# begin: IntegerLiteral at 35.27; stackHeight = 36
1128#li $t0, 1
1132#subu $sp, $sp, 8
1136#sw $s5, 4($sp)
1140#sw $t0, ($sp)
# end: IntegerLiteral at 35.27; stackHeight = 44
1144#lw $t2, ($sp)
1148#addu $sp, $sp, 8
1152#lw $t1, ($sp)
1156#addu $sp, $sp, 8
1160#addu $t0, $t1, $t2
1164#subu $sp, $sp, 8
1168#sw $s5, 4($sp)
1172#sw $t0, ($sp)
# end: Plus at 35.27; stackHeight = 36
1176#lw $t0, ($sp)
1180#addu $sp, $sp, 8
1184#sw $t0, 0($sp)
# end: Assign at 35.26; stackHeight = 28
1188#addu $sp, $sp, 0
# end: Block at 35.2; stackHeight = 28
1192#j while_cond_82
1196:break_target_82:
# end: BreakTarget at 35.2; stackHeight = 28
1196#addu $sp, $sp, 8
# end: Block at 35.2; stackHeight = 20
# begin: CallStatement at 48.2; stackHeight = 20
# begin: Call at 48.2; stackHeight = 20
1200#subu $sp, $sp, 4
1204#sw $s2, ($sp)
# begin: StringLiteral at 48.11; stackHeight = 24
1208#li $t0, strLit_84
1212#subu $sp, $sp, 4
1216#sw $t0, ($sp)
# end: StringLiteral at 48.11; stackHeight = 28
1220#lw $t0, 4($sp)
1224#sw $s2, 4($sp)
1228#move $s2, $t0
1232#beq $s2, $0, nullPtrException
1236#lw $t0, -12($s2)
1240#lw $t0, 24($t0)
1244#jalr $t0
1248#addu $sp, $sp, 4
1252#lw $s2, ($sp)
1256#addu $sp, $sp, 4
1260#subu $sp, $sp, 4
1264#sw $t0, ($sp)
# end: Call at 48.2; stackHeight = 24
1268#lw $t0, ($sp)
1272#addu $sp, $sp, 4
# end: CallStatement at 48.2; stackHeight = 20
# begin: CallStatement at 49.2; stackHeight = 20
# begin: Call at 49.2; stackHeight = 20
1276#subu $sp, $sp, 4
1280#sw $s2, ($sp)
# begin: IdentifierExp at 49.11; stackHeight = 24
1284#lw $t0, 8($sp) #**LocalVar
1288#subu $sp, $sp, 8
1292#sw $s5, 4($sp)
1296#sw $t0, ($sp)
# end: IdentifierExp at 49.11; stackHeight = 32
1300#lw $t0, 8($sp)
1304#sw $s2, 8($sp)
1308#move $s2, $t0
1312#beq $s2, $0, nullPtrException
1316#lw $t0, -12($s2)
1320#lw $t0, 32($t0)
1324#jalr $t0
1328#addu $sp, $sp, 8
1332#lw $s2, ($sp)
1336#addu $sp, $sp, 4
1340#subu $sp, $sp, 4
1344#sw $t0, ($sp)
# end: Call at 49.2; stackHeight = 24
1348#lw $t0, ($sp)
1352#addu $sp, $sp, 4
# end: CallStatement at 49.2; stackHeight = 20
# begin: CallStatement at 50.2; stackHeight = 20
# begin: Call at 50.2; stackHeight = 20
1356#subu $sp, $sp, 4
1360#sw $s2, ($sp)
# begin: StringLiteral at 50.11; stackHeight = 24
1364#li $t0, strLit_92
1368#subu $sp, $sp, 4
1372#sw $t0, ($sp)
# end: StringLiteral at 50.11; stackHeight = 28
1376#lw $t0, 4($sp)
1380#sw $s2, 4($sp)
1384#move $s2, $t0
1388#beq $s2, $0, nullPtrException
1392#lw $t0, -12($s2)
1396#lw $t0, 24($t0)
1400#jalr $t0
1404#addu $sp, $sp, 4
1408#lw $s2, ($sp)
1412#addu $sp, $sp, 4
1416#subu $sp, $sp, 4
1420#sw $t0, ($sp)
# end: Call at 50.2; stackHeight = 24
1424#lw $t0, ($sp)
1428#addu $sp, $sp, 4
# end: CallStatement at 50.2; stackHeight = 20
# begin: LocalVarDecl at 53.6; stackHeight = 20
# begin: IntegerLiteral at 53.23; stackHeight = 20
1432#li $t0, 0
1436#subu $sp, $sp, 8
1440#sw $s5, 4($sp)
1444#sw $t0, ($sp)
# end: IntegerLiteral at 53.23; stackHeight = 28
1448#lw $0, ($sp) #**elementsOnLine
# end: LocalVarDecl at 53.6; stackHeight = 28
# begin: Block at 54.2; stackHeight = 28
# begin: LocalVarDecl at 54.11; stackHeight = 28
# begin: IntegerLiteral at 54.15; stackHeight = 28
1452#li $t0, 2
1456#subu $sp, $sp, 8
1460#sw $s5, 4($sp)
1464#sw $t0, ($sp)
# end: IntegerLiteral at 54.15; stackHeight = 36
1468#lw $0, ($sp) #**i
# end: LocalVarDecl at 54.11; stackHeight = 36
# begin: BreakTarget at 54.2; stackHeight = 36
1472:while_cond_148:
# begin: LessThan at 54.20; stackHeight = 36
# begin: IdentifierExp at 54.18; stackHeight = 36
1472#lw $t0, 0($sp) #**LocalVar
1476#subu $sp, $sp, 8
1480#sw $s5, 4($sp)
1484#sw $t0, ($sp)
# end: IdentifierExp at 54.18; stackHeight = 44
# begin: IdentifierExp at 54.22; stackHeight = 44
1488#lw $t0, 28($sp) #**LocalVar
1492#subu $sp, $sp, 8
1496#sw $s5, 4($sp)
1500#sw $t0, ($sp)
# end: IdentifierExp at 54.22; stackHeight = 52
1504#lw $t2, ($sp)
1508#addu $sp, $sp, 8
1512#lw $t1, ($sp)
1516#addu $sp, $sp, 8
1520#slt $t0, $t1, $t2
1524#subu $sp, $sp, 4
1528#sw $t0, ($sp)
# end: LessThan at 54.20; stackHeight = 40
1532#lw $t0, ($sp)
1536#addu $sp, $sp, 4
1540#beq $t0, $0, break_target_148
# begin: Block at 54.2; stackHeight = 36
# begin: Block at 54.30; stackHeight = 36
# begin: If at 55.6; stackHeight = 36
# begin: Not at 55.10; stackHeight = 36
# begin: ArrayLookup at 55.16; stackHeight = 36
# begin: IdentifierExp at 55.17; stackHeight = 36
1544#lw $t0, 0($sp) #**LocalVar
1548#subu $sp, $sp, 8
1552#sw $s5, 4($sp)
1556#sw $t0, ($sp)
# end: IdentifierExp at 55.17; stackHeight = 44
# begin: IdentifierExp at 55.11; stackHeight = 44
1560#lw $t0, 24($sp) #**LocalVar
1564#subu $sp, $sp, 4
1568#sw $t0, ($sp)
# end: IdentifierExp at 55.11; stackHeight = 48
1572#lw $t0, ($sp)
1576#addu $sp, $sp, 4
1580#lw $t1, ($sp)
1584#addu $sp, $sp, 8
1588#beq $t0, $0, nullPtrException
1592#lw $t3, -4($t0)
1596#bgeu $t1, $t3, arrayIndexOutOfBounds
1597##...sltu $at,$t1,$t3
1601##...beq $at,$zero,5376
1604#sll $t1, $t1, 2
1608#addu $t1, $t1, $t0
1612#lw $t0, ($t1)
1616#subu $sp, $sp, 4
1620#sw $t0, ($sp)
# end: ArrayLookup at 55.16; stackHeight = 40
1624#lw $t0, ($sp)
1628#xor $t0, $t0, 1
1632#sw $t0, ($sp)
# end: Not at 55.10; stackHeight = 40
1636#lw $t0, ($sp)
1640#addu $sp, $sp, 4
1644#beq $t0, $0, if_else_145
# begin: Block at 55.21; stackHeight = 36
# begin: CallStatement at 57.3; stackHeight = 36
# begin: Call at 57.3; stackHeight = 36
1648#subu $sp, $sp, 4
1652#sw $s2, ($sp)
# begin: IdentifierExp at 57.12; stackHeight = 40
1656#lw $t0, 4($sp) #**LocalVar
1660#subu $sp, $sp, 8
1664#sw $s5, 4($sp)
1668#sw $t0, ($sp)
# end: IdentifierExp at 57.12; stackHeight = 48
1672#lw $t0, 8($sp)
1676#sw $s2, 8($sp)
1680#move $s2, $t0
1684#beq $s2, $0, nullPtrException
1688#lw $t0, -12($s2)
1692#lw $t0, 32($t0)
1696#jalr $t0
1700#addu $sp, $sp, 8
1704#lw $s2, ($sp)
1708#addu $sp, $sp, 4
1712#subu $sp, $sp, 4
1716#sw $t0, ($sp)
# end: Call at 57.3; stackHeight = 40
1720#lw $t0, ($sp)
1724#addu $sp, $sp, 4
# end: CallStatement at 57.3; stackHeight = 36
# begin: Assign at 58.3; stackHeight = 36
# begin: Plus at 58.17; stackHeight = 36
# begin: IdentifierExp at 58.3; stackHeight = 36
1728#lw $t0, 8($sp) #**LocalVar
1732#subu $sp, $sp, 8
1736#sw $s5, 4($sp)
1740#sw $t0, ($sp)
# end: IdentifierExp at 58.3; stackHeight = 44
# begin: IntegerLiteral at 58.17; stackHeight = 44
1744#li $t0, 1
1748#subu $sp, $sp, 8
1752#sw $s5, 4($sp)
1756#sw $t0, ($sp)
# end: IntegerLiteral at 58.17; stackHeight = 52
1760#lw $t2, ($sp)
1764#addu $sp, $sp, 8
1768#lw $t1, ($sp)
1772#addu $sp, $sp, 8
1776#addu $t0, $t1, $t2
1780#subu $sp, $sp, 8
1784#sw $s5, 4($sp)
1788#sw $t0, ($sp)
# end: Plus at 58.17; stackHeight = 44
1792#lw $t0, ($sp)
1796#addu $sp, $sp, 8
1800#sw $t0, 8($sp)
# end: Assign at 58.3; stackHeight = 36
# begin: If at 59.3; stackHeight = 36
# begin: Not at 59.22; stackHeight = 36
# begin: LessThan at 59.22; stackHeight = 36
# begin: IdentifierExp at 59.7; stackHeight = 36
1804#lw $t0, 8($sp) #**LocalVar
1808#subu $sp, $sp, 8
1812#sw $s5, 4($sp)
1816#sw $t0, ($sp)
# end: IdentifierExp at 59.7; stackHeight = 44
# begin: IntegerLiteral at 59.25; stackHeight = 44
1820#li $t0, 20
1824#subu $sp, $sp, 8
1828#sw $s5, 4($sp)
1832#sw $t0, ($sp)
# end: IntegerLiteral at 59.25; stackHeight = 52
1836#lw $t2, ($sp)
1840#addu $sp, $sp, 8
1844#lw $t1, ($sp)
1848#addu $sp, $sp, 8
1852#slt $t0, $t1, $t2
1856#subu $sp, $sp, 4
1860#sw $t0, ($sp)
# end: LessThan at 59.22; stackHeight = 40
1864#lw $t0, ($sp)
1868#xor $t0, $t0, 1
1872#sw $t0, ($sp)
# end: Not at 59.22; stackHeight = 40
1876#lw $t0, ($sp)
1880#addu $sp, $sp, 4
1884#beq $t0, $0, if_else_142
# begin: Block at 59.29; stackHeight = 36
# begin: CallStatement at 61.7; stackHeight = 36
# begin: Call at 61.7; stackHeight = 36
1888#subu $sp, $sp, 4
1892#sw $s2, ($sp)
# begin: StringLiteral at 61.16; stackHeight = 40
1896#li $t0, strLit_129
1900#subu $sp, $sp, 4
1904#sw $t0, ($sp)
# end: StringLiteral at 61.16; stackHeight = 44
1908#lw $t0, 4($sp)
1912#sw $s2, 4($sp)
1916#move $s2, $t0
1920#beq $s2, $0, nullPtrException
1924#lw $t0, -12($s2)
1928#lw $t0, 24($t0)
1932#jalr $t0
1936#addu $sp, $sp, 4
1940#lw $s2, ($sp)
1944#addu $sp, $sp, 4
1948#subu $sp, $sp, 4
1952#sw $t0, ($sp)
# end: Call at 61.7; stackHeight = 40
1956#lw $t0, ($sp)
1960#addu $sp, $sp, 4
# end: CallStatement at 61.7; stackHeight = 36
# begin: Assign at 62.22; stackHeight = 36
# begin: IntegerLiteral at 62.24; stackHeight = 36
1964#li $t0, 0
1968#subu $sp, $sp, 8
1972#sw $s5, 4($sp)
1976#sw $t0, ($sp)
# end: IntegerLiteral at 62.24; stackHeight = 44
1980#lw $t0, ($sp)
1984#addu $sp, $sp, 8
1988#sw $t0, 8($sp)
# end: Assign at 62.22; stackHeight = 36
1992#addu $sp, $sp, 0
# end: Block at 59.29; stackHeight = 36
1996#j if_done_142
2000:if_else_142:
# begin: Block at 64.8; stackHeight = 36
# begin: CallStatement at 66.7; stackHeight = 36
# begin: Call at 66.7; stackHeight = 36
2000#subu $sp, $sp, 4
2004#sw $s2, ($sp)
# begin: StringLiteral at 66.16; stackHeight = 40
2008#li $t0, strLit_137
2012#subu $sp, $sp, 4
2016#sw $t0, ($sp)
# end: StringLiteral at 66.16; stackHeight = 44
2020#lw $t0, 4($sp)
2024#sw $s2, 4($sp)
2028#move $s2, $t0
2032#beq $s2, $0, nullPtrException
2036#lw $t0, -12($s2)
2040#lw $t0, 24($t0)
2044#jalr $t0
2048#addu $sp, $sp, 4
2052#lw $s2, ($sp)
2056#addu $sp, $sp, 4
2060#subu $sp, $sp, 4
2064#sw $t0, ($sp)
# end: Call at 66.7; stackHeight = 40
2068#lw $t0, ($sp)
2072#addu $sp, $sp, 4
# end: CallStatement at 66.7; stackHeight = 36
2076#addu $sp, $sp, 0
# end: Block at 64.8; stackHeight = 36
2080:if_done_142:
# end: If at 59.3; stackHeight = 36
2080#addu $sp, $sp, 0
# end: Block at 55.21; stackHeight = 36
2084#j if_done_145
2088:if_else_145:
# begin: Block at 69.2; stackHeight = 36
2088#addu $sp, $sp, 0
# end: Block at 69.2; stackHeight = 36
2092:if_done_145:
# end: If at 55.6; stackHeight = 36
2092#addu $sp, $sp, 0
# end: Block at 54.30; stackHeight = 36
# begin: Assign at 54.25; stackHeight = 36
# begin: Plus at 54.26; stackHeight = 36
# begin: IdentifierExp at 54.25; stackHeight = 36
2096#lw $t0, 0($sp) #**LocalVar
2100#subu $sp, $sp, 8
2104#sw $s5, 4($sp)
2108#sw $t0, ($sp)
# end: IdentifierExp at 54.25; stackHeight = 44
# begin: IntegerLiteral at 54.26; stackHeight = 44
2112#li $t0, 1
2116#subu $sp, $sp, 8
2120#sw $s5, 4($sp)
2124#sw $t0, ($sp)
# end: IntegerLiteral at 54.26; stackHeight = 52
2128#lw $t2, ($sp)
2132#addu $sp, $sp, 8
2136#lw $t1, ($sp)
2140#addu $sp, $sp, 8
2144#addu $t0, $t1, $t2
2148#subu $sp, $sp, 8
2152#sw $s5, 4($sp)
2156#sw $t0, ($sp)
# end: Plus at 54.26; stackHeight = 44
2160#lw $t0, ($sp)
2164#addu $sp, $sp, 8
2168#sw $t0, 0($sp)
# end: Assign at 54.25; stackHeight = 36
2172#addu $sp, $sp, 0
# end: Block at 54.2; stackHeight = 36
2176#j while_cond_148
2180:break_target_148:
# end: BreakTarget at 54.2; stackHeight = 36
2180#addu $sp, $sp, 8
# end: Block at 54.2; stackHeight = 28
# begin: CallStatement at 72.2; stackHeight = 28
# begin: Call at 72.2; stackHeight = 28
2184#subu $sp, $sp, 4
2188#sw $s2, ($sp)
# begin: StringLiteral at 72.11; stackHeight = 32
2192#li $t0, strLit_150
2196#subu $sp, $sp, 4
2200#sw $t0, ($sp)
# end: StringLiteral at 72.11; stackHeight = 36
2204#lw $t0, 4($sp)
2208#sw $s2, 4($sp)
2212#move $s2, $t0
2216#beq $s2, $0, nullPtrException
2220#lw $t0, -12($s2)
2224#lw $t0, 24($t0)
2228#jalr $t0
2232#addu $sp, $sp, 4
2236#lw $s2, ($sp)
2240#addu $sp, $sp, 4
2244#subu $sp, $sp, 4
2248#sw $t0, ($sp)
# end: Call at 72.2; stackHeight = 32
2252#lw $t0, ($sp)
2256#addu $sp, $sp, 4
# end: CallStatement at 72.2; stackHeight = 28
2260#addu $sp, $sp, 28
2264#lw $ra, ($sp)
2268#addu $sp, $sp, 4
2272#jr $ra
# end: MethodDeclVoid at 15.17; stackHeight = -4
# end: Program at 5.1; stackHeight = -4
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
2276:mth_Object_hashCode:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
2276#    lw $t0,-8($s2) # get word with hash bits from this
2280#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
2284#    addu $t0,$t1

2288#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
2292:mth_Object_equals:
2292#    move $t0,$s2 # first pointer (this)
2296#    lw $t1,($sp) # second pointer
2300#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
2301##...subu $at,$t0,$t1
2305##...sltiu $t0,$at,1

2308#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
2312:mth_String_hashCode:
2312#    move $t0,$s2 # put this pointer in t0

2316#    li $t2,0 # current hash value
2320#    lw $t1,-4($t0) # negative of number of characters in string
2324#    beq $t1,$zero,done_hashCode_String # if zero length => done
2328#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
2332#    and $t0,0xfffffffc # adjust for padding
2333##...lui $at,65535
2337##...ori $at,$at,0xfffc
2341##...and $t0,$t0,$at
2344#    subu $t1,$t0,$t1 # address at end of string +12
2348:loop_hashCode_String:    
2348#    sll $t4,$t2,5 # multiply by 32
2352#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
2356#    lbu $t3,-12($t0) # current character
2360#    addu $t2,$t3 # add in current character
2364#    addu $t0,1 # go to next character's address
2368#    bne $t0,$t1,loop_hashCode_String # loop back if more
2372:done_hashCode_String:    

    # push int on stack
2372#    move $t0, $t2 # put $t2 in return slot
2376#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
2380:mth_Object_toString:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
2380#    subu $sp,4
2384#    sw $ra,($sp)
    
    # get hash value
2388#    lw $t2,-12($s2) # vtable address
2392#    lw $t0,($t2) # method address
2396#    jalr $t0
2400#    subu $sp,8 # push result (int in $t0) on stack
2404#    sw $s5,4($sp)
2408#    sw $t0,($sp)

    # compute print-size of hash value
2412#    li $t0, 1
2416#    lw $t1, ($sp)
2420#    srl $t1,$t1,4
2424#    beq $t1,$zero,toString_skip_loop
2428:toString_loop_top:
2428#    addu $t0,1
2432#    srl $t1,$t1,4
2436#    bne $t1,$zero,toString_loop_top
2440:toString_skip_loop:
2440#    subu $sp,8
2444#    sw $s5,4($sp)
2448#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
2452#    lw $t2,-12($s2) # vtable address
2456#    move $t0,$t2
2460:toString_checkTagBit:
2460#    subu $t0,1
2464#    lb $t1,($t0)
2468#    and $t1,0x80
2469##...lui $at,0
2473##...ori $at,$at,0x80
2477##...and $t1,$t1,$at
2480#    beq $t1,$zero,toString_checkTagBit
2484#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
2488#    subu $sp,8
2492#    sw $t1,($sp)
2496#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
2500#    move $s7,$zero # -4 offset header word
2504#    lw $t4,8($sp) # bytes for hash value
2508#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
2512#    addu $t4,8
2516#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
2520#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

2524#    li $t0,CLASS_String # store string vtable address into ...
2528#    sw $t0,-12($s7) # ... -12 offset in object header
2532#    lw $t2,-12($s2) # our object's vtable address
2536#    lw $t5,4($sp) # number characters in prefix
2540#    lw $t1,12($sp) # number of characters in hashcode
2544#    addu $t3,$t1,$t5 # number of characters in string ...
2548#    addu $t3,1 # ... including the '@' character
2552#    subu $t0,$zero,$t3 # store negated length into ...
2556#    sw $t0,-4($s7) # ... -4 offset header word
2560#    lw $t0,-8($s7) # get -8 offset header-word
2564#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
2565##...slt $at,$t0,$zero
2569##...beq $at,$zero,2588
2572#    and $t0,0xff # mask off object's hash value ...
2573##...lui $at,0
2577##...ori $at,$at,0xff
2581##...and $t0,$t0,$at
2584#    sw $t0,-8($s7) # ... and store back into -8 header-word
2588:skipMask_toString:
2588#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
2592#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
2596#    subu $t4,$t2,$t5
2600:toString_copyLoop:    
2600#    lb $t3,($t4)
2604#    and $t3,0x7f # mask off sign bit (in case first word)
2605##...lui $at,0
2609##...ori $at,$at,0x7f
2613##...and $t3,$t3,$at
2616#    sb $t3,-8($t0)
2620#    addu $t4,1
2624#    addu $t0,1
2628#    blt $t4,$t2,toString_copyLoop
2629##...slt $at,$t4,$t2
2633##...bne $at,$zero,2600

    # copy the '@' sign
2636#    li $t3,'@'
2640#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
2644#    addu $t2,$t0,$t1 # address of last byte in string to store +8
2648#    lw $t3,20($sp) # hash code to print
2652:toString_hashCopyLoop:
2652#    and $t4,$t3,0xf
2656#    srl $t3,4
2660#    lb $t4,hexChars($t4)
2664#    sb $t4,-8($t2)
2668#    subu $t2,$t2,1
2672#    bgt $t2,$t0,toString_hashCopyLoop
2673##...slt $at,$t0,$t2
2677##...bne $at,$zero,2652

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
2680#    addu $sp,28
2684#    lw $ra,($sp)
2688#    addu $sp,4
2692#    move $t0, $s7 # return string we created
2696#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
2700:mth_String_equals:
    
    # quick test for obvious false
2700#    lw $t0,($sp) # second parameter
2704#    beq $t0,$zero,goEsFalse # go return false if null
2708#    lw $t1,-12($t0) # vtable pointer
2712#    la $t2,CLASS_String # string vtable pointer
2716#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
2720#    subu $sp,12
2724#    sw $ra,8($sp)
2728#    sw $s2,4($sp)
2732#    sw $t0,($sp)
2736#    jal mth_String_compareTo
2740#    lw $s2, 4($sp) #restore this pointer and pop parameters
2744#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
2748#    seq $t0,$t0,$zero
2749##...subu $at,$t0,$zero
2753##...sltiu $t0,$at,1

    # pop return address and return $t0
2756#    lw $ra,($sp)
2760#    addu $sp,4

2764#    jr $ra # return
    
2768:goEsFalse:
    # put 0 in $t0 and return
2768#    li $t0, 0
2772#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
2776:mth_String_toString:
    #we are a string, so return this.
2776#    move $t0, $s2
2780#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
2784:mth_Lib_readLine:
    
2784#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
2788#    sw $ra, 4($sp) # save $ra
2792#    move $t1,$sp # save "original" sp

2796:  doRead:

    # read the character
2796#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
2800#    subu $t2,$v0,13
2804#    bne $t2,$zero,notReturnRL
2808#    jal readLogicalChar
2812#    subu $t2,$v0,10 # check for newline
2816#    beq $t2,$zero,foundNewLine
2820#    sw $v0,lastCharRead # push back character into queue
2824#    j foundNewLine # go process the line

2828:  notReturnRL:

    # at this point, $v0 has our character

2828#    subu $t0,$v0,10
2832#    beq $t0,$zero,foundNewLine
2836#    blt $v0,$zero,foundEof
2837##...slt $at,$v0,$zero
2841##...bne $at,$zero,2856

    # we have a character, so push it onto stack
2844#    subu $sp,$sp,4
2848#    sw $v0,($sp)

    # loop back up to get next character
2852#    j doRead

2856:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
2856#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
2860#    li $s7, 0 # return-value: null
2864#    j rlReturn # return

2868:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
2868#    subu $t0,$t1,$sp # number of chars we read (times 4)
2872#    srl $s6,$t0,2 # number of words on stack with chars
2876#    subu $sp,$sp,4 # push char-count ...
2880#    sw $s6,($sp) # ... onto stack
2884#    addu $t2,$t0,5 # GC tag, incl. for count-word
2888#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
2892#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
2896#    srl $s6,$s6,2  # data words in object
2900#    move $s7,$zero # object words in object
2904#    jal newObject  # allocate space
    
    # store header words
2908#    la $t0,CLASS_String
2912#    sw $t0,-12($s7)# store class tag (String) into object
2916#    lw $t2,4($sp) # char-count
2920#    sll $t1,$t2,2 # 4 times number of chars
2924#    subu $t2,$zero,$t2 # negative of char-count
2928#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
2932#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
2936#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
2937##...slt $at,$t0,$zero
2941##...beq $at,$zero,2960
2944#    and $t0,0xff # mask off object's hash value ...
2945##...lui $at,0
2949##...ori $at,$at,0xff
2953##...and $t0,$t0,$at
2956#    sw $t0,-8($s7) # ... and store back into -8 header-word
2960:  skipMask_readLine:

2960#    sll $t0,$t0,2 # data bytes in object
2964#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
2968#    subu $t0,$t0,$t2 # place to store last character (plus 9)
2972#    addu $sp,$sp,8 # pop redundant object-pointer and count
2976#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

2980#    beq $sp,$t1,rlReturn
2984:  charCopyLoop:
2984#    lw $t2,($sp)
2988#    sb $t2,-9($t0)
2992#    addu $sp,$sp,4
2996#    subu $t0,$t0,1
3000#    bne $sp,$t1,charCopyLoop
3004:  rlReturn:

3004#    lw $ra, 4($sp)
3008#    addu $sp, 8   # pop $ra and pointless word off stack
3012#    move $t0, $s7 # return string we allocated in $s7
3016#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
3020:mth_Lib_readInt:

    # save $ra by pushing onto stack
3020#    subu $sp,$sp,4
3024#    sw $ra,($sp)

3028:  riSkipWhiteLoop:
    # read a character
3028#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
3032#    subu $t0,$v0,32
3036#    bgt $t0,$zero,nonWhite
3037##...slt $at,$zero,$t0
3041##...bne $at,$zero,3084
3044#    beq $t0,$zero,riSkipWhiteLoop # start over if space
3048#    subu $t0,$v0,10
3052#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
3056#    subu $t0,$v0,9
3060#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
3064#    subu $t0,$v0,13
3068#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
3072#    subu $t0,$v0,12
3076#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
3080#    j badIntegerFormat # illegal integer char: abort program

3084:  nonWhite:
3084#    subu $t0,$v0,'-'
3088#    li $t4,1 # final multiplier
3092#    bne $t0,$zero,helpReadInt # go read
3096#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
3100#    jal readLogicalChar

3104:  helpReadInt:
3104#    li $t2,10
3108#    subu $t1,$v0,'0' # convert digit to 0-9 value
3112#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
3113##...sltu $at,$t1,$t2
3117##...beq $at,$zero,5400
3120#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

3124:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

3124#    jal readLogicalChar # read next character
3128#    subu $t1,$v0,'0' # convert digit to 0-9 value
3132#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
3133##...sltu $at,$t1,$t2
3137##...beq $at,$zero,3156

3140#    mul $t3,$t3,$t2 # multiply old value by 10
3141##...mult $t3,$t2
3145##...mflo $t3
3148#    addu $t3,$t3,$t1 # add in value of new digit
3152#    j digitLoop

3156:  doneDigitLoop:

    # "push back" unused character into queue
3156#    sw $v0,lastCharRead

    # restore return address
3160#    lw $ra,($sp)
3164#    addu $sp, 4

    # multiply by sign and put return value in $t0
3168#    mult $t3,$t4 # multiply to account for poss. minus sign
3172#    mflo $t3
3176#    move $t0, $t3
    
    # return
3180#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
3184:mth_Lib_readChar:

    # save $ra by pushing onto stack
3184#    subu $sp,$sp,4
3188#    sw $ra,($sp)

      # read the character
3192#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
3196#    lw $ra,($sp)
3200#    addu $sp, 4
3204#    move $t0, $v0

    # return
3208#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
3212:mth_Lib_printStr:
    # check for null, printing "(null)", if so
3212#    lw $t0,($sp)
3216#    bne $t0,$zero,psNotNull

    # print "(null)"
3220#    la $a0,nullStr
3224#    li $v0,4
3228#    syscall
3232#    j donePrintStr
    
3236:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
3236#    subu $t0,$t0,8
3240#    lw $t1,($t0) # number of data words, but needs modification
3244#    blt $t1,$zero,skipPrintStr1
3245##...slt $at,$t1,$zero
3249##...bne $at,$zero,3268
3252#    and $t1,0xff # mask out all but low byte
3253##...lui $at,0
3257##...ori $at,$at,0xff
3261##...and $t1,$t1,$at
3264#    b skipPrintStr2
3268:skipPrintStr1:
3268#    and $t1,0x7ffffff
3269##...lui $at,2047
3273##...ori $at,$at,0xffff
3277##...and $t1,$t1,$at
3280:skipPrintStr2:    
3280#    sll $t1,$t1,2
3284#    subu $t1,$t0,$t1 # first word in string
3288#    lw $t0,4($t0) # negative of string-length
3292#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
3296#    beq $t0,$t1,donePrintStr
3300:  psLoop:
3300#    lb $a0,($t1) # next byte
3304#    li $v0,11 # code for printing char
3308#        syscall # print the char
3312#    addu $t1,$t1,1 # go to next char
3316#    blt $t1,$t0,psLoop
3317##...slt $at,$t1,$t0
3321##...bne $at,$zero,3300

3324:  donePrintStr:
3324#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
3328:mth_Lib_printInt:
3328#    lw $a0,($sp)

    # print it
3332#    li $v0,1 # code for print-int
3336#    syscall

    # return
3340#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
3344:mth_Lib_printBool:
    # pop value off stack, along with 'this'
3344#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
3348#    la $a0,falseString
3352#    beq $t0,$zero,skipPB
3356#    la $a0,trueString
3360:  skipPB:
3360#    li $v0,4 # code for print-string
3364#    syscall

    # return
3368#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
3372:mth_String_substring:

    # save $ra by pushing onto stack
3372#    subu $sp,$sp,4
3376#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
3380#    move $t0,$s2
3384#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
3388#    lw $t0,-4($t0) # negative of string length
3392#    subu $t0,$zero,$t0 # string length
3396#    lw $t1,4($sp) # k
3400#    lw $t2,12($sp) # n
3404#    bgt $zero,$t2,strIndexOutOfBounds
3405##...slt $at,$t2,$zero
3409##...bne $at,$zero,5368
3412#    bgt $t2,$t1,strIndexOutOfBounds
3413##...slt $at,$t1,$t2
3417##...bne $at,$zero,5368
3420#    bgt $t1,$t0,strIndexOutOfBounds
3421##...slt $at,$t0,$t1
3425##...bne $at,$zero,5368

    # allocate memory
3428#    subu $s6,$t1,$t2 # # chars in target-string
3432#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
3436#    srl $s6,$s6,2 # convert bytes-count to word-count
3440#    move $s7,$zero # (no object-bytes in string)
3444#    jal newObject

    # store "String" tag in object-type field
3448#    la $t0,CLASS_String
3452#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
3456#    lw $t4,-8($s7) # data words in source string
3460#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
3461##...slt $at,$t4,$zero
3465##...beq $at,$zero,3484
3468#    and $t4,0xff # mask off object's hash value ...
3469##...lui $at,0
3473##...ori $at,$at,0xff
3477##...and $t4,$t4,$at
3480#    sw $t4,-8($s7) # ... and store back into -8 header-word
3484:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
3484#    lw $t1,8($sp) # k
3488#    lw $t2,16($sp) # n
3492#    subu $t0,$t2,$t1 # value to store
3496#    sw $t0,-4($s7) # store value
    
3500#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
3504#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
3508#    lw $t4,-8($t3) # data words in source string
3512#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
3516#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
3520#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
3524#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
3528#    lw $t2,-8($s7)   # data words in target string
3532#    sll $t2,$t2,2    # data bytes in target string
3536#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
3540:  subCopyLoopzz:
3540#    lb $t4,-8($t3)
3544#    sb $t4,-8($t2)
3548#    addu $t2,$t2,1
3552#    addu $t3,$t3,1
3556#    blt $t3,$t1,subCopyLoopzz
3557##...slt $at,$t3,$t1
3561##...bne $at,$zero,3540
    
3564:  doneSubCopyzz:
    # restore return address, store return value, pop stack
3564#    lw $ra,4($sp) # restore $ra
3568#    addu $sp,$sp,8 # pop ra, and allocated newObject
3572#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
3576#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
3580:mth_String_length:

    # the length is the negative of 4($s2)
3580#    lw $t0,-4($s2) # -length
3584#    subu $t0,$zero,$t0

    # return
3588#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
3592:mth_String_concat:
    # save $ra by pushing onto stack
3592#    subu $sp,$sp,4
3596#    sw $ra, ($sp)

    # get string pointers and check parameter for null
3600#    lw $t0,4($sp)
3604#    beq $t0,$zero,nullPtrException
3608#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
3612#    lw $t0,-4($t0) # negative size of second object
3616#    lw $t1,-4($t1) # negative size of first object
3620#    addu $s6,$t0,$t1 # sum of negative sizes
3624#    sra $s6,$s6,2 # negative word-size of char part
3628#    subu $s6,$zero,$s6 # word size of char part
3632#    addu $s6,$s6,1 # data word size, including v-table word
3636#    move $s7,$zero
3640#    jal newObject

    # store String vtable address in vtable address field
3644#    la $t0,CLASS_String
3648#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
3652#    lw $t4,-8($s7) # # data words in source string
3656#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
3657##...slt $at,$t4,$zero
3661##...beq $at,$zero,3680
3664#    and $t4,0xff # mask off object's hash value ...
3665##...lui $at,0
3669##...ori $at,$at,0xff
3673##...and $t4,$t4,$at
3676#    sw $t4,-8($s7) # ... and store back into -8 header-word
3680:skipMask_concat:

3680#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
3684#    move $t1,$s2   # first object
3688#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
3692#    lw $t2,-4($t0) # negative length of second object
3696#    lw $t3,-4($t1) # negative length of first object
3700#    addu $t4,$t2,$t3 # sum of negative lengths
3704#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
3708#    lw $t4,-8($t1) # # data words in first string
3712#    sll $t4,$t4,2 # # data bytes in first string
3716#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
3720#    lw $t4,-8($s7) # # data words in new string
3724#    sll $t4,$t4,2 # # data bytes in new string
3728#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
3732#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
3736#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
3740:  concatLoop1zz:
3740#    lb $t4,-8($t1)
3744#    sb $t4,-8($s7)
3748#    addu $s7,$s7,1
3752#    addu $t1,$t1,1
3756#    blt $t1,$t3,concatLoop1zz
3757##...slt $at,$t1,$t3
3761##...bne $at,$zero,3740
3764:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
3764#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
3768#    lw $t4,-8($t0) # # data words in second string
3772#    sll $t4,$t4,2 # # data bytes in second string
3776#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
3780#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
3784:  concatLoop2zz:
3784#    lb $t4,-8($t1)
3788#    sb $t4,-8($s7)
3792#    addu $s7,$s7,1
3796#    addu $t1,$t1,1
3800#    blt $t1,$t3,concatLoop2zz
3801##...slt $at,$t1,$t3
3805##...bne $at,$zero,3784
3808:  doneConcatLoop2zz:
 
3808:  concatRtnzz:
    # return
3808#    move $t0, $t9 # put saved return string in $t0
3812#    lw $ra, 4($sp)
3816#    addu $sp, 8 # pop ra and allocated newObject
3820#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
3824:mth_String_charAt:
    # get string
3824#    move $t0,$s2

    # check that index is in bounds
3828#    lw $t1,-4($t0) # negative of # data words in string
3832#    subu $t3,$zero,$t1 # # chars in string
3836#    lw $t2,($sp) # index
3840#    bgeu $t2,$t3,strIndexOutOfBounds
3841##...sltu $at,$t2,$t3
3845##...beq $at,$zero,5368

    # access element
3848#    lw $t1,-8($t0) # # data words in object
3852#    sll $t1,$t1,2 # - byte-offset from end of chars
3856#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
3860#    addu $t0,$t0,$t1 # - address of our char, offset by 8
3864#    lb $t0,-8($t0) # our char

    # return
3868#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
3872:mth_Lib_intToString:

    # save return address on stack; allocate space for dummy GC tag
3872#    subu $sp,$sp,8
3876#    sw $ra,4($sp)

    # save current sp
3880#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
3884#    li $t3,10

    # get argument, negate if negative
3888#    lw $t1,8($sp)
3892#    bge $t1,$zero,itsNonNegLoop
3893##...slt $at,$t1,$zero
3897##...beq $at,$zero,3904
3900#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
3904:  itsNonNegLoop:
3904#    divu $t1,$t3
3908#    mflo $t1 # quotient
3912#    mfhi $t4 # remainder
3916#    addu $t4,$t4,'0' # turn remainder into digit
3920#    subu $sp,$sp,4
3924#    sw $t4,($sp) # push digit onto stack
3928#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
3932#    lw $t4,8($t0)
3936#    bge $t4,$zero,itsSkipNeg
3937##...slt $at,$t4,$zero
3941##...beq $at,$zero,3956
3944#    li $t4,'-'
3948#    subu $sp,$sp,4
3952#    sw $t4,($sp)
3956:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
3956#    subu $s6,$t0,$sp
3960#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
3964#    sw $t3,($t0)
3968#    srl $s6,$s6,2
3972#    subu $sp,$sp,4
3976#    sw $s6,($sp)
    
    # allocate memory
3980#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
3984#    srl $s6,$s6,2
3988#    move $s7,$zero # no "object" words in object
3992#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
3996#    lw $t0,4($sp)
4000#    addu $sp,$sp,8

    # store "String" tag into class field
4004#    subu $s7,$s7,8 # address of header-1 word
4008#    la $t1,CLASS_String
4012#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
4016#    lw $t4,($s7) # # data words in source string
4020#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
4021##...slt $at,$t4,$zero
4025##...beq $at,$zero,4044
4028#    and $t4,0xff # mask off object's hash value ...
4029##...lui $at,0
4033##...ori $at,$at,0xff
4037##...and $t4,$t4,$at
4040#    sw $t4,($s7) # ... and store back into -8 header-word
4044:skipMask_intToString:
    
    # store negative of char-count into header-2 word
4044#    subu $t0,$zero,$t0
4048#    sw $t0,4($s7)

4052#    lw $t1,($s7) # number of data words in string
4056#    sll $t1,$t1,2 # number data bytes in string
4060#    subu $t1,$s7,$t1 # first location to store chars in string
4064#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
4068:  itsLoop:
4068#    lw $t2,($sp)
4072#    addu $sp,$sp,4
4076#    sb $t2,($t1)
4080#    addu $t1,$t1,1
4084#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
4088#    lw $ra,4($sp)
4092#    addu $sp,$sp,8
4096#    addu $t0,$t0,15
4100#    and $t0,$t0,0xfffffffc
4101##...lui $at,65535
4105##...ori $at,$at,0xfffc
4109##...and $t0,$t0,$at
4112#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
4116:mth_Lib_intToChar:
    # save return address
4116#    subu $sp,$sp,4
4120#    sw $ra,($sp)

    # allocate object
4124#    li $s6,2
4128#    move $s7,$zero
4132#    jal newObject

    # get n from string.
4136#    lw $t1,8($sp)

    # store "String" tag into class field
4140#    la $t0,CLASS_String
4144#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
4148#    lw $t4,-8($s7) # # data words in source string
4152#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
4153##...slt $at,$t4,$zero
4157##...beq $at,$zero,4176
4160#    and $t4,0xff # mask off object's hash value ...
4161##...lui $at,0
4165##...ori $at,$at,0xff
4169##...and $t4,$t4,$at
4172#    sw $t4,-8($s7) # ... and store back into -8 header-word
4176:  skipMask_intToChar:

    # store data in string
4176#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
4180#    li $t0,-1
4184#    sw $t0,-4($s7)

    # we're returning $s7
4188#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
4192#    lw $ra,4($sp)
4196#    addu $sp,$sp,8

    # return
4200#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
4204:mth_String_compareTo:
    # get string pointers and check parameter for null
4204#    lw $t0,($sp) # second string
4208#    beq $t0,$zero,nullPtrException
4212#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
4216#    lw $t2,-4($t0) # negative length of second string
4220#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
4224#    slt $t4,$t3,$t2
4228#    slt $t5,$t2,$t3
4232#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
4236#    lw $t2,-8($t0) # # data words in second string
4240#    lw $t3,-8($t1) # # data words in first string
4244#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
4248#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
4252#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
4256#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
4260#    beq $zero,$t5,skipStrCmpLenzz
4264#    move $t2,$t3
4268:  skipStrCmpLenzz:
4268#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
4272:  cmpLoopzz:
4272#    lw $t3,-8($t1) # word from str2
4276#    lw $t4,-8($t0) # word from str1
4280#    bne $t3,$t4,cmpNotEqualzz
4284#    addu $t1,$t1,4
4288#    addu $t0,$t0,4
4292#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
4296#    j cmpHitLimitzz

4300:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
4300#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
4304#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
4308#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
4312:  cmpHitLimitzz:
4312#    move $t0, $t5 # store return value
4316#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
4320:readLogicalChar:

    # check if we already have a character
4320#    lw $v0,lastCharRead
4324#    li $t0,-2
4328#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
4332#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
4336#    jr $ra # return
    
4340:  doReadCh:
    # we need to actually read a character: read and return
4340#    li $v0,12 # use system call to read a character
4344#    syscall
4348#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
4352:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
4352#    blt $s7,$zero arraySizeOutOfBounds
4353##...slt $at,$s7,$zero
4357##...bne $at,$zero,5384

    # mark the fact that we have not yet GC'd for this allocation
4360#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

4364:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
4364#    addu $t0,$s6,$s7
4368#    sll $t0,$t0,2
4372#    addu $t0,$t0,8 # amount of memory needed
4376#    addu $t1,$t0,$s3
4380#    bgtu $t1,$s4,doGC
4381##...sltu $at,$s4,$t1
4385##...bne $at,$zero,4508

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
4388#    move $t2,$s3
4392:  zeroObjLoop:
4392#    sw $zero,($s3)
4396#    lw $zero,($s3)

4400#    addu $s3,4
4404#    bltu $s3,$t1,zeroObjLoop
4405##...sltu $at,$s3,$t1
4409##...bne $at,$zero,4392

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
4412#    sll $t0,$s7,2    # number of post-header bytes
4416#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
4420#    li $t2,255
4424#    bgeu $s6,$t2 firstHeaderLarge
4425##...sltu $at,$s6,$t2
4429##...beq $at,$zero,4476
4432#    lw $t1,prevHashConstant
4436#    addu $t1,0x12b68fd2
4437##...lui $at,4791
4441##...addiu $at,$at,-28718
4445##...addu $t1,$at,$t1
4448#    sw $t1,prevHashConstant # update hash constant
4452#    or $t1,0x80000000 # set top bit
4453##...lui $at,32768
4457##...or $t1,$at,$t1
4460#    and $t1,0xffffff00 # clear low bit
4461##...lui $at,65535
4465##...ori $at,$at,0xff00
4469##...and $t1,$t1,$at
4472#    or $s6,$t1
4476:firstHeaderLarge:
4476#    sw $s6,-8($t0) # store header-1 value
4480#    lw $zero,-8($t0)

    # store second header-value
4484#    sw $s7,-4($t0)   # second header-word
4488#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
4492#    move $s7,$t0
4496#    subu $sp,$sp,4
4500#    sw $t0,($sp)

4504#    jr $ra
    
4508:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
4508#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
4512#    lw $t5,gcCount
4516#    addu $t5,1
4520#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
4524#    subu $sp,$sp,4
4528#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
4532#    lw $t0,cur_seg
4536#    move $t7,$s4
4540#    la $t6,seg1_start
4541##...lui $t6,16
4545##...addiu $t6,$t6,6140
4548#    la $s3,seg0_start
4552#    la $s4,seg0_end
4553##...lui $s4,16
4557##...addiu $s4,$s4,6140
4560#    sw $zero,cur_seg
4564#    bne $t0,$zero,skipGc1
4568#    la $t6,seg0_start
4572#    la $s3,seg1_start
4573##...lui $s3,16
4577##...addiu $s3,$s3,6140
4580#    la $s4,seg1_end
4581##...lui $s4,32
4585##...addiu $s4,$s4,6140
4588#    sw $s5,cur_seg
4592:  skipGc1:
4592#    li $t5,0x80000000
4596#    lw $t0,stack_bottom
4600#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

4604:  gcStackCopyLoop:
4604#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
4608#    sll $t2,$t1,31 # zero iff low bit was zero
4612#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
4616#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
4620#    bleu $t1,$t6,gcTestIterDone1
4621##...sltu $at,$t6,$t1
4625##...beq $at,$zero,4788
4628#    bgtu $t1,$t7,gcTestIterDone1
4629##...sltu $at,$t7,$t1
4633##...bne $at,$zero,4788

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
4636#    lw $t2,-8($t1) # possible forwarding tag
4640#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
4644#    lw $t2,-4($t1) # forwarding pointer: object's new address
4648#    sw $t2,4($t0) # update stack value
4652#    j gcTestIterDone1 # do next iteration

4656:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
4656#    bge $t2,$zero,gcSkip2
4657##...slt $at,$t2,$zero
4661##...beq $at,$zero,4676
4664#    and $t2,0xff #### mask off hash value
4665##...lui $at,0
4669##...ori $at,$at,0xff
4673##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

4676:  gcSkip2:
4676#    sll $t2,$t2,2
4680#    addu $t2,$t2,8
4684#    subu $t4,$t1,$t2 # address of first word of source
4688#    lw $t3,-4($t1) # number of object words (negative means zero)
4692#    bge $t3,$zero,gcH2Neg1
4693##...slt $at,$t3,$zero
4697##...beq $at,$zero,4704
4700#    move $t3,$zero
4704:  gcH2Neg1:
4704#    sll $t3,$t3,2
4708#    addu $t3,$t3,$t1 # address one word past last word of source

4712#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
4716#    lw $s0,($t4)
4720#    lw $s1,-8($t1)
4724#    sw $s1,($t4)
4728#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
4732:  gCinnerCopy1:
4732#    lw $s0,($t4)
4736#    sw $s0,($s3)
4740#    addu $t4,$t4,4
4744#    addu $s3,$s3,4
4748#    bltu $t4,$t3,gCinnerCopy1
4749##...sltu $at,$t4,$t3
4753##...bne $at,$zero,4732

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
4756#    sw $zero,-8($t1) # 0 in first header-slot
4760#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
4764#    sw $t2,4($t0)
4768#    lw $zero,-8($t2)
4772#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
4776#    j gcTestIterDone1

4780:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
4780#    subu $t0,$t0,$t1
4784#    subu $t0,$t0,3

4788:  gcTestIterDone1:
4788#    bgeu $t0,$sp,gcStackCopyLoop
4789##...sltu $at,$t0,$sp
4793##...beq $at,$zero,4604

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
4796#    lw $t1,cur_seg
4800#    la $t0,seg0_start
4804#    beq $t1,$zero,gcSkip4
4808#    la $t0,seg1_start
4809##...lui $t0,16
4813##...addiu $t0,$t0,6140


4816:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
4816#    bgeu $t0,$s3,gcFinishUp
4817##...sltu $at,$t0,$s3
4821##...beq $at,$zero,5112

    ###### begin outer loop to copy all non-stack-direct objects ######

4824:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
4824#    lw $t1,($t0) # (what will be) first header word for current object
4828#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
4832#    bge $t2,$zero,gcSkip4a # are there hash bits?
4833##...slt $at,$t2,$zero
4837##...beq $at,$zero,4852
4840#    and $t2,0xff # mask off hash bits
4841##...lui $at,0
4845##...ori $at,$at,0xff
4849##...and $t2,$t2,$at
4852:gcSkip4a:    
4852#    sll $t2,$t2,2 # # data bytes
4856#    addu $t2,$t2,8 # to skip header words
4860#    addu $t2,$t0,$t2 # pointer to new object
4864#    lw $t3,-8($t2) # word to swap
4868#    sw $t1,-8($t2) # store header word
4872#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
4876#    lw $t1,-12($t2) # vtable pointer
4880#    li $t0,dataArrayVTableStart # address of vtable for first data array
4884#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
4885##...slt $at,$t1,$t0
4889##...bne $at,$zero,4908

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
4892:  skipToNextObj:
4892#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
4896#    sll $t1,$t1,2 # convert to byte-count
4900#    addu $t0,$t2,$t1 # skip over object
4904#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
4908:  gcNotDataArray:
4908#    lw $t3,-4($t2) # # object words (negative treated as zero)
4912#    bge $t3,$zero,gcH2Neg2
4913##...slt $at,$t3,$zero
4917##...beq $at,$zero,4924
4920#    move $t3,$zero
4924:  gcH2Neg2:
4924#    sll $t3,$t3,2 # # object bytes
4928#    move $t0,$t2 # address of first pointer in object
4932#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
4936#    beq $t0,$s1,gcTestIterDone2
    
4940:  gcNextPointerInObject:
    # get pointer from object
4940#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
4944#    bleu $t1,$t6,gcGoNextPointerSlot
4945##...sltu $at,$t6,$t1
4949##...beq $at,$zero,5092
4952#    bgtu $t1,$t7,gcGoNextPointerSlot
4953##...sltu $at,$t7,$t1
4957##...bne $at,$zero,5092

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
4960#    lw $t8,-8($t1) # possible forwarding tag
4964#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
4968#    lw $t8,-4($t1) # forwarding pointer: object's new address
4972#    sw $t8,($t0) # update pointer in object
4976#    j gcGoNextPointerSlot # do next iteration

4980:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
4980#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
4981##...slt $at,$t8,$zero
4985##...beq $at,$zero,5000
4988#    and $t8,0xff # mask off hash bits
4989##...lui $at,0
4993##...ori $at,$at,0xff
4997##...and $t8,$t8,$at

5000:  gcSkip5:
5000#    sll $t8,$t8,2 # bytes in negative-offset portion ...
5004#    addu $t8,$t8,8 # ... add in bytes for header-words
5008#    subu $t4,$t1,$t8 # address of first word of source object
5012#    lw $t3,-4($t1) # # words in positive-offset portion
5016#    bge $t3,$zero,gcNoNeg
5017##...slt $at,$t3,$zero
5021##...beq $at,$zero,5028
5024#    move $t3,$zero # negative treated as zero
5028:  gcNoNeg:
5028#    sll $t3,$t3,2 # bytes in negative-offset portion
5032#    addu $t3,$t3,$t1 # address one word past last word of source

5036#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
5040#    lw $s0,($t4)
5044#    lw $t9,-8($t1)
5048#    sw $t9,($t4)
5052#    sw $s0,-8($t1)

    # copy all source bytes to the target
5056:  gCinnerCopy2:
5056#    lw $s0,($t4)
5060#    sw $s0,($s3)
5064#    addu $t4,$t4,4
5068#    addu $s3,$s3,4
5072#    bltu $t4,$t3,gCinnerCopy2
5073##...sltu $at,$t4,$t3
5077##...bne $at,$zero,5056

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
5080#    sw $zero,-8($t1) # 0 in first header-slot
5084#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
5088#    sw $t8,($t0)

5092:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
5092#    addu $t0,$t0,4
5096#    bltu $t0,$s1,gcNextPointerInObject
5097##...sltu $at,$t0,$s1
5101##...bne $at,$zero,4940

5104:  gcTestIterDone2:
5104#    bltu $t0,$s3,gcHeapCopyLoop
5105##...sltu $at,$t0,$s3
5109##...bne $at,$zero,4824

    ###### end outer loop to copy all non-stack-direct objects ######

5112:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
5112#    lw $s2,($sp)
5116#    addu $sp,$sp,4

    # mark us as having already GC'd
5120#    move $t5,$s5

    # go try and allocate again
5124#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
5128:vm_init:

    # mark bottom of stack
5128#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
5132#    move $s2,$zero

    #set up the "five" register
5136#    li $s5,5

5140#    la $s3,seg0_start
5144#    la $s4,seg0_end
5145##...lui $s4,16
5149##...addiu $s4,$s4,6140
    
    # return
5152#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
5156:divide:
    # get parameters; abort if divisor zero
5156#    lw $t0,($sp)
5160#    lw $t1,8($sp)
5164#    beq $t0,$zero,divByZeroError
    
    # perform division
5168#    div $t1,$t0
5172#    mflo $t0

    # store result, adjust stack and return
5176#    addu $sp,$sp,8 # adjust stack
5180#    sw $t0,($sp) # store result
5184#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
5188:remainder:
    # get parameters; abort if divisor zero
5188#    lw $t0,($sp)
5192#    lw $t1,8($sp)
5196#    beq $t0,$zero,divByZeroError
    
    # perform division
5200#    div $t1,$t0
5204#    mfhi $t0

    # store result, adjust stack and return
5208#    addu $sp,$sp,8 # adjust stack
5212#    sw $t0,($sp) # store result
5216#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
5220:checkCast:
    # get object, allow immediately if null
5220#    lw $t2,($sp)
5224#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
5228#    lw $t2,-12($t2) # vtable address
5232#    bge $t2,$t1,castException
5233##...slt $at,$t2,$t1
5237##...beq $at,$zero,5408
5240#    blt $t2,$t0,castException
5241##...slt $at,$t2,$t0
5245##...bne $at,$zero,5408
    
    # return, leaving object unchanged on stack
5248:  checkCastReturn:    
5248#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
5252:instanceOf:
    # get object, go return false if null
5252#    lw $t2,($sp)
5256#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
5260#    lw $t2,-12($t2) # vtable address
5264#    sge $t0,$t2,$t0 # are we >= the lower limit?
5265##...slt $t0,$t2,$t0
5269##...xori $t0,$t0,0x1
5272#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
5276#    and $t2,$t0,$t1
5280#    sw $t2,($sp)
5284:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
5284#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

5288:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
5288#    li $v0,4 # syscall-code for print-string
5292#    syscall
5296:exit:
    # print termination message
5296#    li $v0,4 # syscall-code for print-string
5300#    la $a0,exitString
5304#    syscall

    # print number of garbage collections
5308#    li $v0,4 # syscall-code for print-string
5312#    la $a0,gcCountMsg
5316#    syscall # print "Number of ..."
5320#    lw $a0,gcCount # number of GC's
5324#    li $v0,1 # code for print-int
5328#    syscall
5332#    li $v0,4 # syscall-code for print-string
5336#    la $a0,newlineString
5340#    syscall # print newline

    # terminate execution
5344#    li $v0,10 #syscall-code for "exit"
5348#    syscall

5352:outOfHeapMemory:
5352#    la $a0,heapMemoryMsg
5356#    j exitError
5360:divByZeroError:
5360#    la $a0,divByZeroMsg
5364#    j exitError
5368:strIndexOutOfBounds:
5368#    la $a0,strIndexOutOfBoundsMsg
5372#    j exitError
5376:arrayIndexOutOfBounds:
5376#    la $a0,arrayIndexOutOfBoundsMsg
5380#    j exitError
5384:arraySizeOutOfBounds:
5384#    la $a0,arraySizeOutOfBoundsMsg
5388#    j exitError
5392:nullPtrException:
5392#    la $a0,nullPtrExceptionMsg
5396#    j exitError
5400:badIntegerFormat:
5400#    la $a0,badIntegerFormatMsg
5404#    j exitError
5408:castException:
5408#    la $a0,castExceptionMsg
5412#    j exitError
############## data section ################
    .data
5768:hexChars:
    .ascii "0123456789abcdef"
    .align 2
5784:cur_seg:
    .word 0

5788:lastCharRead:
    .word -2 # -2 => no buffered character
5792:prevHashConstant:
    .word 0x2785173c
5796:gcCount:
    .word 0

5800:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
5827:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
5850:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
5885:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
5919:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
5952:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
5983:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
6031:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
6052:gcMsg: 
      .asciiz "\nGC!\n"
6058:gcCountMsg: 
      .asciiz "Number of garbage collections: "

6090:nullStr:
    .asciiz "null"
6095:trueString:
    .asciiz "true"
6100:falseString:
    .asciiz "false"
6106:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
6134:newlineString:
    .asciiz "\n"
    
    .align 2
6136:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

6140:seg0_start:
    .space 0x100000
1054716:seg0_end:
1054716:seg1_start:
    .space 0x100000
2103292:seg1_end:
