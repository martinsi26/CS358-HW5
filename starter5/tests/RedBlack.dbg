 .data # Program at 8.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
18580:CLASS_Object: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
18600:CLASS_String: # ClassDecl at 0.0
  .word mth_String_hashCode # MethodDeclNonVoid at 0.0
  .word mth_String_equals # MethodDeclNonVoid at 0.0
  .word mth_String_toString # MethodDeclNonVoid at 0.0
  .word mth_String_concat # MethodDeclNonVoid at 0.0
  .word mth_String_substring # MethodDeclNonVoid at 0.0
  .word mth_String_length # MethodDeclNonVoid at 0.0
  .word mth_String_charAt # MethodDeclNonVoid at 0.0
  .word mth_String_compareTo # MethodDeclNonVoid at 0.0
18632:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
18636:CLASS_Lib: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
# ****** class Main ****** # ClassDecl at 8.7
  .byte 205 # 'M' with high bit set # ClassDecl at 8.7
  .byte 97 # 'a' # ClassDecl at 8.7
  .byte 105 # 'i' # ClassDecl at 8.7
  .byte 110 # 'n' # ClassDecl at 8.7
18684:CLASS_Main: # ClassDecl at 8.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
  .word mth_Main_main # MethodDeclVoid at 11.17
18732:END_CLASS_Main: # ClassDecl at 8.7
18732:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
18740:CLASS_RunMain: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
18752:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class RedBlackTree ****** # ClassDecl at 43.7
  .byte 210 # 'R' with high bit set # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
  .byte 100 # 'd' # ClassDecl at 43.7
  .byte 66 # 'B' # ClassDecl at 43.7
  .byte 108 # 'l' # ClassDecl at 43.7
  .byte 97 # 'a' # ClassDecl at 43.7
  .byte 99 # 'c' # ClassDecl at 43.7
  .byte 107 # 'k' # ClassDecl at 43.7
  .byte 84 # 'T' # ClassDecl at 43.7
  .byte 114 # 'r' # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
18764:CLASS_RedBlackTree: # ClassDecl at 43.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_RedBlackTree_isNull # MethodDeclNonVoid at 46.20
  .word mth_RedBlackTree_isBlack # MethodDeclNonVoid at 51.20
  .word mth_RedBlackTree_setBlack # MethodDeclVoid at 56.17
  .word mth_RedBlackTree_isRed # MethodDeclNonVoid at 60.20
  .word mth_RedBlackTree_helpInsert # MethodDeclNonVoid at 65.25
  .word mth_RedBlackTree_insert # MethodDeclNonVoid at 70.25
  .word mth_RedBlackTree_asNonNull # MethodDeclNonVoid at 79.32
  .word mth_RedBlackTree_print # MethodDeclVoid at 84.17
  .word mth_RedBlackTree_helpPrint # MethodDeclVoid at 90.17
  .word mth_RedBlackTree_lookup # MethodDeclNonVoid at 94.20
  .word mth_RedBlackTree_delete # MethodDeclNonVoid at 99.25
  .word mth_RedBlackTree_helpDelete # MethodDeclNonVoid at 106.25
# ****** class NullRedBlackTree ****** # ClassDecl at 112.7
  .byte 206 # 'N' with high bit set # ClassDecl at 112.7
  .byte 117 # 'u' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 82 # 'R' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
  .byte 100 # 'd' # ClassDecl at 112.7
  .byte 66 # 'B' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 97 # 'a' # ClassDecl at 112.7
  .byte 99 # 'c' # ClassDecl at 112.7
  .byte 107 # 'k' # ClassDecl at 112.7
  .byte 84 # 'T' # ClassDecl at 112.7
  .byte 114 # 'r' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
18840:CLASS_NullRedBlackTree: # ClassDecl at 112.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_NullRedBlackTree_isNull # MethodDeclNonVoid at 115.20
  .word mth_RedBlackTree_isBlack # MethodDeclNonVoid at 51.20
  .word mth_RedBlackTree_setBlack # MethodDeclVoid at 56.17
  .word mth_RedBlackTree_isRed # MethodDeclNonVoid at 60.20
  .word mth_NullRedBlackTree_helpInsert # MethodDeclNonVoid at 120.25
  .word mth_RedBlackTree_insert # MethodDeclNonVoid at 70.25
  .word mth_RedBlackTree_asNonNull # MethodDeclNonVoid at 79.32
  .word mth_RedBlackTree_print # MethodDeclVoid at 84.17
  .word mth_RedBlackTree_helpPrint # MethodDeclVoid at 90.17
  .word mth_RedBlackTree_lookup # MethodDeclNonVoid at 94.20
  .word mth_RedBlackTree_delete # MethodDeclNonVoid at 99.25
  .word mth_RedBlackTree_helpDelete # MethodDeclNonVoid at 106.25
18900:END_CLASS_NullRedBlackTree: # ClassDecl at 112.7
# ****** class NonNullRedBlackTree ****** # ClassDecl at 125.7
  .byte 0 # ClassDecl at 125.7
  .byte 206 # 'N' with high bit set # ClassDecl at 125.7
  .byte 111 # 'o' # ClassDecl at 125.7
  .byte 110 # 'n' # ClassDecl at 125.7
  .byte 78 # 'N' # ClassDecl at 125.7
  .byte 117 # 'u' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 82 # 'R' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
  .byte 100 # 'd' # ClassDecl at 125.7
  .byte 66 # 'B' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 97 # 'a' # ClassDecl at 125.7
  .byte 99 # 'c' # ClassDecl at 125.7
  .byte 107 # 'k' # ClassDecl at 125.7
  .byte 84 # 'T' # ClassDecl at 125.7
  .byte 114 # 'r' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
18920:CLASS_NonNullRedBlackTree: # ClassDecl at 125.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_RedBlackTree_isNull # MethodDeclNonVoid at 46.20
  .word mth_NonNullRedBlackTree_isBlack # MethodDeclNonVoid at 134.20
  .word mth_NonNullRedBlackTree_setBlack # MethodDeclVoid at 139.17
  .word mth_RedBlackTree_isRed # MethodDeclNonVoid at 60.20
  .word mth_NonNullRedBlackTree_helpInsert # MethodDeclNonVoid at 159.25
  .word mth_RedBlackTree_insert # MethodDeclNonVoid at 70.25
  .word mth_NonNullRedBlackTree_asNonNull # MethodDeclNonVoid at 374.32
  .word mth_RedBlackTree_print # MethodDeclVoid at 84.17
  .word mth_NonNullRedBlackTree_helpPrint # MethodDeclVoid at 460.17
  .word mth_NonNullRedBlackTree_lookup # MethodDeclNonVoid at 181.20
  .word mth_RedBlackTree_delete # MethodDeclNonVoid at 99.25
  .word mth_NonNullRedBlackTree_helpDelete # MethodDeclNonVoid at 195.25
  .word mth_NonNullRedBlackTree_setRed # MethodDeclVoid at 144.17
  .word mth_NonNullRedBlackTree_init # MethodDeclNonVoid at 149.32
  .word mth_NonNullRedBlackTree_adjustAfterDelete # MethodDeclNonVoid at 259.32
  .word mth_NonNullRedBlackTree_getRight # MethodDeclNonVoid at 379.25
  .word mth_NonNullRedBlackTree_getLeft # MethodDeclNonVoid at 388.25
  .word mth_NonNullRedBlackTree_setRight # MethodDeclVoid at 393.17
  .word mth_NonNullRedBlackTree_setLeft # MethodDeclVoid at 403.17
  .word mth_NonNullRedBlackTree_rebalanceAfterInsert # MethodDeclNonVoid at 410.25
  .word mth_NonNullRedBlackTree_helpPrintIndent # MethodDeclVoid at 483.17
19016:END_CLASS_NonNullRedBlackTree: # ClassDecl at 125.7
19016:END_CLASS_RedBlackTree: # ClassDecl at 43.7
# ****** class BooleanList ****** # ClassDecl at 501.7
  .byte 0 # ClassDecl at 501.7
  .byte 194 # 'B' with high bit set # ClassDecl at 501.7
  .byte 111 # 'o' # ClassDecl at 501.7
  .byte 111 # 'o' # ClassDecl at 501.7
  .byte 108 # 'l' # ClassDecl at 501.7
  .byte 101 # 'e' # ClassDecl at 501.7
  .byte 97 # 'a' # ClassDecl at 501.7
  .byte 110 # 'n' # ClassDecl at 501.7
  .byte 76 # 'L' # ClassDecl at 501.7
  .byte 105 # 'i' # ClassDecl at 501.7
  .byte 115 # 's' # ClassDecl at 501.7
  .byte 116 # 't' # ClassDecl at 501.7
19028:CLASS_BooleanList: # ClassDecl at 501.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_BooleanList_init # MethodDeclNonVoid at 505.24
19044:END_CLASS_BooleanList: # ClassDecl at 501.7
19044:dataArrayVTableStart: # IntegerType at 0.0
  .byte 0 # ArrayType at 100.26
  .byte 0 # ArrayType at 100.26
  .byte 219 # '[' with high bit set # ArrayType at 100.26
  .byte 90 # 'Z' # ArrayType at 100.26
19048:CLASS_ARRAY_BOOLEAN: # ArrayType at 100.26
  .word mth_Object_hashCode # ArrayType at 100.26
  .word mth_Object_equals # ArrayType at 100.26
  .word mth_Object_toString # ArrayType at 100.26
19060:END_CLASS_ARRAY_BOOLEAN: # ArrayType at 100.26
19060:END_CLASS_Object: # ClassDecl at 0.0
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 105 # StringLiteral at 20.15
  .byte 110 # StringLiteral at 20.15
  .byte 115 # StringLiteral at 20.15
  .byte 101 # StringLiteral at 20.15
  .byte 114 # StringLiteral at 20.15
  .byte 116 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 0 # StringLiteral at 20.15
  .byte 0 # StringLiteral at 20.15
  .word CLASS_String # StringLiteral at 20.15
  .word 6 # StringLiteral at 20.15
  .word -18 # StringLiteral at 20.15
19092:strLit_21: # StringLiteral at 20.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 10 # StringLiteral at 22.15
  .word CLASS_String # StringLiteral at 22.15
  .word 4 # StringLiteral at 22.15
  .word -12 # StringLiteral at 22.15
19116:strLit_29: # StringLiteral at 22.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 100 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 108 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 116 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 114 # StringLiteral at 29.15
  .byte 111 # StringLiteral at 29.15
  .byte 111 # StringLiteral at 29.15
  .byte 116 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 10 # StringLiteral at 29.15
  .byte 0 # StringLiteral at 29.15
  .word CLASS_String # StringLiteral at 29.15
  .word 10 # StringLiteral at 29.15
  .word -35 # StringLiteral at 29.15
19164:strLit_57: # StringLiteral at 29.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 97 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 109 # StringLiteral at 32.15
  .byte 112 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 111 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 100 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 108 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .word CLASS_String # StringLiteral at 32.15
  .word 9 # StringLiteral at 32.15
  .word -29 # StringLiteral at 32.15
19208:strLit_71: # StringLiteral at 32.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 10 # StringLiteral at 34.15
  .word CLASS_String # StringLiteral at 34.15
  .word 4 # StringLiteral at 34.15
  .word -12 # StringLiteral at 34.15
19232:strLit_79: # StringLiteral at 34.15
  .byte 45 # StringLiteral at 464.19
  .byte 45 # StringLiteral at 464.19
  .byte 45 # StringLiteral at 464.19
  .byte 0 # StringLiteral at 464.19
  .word CLASS_String # StringLiteral at 464.19
  .word 2 # StringLiteral at 464.19
  .word -3 # StringLiteral at 464.19
19248:strLit_933: # StringLiteral at 464.19
  .byte 32 # StringLiteral at 467.19
  .byte 47 # StringLiteral at 467.19
  .byte 45 # StringLiteral at 467.19
  .byte 0 # StringLiteral at 467.19
  .word CLASS_String # StringLiteral at 467.19
  .word 2 # StringLiteral at 467.19
  .word -3 # StringLiteral at 467.19
19264:strLit_940: # StringLiteral at 467.19
  .byte 32 # StringLiteral at 470.19
  .byte 92 # StringLiteral at 470.19
  .byte 45 # StringLiteral at 470.19
  .byte 0 # StringLiteral at 470.19
  .word CLASS_String # StringLiteral at 470.19
  .word 2 # StringLiteral at 470.19
  .word -3 # StringLiteral at 470.19
19280:strLit_945: # StringLiteral at 470.19
  .byte 35 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .word CLASS_String # StringLiteral at 473.19
  .word 2 # StringLiteral at 473.19
  .word -1 # StringLiteral at 473.19
19296:strLit_954: # StringLiteral at 473.19
  .byte 42 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .word CLASS_String # StringLiteral at 476.19
  .word 2 # StringLiteral at 476.19
  .word -1 # StringLiteral at 476.19
19312:strLit_959: # StringLiteral at 476.19
  .byte 10 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .word CLASS_String # StringLiteral at 479.15
  .word 2 # StringLiteral at 479.15
  .word -1 # StringLiteral at 479.15
19328:strLit_969: # StringLiteral at 479.15
  .byte 32 # StringLiteral at 488.20
  .byte 32 # StringLiteral at 488.20
  .byte 32 # StringLiteral at 488.20
  .byte 0 # StringLiteral at 488.20
  .word CLASS_String # StringLiteral at 488.20
  .word 2 # StringLiteral at 488.20
  .word -3 # StringLiteral at 488.20
19344:strLit_1008: # StringLiteral at 488.20
  .byte 124 # StringLiteral at 491.20
  .byte 32 # StringLiteral at 491.20
  .byte 32 # StringLiteral at 491.20
  .byte 0 # StringLiteral at 491.20
  .word CLASS_String # StringLiteral at 491.20
  .word 2 # StringLiteral at 491.20
  .word -3 # StringLiteral at 491.20
19360:strLit_1013: # StringLiteral at 491.20
  .byte 32 # StringLiteral at 495.16
  .byte 32 # StringLiteral at 495.16
  .byte 32 # StringLiteral at 495.16
  .byte 0 # StringLiteral at 495.16
  .word CLASS_String # StringLiteral at 495.16
  .word 2 # StringLiteral at 495.16
  .word -3 # StringLiteral at 495.16
19376:strLit_1020: # StringLiteral at 495.16
# begin: Program at 8.1; stackHeight = 0
.text
.globl main
0:main:
0#  jal vm_init
# begin: CallStatement at 0.0; stackHeight = 0
# begin: Call at 0.0; stackHeight = 0
# begin: NewObject at 0.0; stackHeight = 0
4#li $s6, 2
8#li $s7, 1
12#jal newObject
16#la $t0, CLASS_Main
20#sw $t0, -12($s7)
# end: NewObject at 0.0; stackHeight = 4
24#lw $t0, 0($sp)
28#sw $s2, 0($sp)
32#move $s2, $t0
36#beq $s2, $0, nullPtrException
40#lw $t0, -12($s2)
44#lw $t0, 44($t0)
48#jalr $t0
52#addu $sp, $sp, 0
56#lw $s2, ($sp)
60#addu $sp, $sp, 4
64#subu $sp, $sp, 4
68#sw $t0, ($sp)
# end: Call at 0.0; stackHeight = 4
72#lw $t0, ($sp)
76#addu $sp, $sp, 4
# end: CallStatement at 0.0; stackHeight = 0
80#  li $v0, 10
84#  syscall
# begin: MethodDeclVoid at 11.17; stackHeight = 0
.globl mth_Main_main
88:mth_Main_main:
88#subu $sp, $sp, 4
92#sw $ra, ($sp)
# begin: LocalVarDecl at 13.15; stackHeight = 0
# begin: NewObject at 13.22; stackHeight = 0
96#li $s6, 2
100#li $s7, 1
104#jal newObject
108#la $t0, CLASS_NullRedBlackTree
112#sw $t0, -12($s7)
# end: NewObject at 13.22; stackHeight = 4
116#lw $0, ($sp) #**root
# end: LocalVarDecl at 13.15; stackHeight = 4
# begin: LocalVarDecl at 16.6; stackHeight = 4
# begin: IntegerLiteral at 16.20; stackHeight = 4
120#li $t0, 20
124#subu $sp, $sp, 8
128#sw $s5, 4($sp)
132#sw $t0, ($sp)
# end: IntegerLiteral at 16.20; stackHeight = 12
136#lw $0, ($sp) #**numElements
# end: LocalVarDecl at 16.6; stackHeight = 12
# begin: Block at 19.2; stackHeight = 12
# begin: LocalVarDecl at 19.11; stackHeight = 12
# begin: IntegerLiteral at 19.15; stackHeight = 12
140#li $t0, 0
144#subu $sp, $sp, 8
148#sw $s5, 4($sp)
152#sw $t0, ($sp)
# end: IntegerLiteral at 19.15; stackHeight = 20
156#lw $0, ($sp) #**i
# end: LocalVarDecl at 19.11; stackHeight = 20
# begin: BreakTarget at 19.2; stackHeight = 20
160:while_cond_43:
# begin: LessThan at 19.20; stackHeight = 20
# begin: IdentifierExp at 19.18; stackHeight = 20
160#lw $t0, 0($sp) #**LocalVar
164#subu $sp, $sp, 8
168#sw $s5, 4($sp)
172#sw $t0, ($sp)
# end: IdentifierExp at 19.18; stackHeight = 28
# begin: IdentifierExp at 19.22; stackHeight = 28
176#lw $t0, 16($sp) #**LocalVar
180#subu $sp, $sp, 8
184#sw $s5, 4($sp)
188#sw $t0, ($sp)
# end: IdentifierExp at 19.22; stackHeight = 36
192#lw $t2, ($sp)
196#addu $sp, $sp, 8
200#lw $t1, ($sp)
204#addu $sp, $sp, 8
208#slt $t0, $t1, $t2
212#subu $sp, $sp, 4
216#sw $t0, ($sp)
# end: LessThan at 19.20; stackHeight = 24
220#lw $t0, ($sp)
224#addu $sp, $sp, 4
228#beq $t0, $0, break_target_43
# begin: Block at 19.2; stackHeight = 20
# begin: Block at 19.40; stackHeight = 20
# begin: CallStatement at 20.6; stackHeight = 20
# begin: Call at 20.6; stackHeight = 20
232#subu $sp, $sp, 4
236#sw $s2, ($sp)
# begin: StringLiteral at 20.15; stackHeight = 24
240#li $t0, strLit_21
244#subu $sp, $sp, 4
248#sw $t0, ($sp)
# end: StringLiteral at 20.15; stackHeight = 28
252#lw $t0, 4($sp)
256#sw $s2, 4($sp)
260#move $s2, $t0
264#beq $s2, $0, nullPtrException
268#lw $t0, -12($s2)
272#lw $t0, 24($t0)
276#jalr $t0
280#addu $sp, $sp, 4
284#lw $s2, ($sp)
288#addu $sp, $sp, 4
292#subu $sp, $sp, 4
296#sw $t0, ($sp)
# end: Call at 20.6; stackHeight = 24
300#lw $t0, ($sp)
304#addu $sp, $sp, 4
# end: CallStatement at 20.6; stackHeight = 20
# begin: CallStatement at 21.6; stackHeight = 20
# begin: Call at 21.6; stackHeight = 20
308#subu $sp, $sp, 4
312#sw $s2, ($sp)
# begin: IdentifierExp at 21.15; stackHeight = 24
316#lw $t0, 4($sp) #**LocalVar
320#subu $sp, $sp, 8
324#sw $s5, 4($sp)
328#sw $t0, ($sp)
# end: IdentifierExp at 21.15; stackHeight = 32
332#lw $t0, 8($sp)
336#sw $s2, 8($sp)
340#move $s2, $t0
344#beq $s2, $0, nullPtrException
348#lw $t0, -12($s2)
352#lw $t0, 32($t0)
356#jalr $t0
360#addu $sp, $sp, 8
364#lw $s2, ($sp)
368#addu $sp, $sp, 4
372#subu $sp, $sp, 4
376#sw $t0, ($sp)
# end: Call at 21.6; stackHeight = 24
380#lw $t0, ($sp)
384#addu $sp, $sp, 4
# end: CallStatement at 21.6; stackHeight = 20
# begin: CallStatement at 22.6; stackHeight = 20
# begin: Call at 22.6; stackHeight = 20
388#subu $sp, $sp, 4
392#sw $s2, ($sp)
# begin: StringLiteral at 22.15; stackHeight = 24
396#li $t0, strLit_29
400#subu $sp, $sp, 4
404#sw $t0, ($sp)
# end: StringLiteral at 22.15; stackHeight = 28
408#lw $t0, 4($sp)
412#sw $s2, 4($sp)
416#move $s2, $t0
420#beq $s2, $0, nullPtrException
424#lw $t0, -12($s2)
428#lw $t0, 24($t0)
432#jalr $t0
436#addu $sp, $sp, 4
440#lw $s2, ($sp)
444#addu $sp, $sp, 4
448#subu $sp, $sp, 4
452#sw $t0, ($sp)
# end: Call at 22.6; stackHeight = 24
456#lw $t0, ($sp)
460#addu $sp, $sp, 4
# end: CallStatement at 22.6; stackHeight = 20
# begin: Assign at 23.11; stackHeight = 20
# begin: Call at 23.18; stackHeight = 20
# begin: IdentifierExp at 23.13; stackHeight = 20
464#lw $t0, 16($sp) #**LocalVar
468#subu $sp, $sp, 4
472#sw $t0, ($sp)
# end: IdentifierExp at 23.13; stackHeight = 24
# begin: IdentifierExp at 23.25; stackHeight = 24
476#lw $t0, 4($sp) #**LocalVar
480#subu $sp, $sp, 8
484#sw $s5, 4($sp)
488#sw $t0, ($sp)
# end: IdentifierExp at 23.25; stackHeight = 32
492#lw $t0, 8($sp)
496#sw $s2, 8($sp)
500#move $s2, $t0
504#beq $s2, $0, nullPtrException
508#lw $t0, -12($s2)
512#lw $t0, 32($t0)
516#jalr $t0
520#addu $sp, $sp, 8
524#lw $s2, ($sp)
528#addu $sp, $sp, 4
532#subu $sp, $sp, 4
536#sw $t0, ($sp)
# end: Call at 23.18; stackHeight = 24
540#lw $t0, ($sp)
544#addu $sp, $sp, 4
548#sw $t0, 16($sp)
# end: Assign at 23.11; stackHeight = 20
# begin: CallStatement at 24.11; stackHeight = 20
# begin: Call at 24.11; stackHeight = 20
# begin: IdentifierExp at 24.6; stackHeight = 20
552#lw $t0, 16($sp) #**LocalVar
556#subu $sp, $sp, 4
560#sw $t0, ($sp)
# end: IdentifierExp at 24.6; stackHeight = 24
564#lw $t0, 0($sp)
568#sw $s2, 0($sp)
572#move $s2, $t0
576#beq $s2, $0, nullPtrException
580#lw $t0, -12($s2)
584#lw $t0, 40($t0)
588#jalr $t0
592#addu $sp, $sp, 0
596#lw $s2, ($sp)
600#addu $sp, $sp, 4
604#subu $sp, $sp, 4
608#sw $t0, ($sp)
# end: Call at 24.11; stackHeight = 24
612#lw $t0, ($sp)
616#addu $sp, $sp, 4
# end: CallStatement at 24.11; stackHeight = 20
620#addu $sp, $sp, 0
# end: Block at 19.40; stackHeight = 20
# begin: Assign at 19.35; stackHeight = 20
# begin: Plus at 19.36; stackHeight = 20
# begin: IdentifierExp at 19.35; stackHeight = 20
624#lw $t0, 0($sp) #**LocalVar
628#subu $sp, $sp, 8
632#sw $s5, 4($sp)
636#sw $t0, ($sp)
# end: IdentifierExp at 19.35; stackHeight = 28
# begin: IntegerLiteral at 19.36; stackHeight = 28
640#li $t0, 1
644#subu $sp, $sp, 8
648#sw $s5, 4($sp)
652#sw $t0, ($sp)
# end: IntegerLiteral at 19.36; stackHeight = 36
656#lw $t2, ($sp)
660#addu $sp, $sp, 8
664#lw $t1, ($sp)
668#addu $sp, $sp, 8
672#addu $t0, $t1, $t2
676#subu $sp, $sp, 8
680#sw $s5, 4($sp)
684#sw $t0, ($sp)
# end: Plus at 19.36; stackHeight = 28
688#lw $t0, ($sp)
692#addu $sp, $sp, 8
696#sw $t0, 0($sp)
# end: Assign at 19.35; stackHeight = 20
700#addu $sp, $sp, 0
# end: Block at 19.2; stackHeight = 20
704#j while_cond_43
708:break_target_43:
# end: BreakTarget at 19.2; stackHeight = 20
708#addu $sp, $sp, 8
# end: Block at 19.2; stackHeight = 12
# begin: Block at 28.2; stackHeight = 12
# begin: LocalVarDecl at 28.11; stackHeight = 12
# begin: IntegerLiteral at 28.15; stackHeight = 12
712#li $t0, 0
716#subu $sp, $sp, 8
720#sw $s5, 4($sp)
724#sw $t0, ($sp)
# end: IntegerLiteral at 28.15; stackHeight = 20
728#lw $0, ($sp) #**i
# end: LocalVarDecl at 28.11; stackHeight = 20
# begin: BreakTarget at 28.2; stackHeight = 20
732:while_cond_93:
# begin: Not at 28.18; stackHeight = 20
# begin: Call at 28.24; stackHeight = 20
# begin: IdentifierExp at 28.19; stackHeight = 20
732#lw $t0, 16($sp) #**LocalVar
736#subu $sp, $sp, 4
740#sw $t0, ($sp)
# end: IdentifierExp at 28.19; stackHeight = 24
744#lw $t0, 0($sp)
748#sw $s2, 0($sp)
752#move $s2, $t0
756#beq $s2, $0, nullPtrException
760#lw $t0, -12($s2)
764#lw $t0, 12($t0)
768#jalr $t0
772#addu $sp, $sp, 0
776#lw $s2, ($sp)
780#addu $sp, $sp, 4
784#subu $sp, $sp, 4
788#sw $t0, ($sp)
# end: Call at 28.24; stackHeight = 24
792#lw $t0, ($sp)
796#xor $t0, $t0, 1
800#sw $t0, ($sp)
# end: Not at 28.18; stackHeight = 24
804#lw $t0, ($sp)
808#addu $sp, $sp, 4
812#beq $t0, $0, break_target_93
# begin: Block at 28.2; stackHeight = 20
# begin: Block at 28.39; stackHeight = 20
# begin: CallStatement at 29.6; stackHeight = 20
# begin: Call at 29.6; stackHeight = 20
816#subu $sp, $sp, 4
820#sw $s2, ($sp)
# begin: StringLiteral at 29.15; stackHeight = 24
824#li $t0, strLit_57
828#subu $sp, $sp, 4
832#sw $t0, ($sp)
# end: StringLiteral at 29.15; stackHeight = 28
836#lw $t0, 4($sp)
840#sw $s2, 4($sp)
844#move $s2, $t0
848#beq $s2, $0, nullPtrException
852#lw $t0, -12($s2)
856#lw $t0, 24($t0)
860#jalr $t0
864#addu $sp, $sp, 4
868#lw $s2, ($sp)
872#addu $sp, $sp, 4
876#subu $sp, $sp, 4
880#sw $t0, ($sp)
# end: Call at 29.6; stackHeight = 24
884#lw $t0, ($sp)
888#addu $sp, $sp, 4
# end: CallStatement at 29.6; stackHeight = 20
# begin: Assign at 30.11; stackHeight = 20
# begin: Call at 30.18; stackHeight = 20
# begin: IdentifierExp at 30.13; stackHeight = 20
892#lw $t0, 16($sp) #**LocalVar
896#subu $sp, $sp, 4
900#sw $t0, ($sp)
# end: IdentifierExp at 30.13; stackHeight = 24
# begin: InstVarAccess at 30.41; stackHeight = 24
# begin: Call at 30.30; stackHeight = 24
# begin: IdentifierExp at 30.25; stackHeight = 24
904#lw $t0, 20($sp) #**LocalVar
908#subu $sp, $sp, 4
912#sw $t0, ($sp)
# end: IdentifierExp at 30.25; stackHeight = 28
916#lw $t0, 0($sp)
920#sw $s2, 0($sp)
924#move $s2, $t0
928#beq $s2, $0, nullPtrException
932#lw $t0, -12($s2)
936#lw $t0, 36($t0)
940#jalr $t0
944#addu $sp, $sp, 0
948#lw $s2, ($sp)
952#addu $sp, $sp, 4
956#subu $sp, $sp, 4
960#sw $t0, ($sp)
# end: Call at 30.30; stackHeight = 28
964#lw $t0, ($sp)
968#addu $sp, $sp, 4
972#beq $t0, $0, nullPtrException
976#lw $t0, -64($t0)
980#subu $sp, $sp, 8
984#sw $s5, 4($sp)
988#sw $t0, ($sp)
# end: InstVarAccess at 30.41; stackHeight = 32
992#lw $t0, 8($sp)
996#sw $s2, 8($sp)
1000#move $s2, $t0
1004#beq $s2, $0, nullPtrException
1008#lw $t0, -12($s2)
1012#lw $t0, 52($t0)
1016#jalr $t0
1020#addu $sp, $sp, 8
1024#lw $s2, ($sp)
1028#addu $sp, $sp, 4
1032#subu $sp, $sp, 4
1036#sw $t0, ($sp)
# end: Call at 30.18; stackHeight = 24
1040#lw $t0, ($sp)
1044#addu $sp, $sp, 4
1048#sw $t0, 16($sp)
# end: Assign at 30.11; stackHeight = 20
# begin: CallStatement at 31.11; stackHeight = 20
# begin: Call at 31.11; stackHeight = 20
# begin: IdentifierExp at 31.6; stackHeight = 20
1052#lw $t0, 16($sp) #**LocalVar
1056#subu $sp, $sp, 4
1060#sw $t0, ($sp)
# end: IdentifierExp at 31.6; stackHeight = 24
1064#lw $t0, 0($sp)
1068#sw $s2, 0($sp)
1072#move $s2, $t0
1076#beq $s2, $0, nullPtrException
1080#lw $t0, -12($s2)
1084#lw $t0, 40($t0)
1088#jalr $t0
1092#addu $sp, $sp, 0
1096#lw $s2, ($sp)
1100#addu $sp, $sp, 4
1104#subu $sp, $sp, 4
1108#sw $t0, ($sp)
# end: Call at 31.11; stackHeight = 24
1112#lw $t0, ($sp)
1116#addu $sp, $sp, 4
# end: CallStatement at 31.11; stackHeight = 20
# begin: CallStatement at 32.6; stackHeight = 20
# begin: Call at 32.6; stackHeight = 20
1120#subu $sp, $sp, 4
1124#sw $s2, ($sp)
# begin: StringLiteral at 32.15; stackHeight = 24
1128#li $t0, strLit_71
1132#subu $sp, $sp, 4
1136#sw $t0, ($sp)
# end: StringLiteral at 32.15; stackHeight = 28
1140#lw $t0, 4($sp)
1144#sw $s2, 4($sp)
1148#move $s2, $t0
1152#beq $s2, $0, nullPtrException
1156#lw $t0, -12($s2)
1160#lw $t0, 24($t0)
1164#jalr $t0
1168#addu $sp, $sp, 4
1172#lw $s2, ($sp)
1176#addu $sp, $sp, 4
1180#subu $sp, $sp, 4
1184#sw $t0, ($sp)
# end: Call at 32.6; stackHeight = 24
1188#lw $t0, ($sp)
1192#addu $sp, $sp, 4
# end: CallStatement at 32.6; stackHeight = 20
# begin: CallStatement at 33.6; stackHeight = 20
# begin: Call at 33.6; stackHeight = 20
1196#subu $sp, $sp, 4
1200#sw $s2, ($sp)
# begin: IdentifierExp at 33.15; stackHeight = 24
1204#lw $t0, 4($sp) #**LocalVar
1208#subu $sp, $sp, 8
1212#sw $s5, 4($sp)
1216#sw $t0, ($sp)
# end: IdentifierExp at 33.15; stackHeight = 32
1220#lw $t0, 8($sp)
1224#sw $s2, 8($sp)
1228#move $s2, $t0
1232#beq $s2, $0, nullPtrException
1236#lw $t0, -12($s2)
1240#lw $t0, 32($t0)
1244#jalr $t0
1248#addu $sp, $sp, 8
1252#lw $s2, ($sp)
1256#addu $sp, $sp, 4
1260#subu $sp, $sp, 4
1264#sw $t0, ($sp)
# end: Call at 33.6; stackHeight = 24
1268#lw $t0, ($sp)
1272#addu $sp, $sp, 4
# end: CallStatement at 33.6; stackHeight = 20
# begin: CallStatement at 34.6; stackHeight = 20
# begin: Call at 34.6; stackHeight = 20
1276#subu $sp, $sp, 4
1280#sw $s2, ($sp)
# begin: StringLiteral at 34.15; stackHeight = 24
1284#li $t0, strLit_79
1288#subu $sp, $sp, 4
1292#sw $t0, ($sp)
# end: StringLiteral at 34.15; stackHeight = 28
1296#lw $t0, 4($sp)
1300#sw $s2, 4($sp)
1304#move $s2, $t0
1308#beq $s2, $0, nullPtrException
1312#lw $t0, -12($s2)
1316#lw $t0, 24($t0)
1320#jalr $t0
1324#addu $sp, $sp, 4
1328#lw $s2, ($sp)
1332#addu $sp, $sp, 4
1336#subu $sp, $sp, 4
1340#sw $t0, ($sp)
# end: Call at 34.6; stackHeight = 24
1344#lw $t0, ($sp)
1348#addu $sp, $sp, 4
# end: CallStatement at 34.6; stackHeight = 20
# begin: Assign at 35.11; stackHeight = 20
# begin: Call at 35.18; stackHeight = 20
# begin: IdentifierExp at 35.13; stackHeight = 20
1352#lw $t0, 16($sp) #**LocalVar
1356#subu $sp, $sp, 4
1360#sw $t0, ($sp)
# end: IdentifierExp at 35.13; stackHeight = 24
# begin: IdentifierExp at 35.25; stackHeight = 24
1364#lw $t0, 4($sp) #**LocalVar
1368#subu $sp, $sp, 8
1372#sw $s5, 4($sp)
1376#sw $t0, ($sp)
# end: IdentifierExp at 35.25; stackHeight = 32
1380#lw $t0, 8($sp)
1384#sw $s2, 8($sp)
1388#move $s2, $t0
1392#beq $s2, $0, nullPtrException
1396#lw $t0, -12($s2)
1400#lw $t0, 52($t0)
1404#jalr $t0
1408#addu $sp, $sp, 8
1412#lw $s2, ($sp)
1416#addu $sp, $sp, 4
1420#subu $sp, $sp, 4
1424#sw $t0, ($sp)
# end: Call at 35.18; stackHeight = 24
1428#lw $t0, ($sp)
1432#addu $sp, $sp, 4
1436#sw $t0, 16($sp)
# end: Assign at 35.11; stackHeight = 20
# begin: CallStatement at 36.11; stackHeight = 20
# begin: Call at 36.11; stackHeight = 20
# begin: IdentifierExp at 36.6; stackHeight = 20
1440#lw $t0, 16($sp) #**LocalVar
1444#subu $sp, $sp, 4
1448#sw $t0, ($sp)
# end: IdentifierExp at 36.6; stackHeight = 24
1452#lw $t0, 0($sp)
1456#sw $s2, 0($sp)
1460#move $s2, $t0
1464#beq $s2, $0, nullPtrException
1468#lw $t0, -12($s2)
1472#lw $t0, 40($t0)
1476#jalr $t0
1480#addu $sp, $sp, 0
1484#lw $s2, ($sp)
1488#addu $sp, $sp, 4
1492#subu $sp, $sp, 4
1496#sw $t0, ($sp)
# end: Call at 36.11; stackHeight = 24
1500#lw $t0, ($sp)
1504#addu $sp, $sp, 4
# end: CallStatement at 36.11; stackHeight = 20
1508#addu $sp, $sp, 0
# end: Block at 28.39; stackHeight = 20
# begin: Assign at 28.34; stackHeight = 20
# begin: Plus at 28.35; stackHeight = 20
# begin: IdentifierExp at 28.34; stackHeight = 20
1512#lw $t0, 0($sp) #**LocalVar
1516#subu $sp, $sp, 8
1520#sw $s5, 4($sp)
1524#sw $t0, ($sp)
# end: IdentifierExp at 28.34; stackHeight = 28
# begin: IntegerLiteral at 28.35; stackHeight = 28
1528#li $t0, 1
1532#subu $sp, $sp, 8
1536#sw $s5, 4($sp)
1540#sw $t0, ($sp)
# end: IntegerLiteral at 28.35; stackHeight = 36
1544#lw $t2, ($sp)
1548#addu $sp, $sp, 8
1552#lw $t1, ($sp)
1556#addu $sp, $sp, 8
1560#addu $t0, $t1, $t2
1564#subu $sp, $sp, 8
1568#sw $s5, 4($sp)
1572#sw $t0, ($sp)
# end: Plus at 28.35; stackHeight = 28
1576#lw $t0, ($sp)
1580#addu $sp, $sp, 8
1584#sw $t0, 0($sp)
# end: Assign at 28.34; stackHeight = 20
1588#addu $sp, $sp, 0
# end: Block at 28.2; stackHeight = 20
1592#j while_cond_93
1596:break_target_93:
# end: BreakTarget at 28.2; stackHeight = 20
1596#addu $sp, $sp, 8
# end: Block at 28.2; stackHeight = 12
1600#addu $sp, $sp, 12
1604#lw $ra, ($sp)
1608#addu $sp, $sp, 4
1612#jr $ra
# end: MethodDeclVoid at 11.17; stackHeight = -4
.globl mth_RedBlackTree_isNull
1616:mth_RedBlackTree_isNull:
1616#subu $sp, $sp, 4
1620#sw $ra, ($sp)
# begin: False at 47.9; stackHeight = 0
1624#subu $sp, $sp, 4
1628#sw $0, ($sp)
# end: False at 47.9; stackHeight = 4
1632#lw $t0, ($sp)
1636#addu $sp, $sp, 4
1640#addu $sp, $sp, 0
1644#lw $ra, ($sp)
1648#addu $sp, $sp, 4
1652#jr $ra
.globl mth_RedBlackTree_isBlack
1656:mth_RedBlackTree_isBlack:
1656#subu $sp, $sp, 4
1660#sw $ra, ($sp)
# begin: True at 52.9; stackHeight = 0
1664#li $t0, 1
1668#subu $sp, $sp, 4
1672#sw $t0, ($sp)
# end: True at 52.9; stackHeight = 4
1676#lw $t0, ($sp)
1680#addu $sp, $sp, 4
1684#addu $sp, $sp, 0
1688#lw $ra, ($sp)
1692#addu $sp, $sp, 4
1696#jr $ra
# begin: MethodDeclVoid at 56.17; stackHeight = -4
.globl mth_RedBlackTree_setBlack
1700:mth_RedBlackTree_setBlack:
1700#subu $sp, $sp, 4
1704#sw $ra, ($sp)
1708#addu $sp, $sp, 0
1712#lw $ra, ($sp)
1716#addu $sp, $sp, 4
1720#jr $ra
# end: MethodDeclVoid at 56.17; stackHeight = -4
.globl mth_RedBlackTree_isRed
1724:mth_RedBlackTree_isRed:
1724#subu $sp, $sp, 4
1728#sw $ra, ($sp)
# begin: Not at 61.9; stackHeight = 0
# begin: Call at 61.10; stackHeight = 0
1732#subu $sp, $sp, 4
1736#sw $s2, ($sp)
1740#lw $t0, 0($sp)
1744#sw $s2, 0($sp)
1748#move $s2, $t0
1752#beq $s2, $0, nullPtrException
1756#lw $t0, -12($s2)
1760#lw $t0, 16($t0)
1764#jalr $t0
1768#addu $sp, $sp, 0
1772#lw $s2, ($sp)
1776#addu $sp, $sp, 4
1780#subu $sp, $sp, 4
1784#sw $t0, ($sp)
# end: Call at 61.10; stackHeight = 4
1788#lw $t0, ($sp)
1792#xor $t0, $t0, 1
1796#sw $t0, ($sp)
# end: Not at 61.9; stackHeight = 4
1800#lw $t0, ($sp)
1804#addu $sp, $sp, 4
1808#addu $sp, $sp, 0
1812#lw $ra, ($sp)
1816#addu $sp, $sp, 4
1820#jr $ra
.globl mth_RedBlackTree_helpInsert
1824:mth_RedBlackTree_helpInsert:
1824#subu $sp, $sp, 4
1828#sw $ra, ($sp)
1832#subu $sp, $sp, 4
1836#sw $0, ($sp)
1840#lw $t0, ($sp)
1844#addu $sp, $sp, 4
1848#addu $sp, $sp, 0
1852#lw $ra, ($sp)
1856#addu $sp, $sp, 4
1860#jr $ra
.globl mth_RedBlackTree_insert
1864:mth_RedBlackTree_insert:
1864#subu $sp, $sp, 4
1868#sw $ra, ($sp)
# begin: LocalVarDecl at 72.15; stackHeight = 0
# begin: Call at 72.30; stackHeight = 0
1872#subu $sp, $sp, 4
1876#sw $s2, ($sp)
# begin: IdentifierExp at 72.41; stackHeight = 4
1880#lw $t0, 8($sp) #**LocalVar
1884#subu $sp, $sp, 8
1888#sw $s5, 4($sp)
1892#sw $t0, ($sp)
# end: IdentifierExp at 72.41; stackHeight = 12
1896#lw $t0, 8($sp)
1900#sw $s2, 8($sp)
1904#move $s2, $t0
1908#beq $s2, $0, nullPtrException
1912#lw $t0, -12($s2)
1916#lw $t0, 28($t0)
1920#jalr $t0
1924#addu $sp, $sp, 8
1928#lw $s2, ($sp)
1932#addu $sp, $sp, 4
1936#subu $sp, $sp, 4
1940#sw $t0, ($sp)
# end: Call at 72.30; stackHeight = 4
1944#lw $0, ($sp) #**insertResult
# end: LocalVarDecl at 72.15; stackHeight = 4
# begin: CallStatement at 74.15; stackHeight = 4
# begin: Call at 74.15; stackHeight = 4
# begin: IdentifierExp at 74.2; stackHeight = 4
1948#lw $t0, 0($sp) #**LocalVar
1952#subu $sp, $sp, 4
1956#sw $t0, ($sp)
# end: IdentifierExp at 74.2; stackHeight = 8
1960#lw $t0, 0($sp)
1964#sw $s2, 0($sp)
1968#move $s2, $t0
1972#beq $s2, $0, nullPtrException
1976#lw $t0, -12($s2)
1980#lw $t0, 20($t0)
1984#jalr $t0
1988#addu $sp, $sp, 0
1992#lw $s2, ($sp)
1996#addu $sp, $sp, 4
2000#subu $sp, $sp, 4
2004#sw $t0, ($sp)
# end: Call at 74.15; stackHeight = 8
2008#lw $t0, ($sp)
2012#addu $sp, $sp, 4
# end: CallStatement at 74.15; stackHeight = 4
# begin: IdentifierExp at 75.9; stackHeight = 4
2016#lw $t0, 0($sp) #**LocalVar
2020#subu $sp, $sp, 4
2024#sw $t0, ($sp)
# end: IdentifierExp at 75.9; stackHeight = 8
2028#lw $t0, ($sp)
2032#addu $sp, $sp, 4
2036#addu $sp, $sp, 4
2040#lw $ra, ($sp)
2044#addu $sp, $sp, 4
2048#jr $ra
.globl mth_RedBlackTree_asNonNull
2052:mth_RedBlackTree_asNonNull:
2052#subu $sp, $sp, 4
2056#sw $ra, ($sp)
2060#subu $sp, $sp, 4
2064#sw $0, ($sp)
2068#lw $t0, ($sp)
2072#addu $sp, $sp, 4
2076#addu $sp, $sp, 0
2080#lw $ra, ($sp)
2084#addu $sp, $sp, 4
2088#jr $ra
# begin: MethodDeclVoid at 84.17; stackHeight = -4
.globl mth_RedBlackTree_print
2092:mth_RedBlackTree_print:
2092#subu $sp, $sp, 4
2096#sw $ra, ($sp)
# begin: LocalVarDecl at 85.6; stackHeight = 0
# begin: NewObject at 85.12; stackHeight = 0
2100#li $s6, 2
2104#li $s7, 1
2108#jal newObject
2112#la $t0, CLASS_Lib
2116#sw $t0, -12($s7)
# end: NewObject at 85.12; stackHeight = 4
2120#lw $0, ($sp) #**lib
# end: LocalVarDecl at 85.6; stackHeight = 4
# begin: CallStatement at 86.7; stackHeight = 4
# begin: Call at 86.7; stackHeight = 4
2124#subu $sp, $sp, 4
2128#sw $s2, ($sp)
2132#subu $sp, $sp, 4
2136#sw $0, ($sp)
# begin: IdentifierExp at 86.23; stackHeight = 12
2140#lw $t0, 8($sp) #**LocalVar
2144#subu $sp, $sp, 4
2148#sw $t0, ($sp)
# end: IdentifierExp at 86.23; stackHeight = 16
2152#lw $t0, 8($sp)
2156#sw $s2, 8($sp)
2160#move $s2, $t0
2164#beq $s2, $0, nullPtrException
2168#lw $t0, -12($s2)
2172#lw $t0, 44($t0)
2176#jalr $t0
2180#addu $sp, $sp, 8
2184#lw $s2, ($sp)
2188#addu $sp, $sp, 4
2192#subu $sp, $sp, 4
2196#sw $t0, ($sp)
# end: Call at 86.7; stackHeight = 8
2200#lw $t0, ($sp)
2204#addu $sp, $sp, 4
# end: CallStatement at 86.7; stackHeight = 4
2208#addu $sp, $sp, 4
2212#lw $ra, ($sp)
2216#addu $sp, $sp, 4
2220#jr $ra
# end: MethodDeclVoid at 84.17; stackHeight = -4
# begin: MethodDeclVoid at 90.17; stackHeight = -4
.globl mth_RedBlackTree_helpPrint
2224:mth_RedBlackTree_helpPrint:
2224#subu $sp, $sp, 4
2228#sw $ra, ($sp)
2232#addu $sp, $sp, 0
2236#lw $ra, ($sp)
2240#addu $sp, $sp, 4
2244#jr $ra
# end: MethodDeclVoid at 90.17; stackHeight = -4
.globl mth_RedBlackTree_lookup
2248:mth_RedBlackTree_lookup:
2248#subu $sp, $sp, 4
2252#sw $ra, ($sp)
# begin: False at 95.9; stackHeight = 0
2256#subu $sp, $sp, 4
2260#sw $0, ($sp)
# end: False at 95.9; stackHeight = 4
2264#lw $t0, ($sp)
2268#addu $sp, $sp, 4
2272#addu $sp, $sp, 0
2276#lw $ra, ($sp)
2280#addu $sp, $sp, 4
2284#jr $ra
.globl mth_RedBlackTree_delete
2288:mth_RedBlackTree_delete:
2288#subu $sp, $sp, 4
2292#sw $ra, ($sp)
# begin: Call at 100.9; stackHeight = 0
2296#subu $sp, $sp, 4
2300#sw $s2, ($sp)
# begin: IdentifierExp at 100.20; stackHeight = 4
2304#lw $t0, 8($sp) #**LocalVar
2308#subu $sp, $sp, 8
2312#sw $s5, 4($sp)
2316#sw $t0, ($sp)
# end: IdentifierExp at 100.20; stackHeight = 12
# begin: NewArray at 100.26; stackHeight = 12
# begin: IntegerLiteral at 100.38; stackHeight = 12
2320#li $t0, 1
2324#subu $sp, $sp, 8
2328#sw $s5, 4($sp)
2332#sw $t0, ($sp)
# end: IntegerLiteral at 100.38; stackHeight = 20
2336#li $s6, 1
2340#lw $s7, ($sp)
2344#addu $sp, $sp, 4
2348#jal newObject
2352#la $t0, CLASS_ARRAY_BOOLEAN
2356#sw $t0, -12($s7)
# end: NewArray at 100.26; stackHeight = 16
2360#lw $t0, 12($sp)
2364#sw $s2, 12($sp)
2368#move $s2, $t0
2372#beq $s2, $0, nullPtrException
2376#lw $t0, -12($s2)
2380#lw $t0, 56($t0)
2384#jalr $t0
2388#addu $sp, $sp, 12
2392#lw $s2, ($sp)
2396#addu $sp, $sp, 4
2400#subu $sp, $sp, 4
2404#sw $t0, ($sp)
# end: Call at 100.9; stackHeight = 4
2408#lw $t0, ($sp)
2412#addu $sp, $sp, 4
2416#addu $sp, $sp, 0
2420#lw $ra, ($sp)
2424#addu $sp, $sp, 4
2428#jr $ra
.globl mth_RedBlackTree_helpDelete
2432:mth_RedBlackTree_helpDelete:
2432#subu $sp, $sp, 4
2436#sw $ra, ($sp)
2440#subu $sp, $sp, 4
2444#sw $s2, ($sp)
2448#lw $t0, ($sp)
2452#addu $sp, $sp, 4
2456#addu $sp, $sp, 0
2460#lw $ra, ($sp)
2464#addu $sp, $sp, 4
2468#jr $ra
.globl mth_NullRedBlackTree_isNull
2472:mth_NullRedBlackTree_isNull:
2472#subu $sp, $sp, 4
2476#sw $ra, ($sp)
# begin: True at 116.9; stackHeight = 0
2480#li $t0, 1
2484#subu $sp, $sp, 4
2488#sw $t0, ($sp)
# end: True at 116.9; stackHeight = 4
2492#lw $t0, ($sp)
2496#addu $sp, $sp, 4
2500#addu $sp, $sp, 0
2504#lw $ra, ($sp)
2508#addu $sp, $sp, 4
2512#jr $ra
.globl mth_NullRedBlackTree_helpInsert
2516:mth_NullRedBlackTree_helpInsert:
2516#subu $sp, $sp, 4
2520#sw $ra, ($sp)
# begin: Call at 121.35; stackHeight = 0
# begin: NewObject at 121.9; stackHeight = 0
2524#li $s6, 4
2528#li $s7, 3
2532#jal newObject
2536#la $t0, CLASS_NonNullRedBlackTree
2540#sw $t0, -12($s7)
# end: NewObject at 121.9; stackHeight = 4
# begin: IdentifierExp at 121.40; stackHeight = 4
2544#lw $t0, 8($sp) #**LocalVar
2548#subu $sp, $sp, 8
2552#sw $s5, 4($sp)
2556#sw $t0, ($sp)
# end: IdentifierExp at 121.40; stackHeight = 12
2560#subu $sp, $sp, 4
2564#sw $s2, ($sp)
2568#subu $sp, $sp, 4
2572#sw $s2, ($sp)
# begin: False at 121.55; stackHeight = 20
2576#subu $sp, $sp, 4
2580#sw $0, ($sp)
# end: False at 121.55; stackHeight = 24
2584#lw $t0, 20($sp)
2588#sw $s2, 20($sp)
2592#move $s2, $t0
2596#beq $s2, $0, nullPtrException
2600#lw $t0, -12($s2)
2604#lw $t0, 64($t0)
2608#jalr $t0
2612#addu $sp, $sp, 20
2616#lw $s2, ($sp)
2620#addu $sp, $sp, 4
2624#subu $sp, $sp, 4
2628#sw $t0, ($sp)
# end: Call at 121.35; stackHeight = 4
2632#lw $t0, ($sp)
2636#addu $sp, $sp, 4
2640#addu $sp, $sp, 0
2644#lw $ra, ($sp)
2648#addu $sp, $sp, 4
2652#jr $ra
.globl mth_NonNullRedBlackTree_isBlack
2656:mth_NonNullRedBlackTree_isBlack:
2656#subu $sp, $sp, 4
2660#sw $ra, ($sp)
# begin: IdentifierExp at 135.9; stackHeight = 0
2664#lw $t0, -20($s2) #**InstVar
2668#subu $sp, $sp, 4
2672#sw $t0, ($sp)
# end: IdentifierExp at 135.9; stackHeight = 4
2676#lw $t0, ($sp)
2680#addu $sp, $sp, 4
2684#addu $sp, $sp, 0
2688#lw $ra, ($sp)
2692#addu $sp, $sp, 4
2696#jr $ra
# begin: MethodDeclVoid at 139.17; stackHeight = -4
.globl mth_NonNullRedBlackTree_setBlack
2700:mth_NonNullRedBlackTree_setBlack:
2700#subu $sp, $sp, 4
2704#sw $ra, ($sp)
# begin: Assign at 140.10; stackHeight = 0
# begin: True at 140.12; stackHeight = 0
2708#li $t0, 1
2712#subu $sp, $sp, 4
2716#sw $t0, ($sp)
# end: True at 140.12; stackHeight = 4
2720#lw $t0, ($sp)
2724#addu $sp, $sp, 4
2728#sw $t0, -20($sp)
# end: Assign at 140.10; stackHeight = 0
2732#addu $sp, $sp, 0
2736#lw $ra, ($sp)
2740#addu $sp, $sp, 4
2744#jr $ra
# end: MethodDeclVoid at 139.17; stackHeight = -4
# begin: MethodDeclVoid at 144.17; stackHeight = -4
.globl mth_NonNullRedBlackTree_setRed
2748:mth_NonNullRedBlackTree_setRed:
2748#subu $sp, $sp, 4
2752#sw $ra, ($sp)
# begin: Assign at 145.10; stackHeight = 0
# begin: False at 145.12; stackHeight = 0
2756#subu $sp, $sp, 4
2760#sw $0, ($sp)
# end: False at 145.12; stackHeight = 4
2764#lw $t0, ($sp)
2768#addu $sp, $sp, 4
2772#sw $t0, -20($sp)
# end: Assign at 145.10; stackHeight = 0
2776#addu $sp, $sp, 0
2780#lw $ra, ($sp)
2784#addu $sp, $sp, 4
2788#jr $ra
# end: MethodDeclVoid at 144.17; stackHeight = -4
.globl mth_NonNullRedBlackTree_init
2792:mth_NonNullRedBlackTree_init:
2792#subu $sp, $sp, 4
2796#sw $ra, ($sp)
# begin: Assign at 151.12; stackHeight = 0
# begin: IdentifierExp at 151.14; stackHeight = 0
2800#lw $t0, 16($sp) #**LocalVar
2804#subu $sp, $sp, 8
2808#sw $s5, 4($sp)
2812#sw $t0, ($sp)
# end: IdentifierExp at 151.14; stackHeight = 8
2816#lw $t0, ($sp)
2820#addu $sp, $sp, 8
2824#sw $t0, -16($s2)
# end: Assign at 151.12; stackHeight = 0
# begin: Assign at 152.12; stackHeight = 0
# begin: IdentifierExp at 152.14; stackHeight = 0
2828#lw $t0, 12($sp) #**LocalVar
2832#subu $sp, $sp, 4
2836#sw $t0, ($sp)
# end: IdentifierExp at 152.14; stackHeight = 4
2840#lw $t0, ($sp)
2844#addu $sp, $sp, 4
2848#sw $t0, 4($s2)
# end: Assign at 152.12; stackHeight = 0
# begin: Assign at 153.13; stackHeight = 0
# begin: IdentifierExp at 153.15; stackHeight = 0
2852#lw $t0, 8($sp) #**LocalVar
2856#subu $sp, $sp, 4
2860#sw $t0, ($sp)
# end: IdentifierExp at 153.15; stackHeight = 4
2864#lw $t0, ($sp)
2868#addu $sp, $sp, 4
2872#sw $t0, 8($s2)
# end: Assign at 153.13; stackHeight = 0
# begin: Assign at 154.15; stackHeight = 0
# begin: IdentifierExp at 154.17; stackHeight = 0
2876#lw $t0, 4($sp) #**LocalVar
2880#subu $sp, $sp, 4
2884#sw $t0, ($sp)
# end: IdentifierExp at 154.17; stackHeight = 4
2888#lw $t0, ($sp)
2892#addu $sp, $sp, 4
2896#sw $t0, -20($s2)
# end: Assign at 154.15; stackHeight = 0
2900#subu $sp, $sp, 4
2904#sw $s2, ($sp)
2908#lw $t0, ($sp)
2912#addu $sp, $sp, 4
2916#addu $sp, $sp, 0
2920#lw $ra, ($sp)
2924#addu $sp, $sp, 4
2928#jr $ra
.globl mth_NonNullRedBlackTree_helpInsert
2932:mth_NonNullRedBlackTree_helpInsert:
2932#subu $sp, $sp, 4
2936#sw $ra, ($sp)
# begin: LocalVarDecl at 162.15; stackHeight = 0
2940#subu $sp, $sp, 4
2944#sw $s2, ($sp)
2948#lw $0, ($sp) #**rtnVal
# end: LocalVarDecl at 162.15; stackHeight = 4
# begin: If at 165.2; stackHeight = 4
# begin: GreaterThan at 165.11; stackHeight = 4
# begin: IdentifierExp at 165.6; stackHeight = 4
2952#lw $t0, 8($sp) #**LocalVar
2956#subu $sp, $sp, 8
2960#sw $s5, 4($sp)
2964#sw $t0, ($sp)
# end: IdentifierExp at 165.6; stackHeight = 12
# begin: InstVarAccess at 165.17; stackHeight = 12
2968#subu $sp, $sp, 4
2972#sw $s2, ($sp)
2976#lw $t0, ($sp)
2980#addu $sp, $sp, 4
2984#beq $t0, $0, nullPtrException
2988#lw $t0, -64($t0)
2992#subu $sp, $sp, 8
2996#sw $s5, 4($sp)
3000#sw $t0, ($sp)
# end: InstVarAccess at 165.17; stackHeight = 20
3004#lw $t2, ($sp)
3008#addu $sp, $sp, 8
3012#lw $t1, ($sp)
3016#addu $sp, $sp, 8
3020#sgt $t0, $t1, $t2
3024#subu $sp, $sp, 4
3028#sw $t0, ($sp)
# end: GreaterThan at 165.11; stackHeight = 8
3032#lw $t0, ($sp)
3036#addu $sp, $sp, 4
3040#beq $t0, $0, if_else_271
# begin: Block at 165.24; stackHeight = 4
# begin: Assign at 167.12; stackHeight = 4
# begin: Call at 167.20; stackHeight = 4
# begin: IdentifierExp at 167.14; stackHeight = 4
3044#lw $t0, 8($s2) #**InstVar
3048#subu $sp, $sp, 4
3052#sw $t0, ($sp)
# end: IdentifierExp at 167.14; stackHeight = 8
# begin: IdentifierExp at 167.31; stackHeight = 8
3056#lw $t0, 12($sp) #**LocalVar
3060#subu $sp, $sp, 8
3064#sw $s5, 4($sp)
3068#sw $t0, ($sp)
# end: IdentifierExp at 167.31; stackHeight = 16
3072#lw $t0, 8($sp)
3076#sw $s2, 8($sp)
3080#move $s2, $t0
3084#beq $s2, $0, nullPtrException
3088#lw $t0, -12($s2)
3092#lw $t0, 28($t0)
3096#jalr $t0
3100#addu $sp, $sp, 8
3104#lw $s2, ($sp)
3108#addu $sp, $sp, 4
3112#subu $sp, $sp, 4
3116#sw $t0, ($sp)
# end: Call at 167.20; stackHeight = 8
3120#lw $t0, ($sp)
3124#addu $sp, $sp, 4
3128#sw $t0, 12($sp)
# end: Assign at 167.12; stackHeight = 4
# begin: Assign at 168.13; stackHeight = 4
# begin: Call at 168.20; stackHeight = 4
3132#subu $sp, $sp, 4
3136#sw $s2, ($sp)
# begin: False at 168.41; stackHeight = 8
3140#subu $sp, $sp, 4
3144#sw $0, ($sp)
# end: False at 168.41; stackHeight = 12
3148#lw $t0, 4($sp)
3152#sw $s2, 4($sp)
3156#move $s2, $t0
3160#beq $s2, $0, nullPtrException
3164#lw $t0, -12($s2)
3168#lw $t0, 88($t0)
3172#jalr $t0
3176#addu $sp, $sp, 4
3180#lw $s2, ($sp)
3184#addu $sp, $sp, 4
3188#subu $sp, $sp, 4
3192#sw $t0, ($sp)
# end: Call at 168.20; stackHeight = 8
3196#lw $t0, ($sp)
3200#addu $sp, $sp, 4
3204#sw $t0, 0($sp)
# end: Assign at 168.13; stackHeight = 4
3208#addu $sp, $sp, 0
# end: Block at 165.24; stackHeight = 4
3212#j if_done_271
3216:if_else_271:
# begin: If at 170.7; stackHeight = 4
# begin: LessThan at 170.16; stackHeight = 4
# begin: IdentifierExp at 170.11; stackHeight = 4
3216#lw $t0, 8($sp) #**LocalVar
3220#subu $sp, $sp, 8
3224#sw $s5, 4($sp)
3228#sw $t0, ($sp)
# end: IdentifierExp at 170.11; stackHeight = 12
# begin: InstVarAccess at 170.22; stackHeight = 12
3232#subu $sp, $sp, 4
3236#sw $s2, ($sp)
3240#lw $t0, ($sp)
3244#addu $sp, $sp, 4
3248#beq $t0, $0, nullPtrException
3252#lw $t0, -64($t0)
3256#subu $sp, $sp, 8
3260#sw $s5, 4($sp)
3264#sw $t0, ($sp)
# end: InstVarAccess at 170.22; stackHeight = 20
3268#lw $t2, ($sp)
3272#addu $sp, $sp, 8
3276#lw $t1, ($sp)
3280#addu $sp, $sp, 8
3284#slt $t0, $t1, $t2
3288#subu $sp, $sp, 4
3292#sw $t0, ($sp)
# end: LessThan at 170.16; stackHeight = 8
3296#lw $t0, ($sp)
3300#addu $sp, $sp, 4
3304#beq $t0, $0, if_else_270
# begin: Block at 170.29; stackHeight = 4
# begin: Assign at 172.11; stackHeight = 4
# begin: Call at 172.18; stackHeight = 4
# begin: IdentifierExp at 172.13; stackHeight = 4
3308#lw $t0, 4($s2) #**InstVar
3312#subu $sp, $sp, 4
3316#sw $t0, ($sp)
# end: IdentifierExp at 172.13; stackHeight = 8
# begin: IdentifierExp at 172.29; stackHeight = 8
3320#lw $t0, 12($sp) #**LocalVar
3324#subu $sp, $sp, 8
3328#sw $s5, 4($sp)
3332#sw $t0, ($sp)
# end: IdentifierExp at 172.29; stackHeight = 16
3336#lw $t0, 8($sp)
3340#sw $s2, 8($sp)
3344#move $s2, $t0
3348#beq $s2, $0, nullPtrException
3352#lw $t0, -12($s2)
3356#lw $t0, 28($t0)
3360#jalr $t0
3364#addu $sp, $sp, 8
3368#lw $s2, ($sp)
3372#addu $sp, $sp, 4
3376#subu $sp, $sp, 4
3380#sw $t0, ($sp)
# end: Call at 172.18; stackHeight = 8
3384#lw $t0, ($sp)
3388#addu $sp, $sp, 4
3392#sw $t0, 8($sp)
# end: Assign at 172.11; stackHeight = 4
# begin: Assign at 173.13; stackHeight = 4
# begin: Call at 173.20; stackHeight = 4
3396#subu $sp, $sp, 4
3400#sw $s2, ($sp)
# begin: True at 173.41; stackHeight = 8
3404#li $t0, 1
3408#subu $sp, $sp, 4
3412#sw $t0, ($sp)
# end: True at 173.41; stackHeight = 12
3416#lw $t0, 4($sp)
3420#sw $s2, 4($sp)
3424#move $s2, $t0
3428#beq $s2, $0, nullPtrException
3432#lw $t0, -12($s2)
3436#lw $t0, 88($t0)
3440#jalr $t0
3444#addu $sp, $sp, 4
3448#lw $s2, ($sp)
3452#addu $sp, $sp, 4
3456#subu $sp, $sp, 4
3460#sw $t0, ($sp)
# end: Call at 173.20; stackHeight = 8
3464#lw $t0, ($sp)
3468#addu $sp, $sp, 4
3472#sw $t0, 0($sp)
# end: Assign at 173.13; stackHeight = 4
3476#addu $sp, $sp, 0
# end: Block at 170.29; stackHeight = 4
3480#j if_done_270
3484:if_else_270:
# begin: Block at 177.2; stackHeight = 4
3484#addu $sp, $sp, 0
# end: Block at 177.2; stackHeight = 4
3488:if_done_270:
# end: If at 170.7; stackHeight = 4
3488:if_done_271:
# end: If at 165.2; stackHeight = 4
# begin: IdentifierExp at 177.9; stackHeight = 4
3488#lw $t0, 0($sp) #**LocalVar
3492#subu $sp, $sp, 4
3496#sw $t0, ($sp)
# end: IdentifierExp at 177.9; stackHeight = 8
3500#lw $t0, ($sp)
3504#addu $sp, $sp, 4
3508#addu $sp, $sp, 4
3512#lw $ra, ($sp)
3516#addu $sp, $sp, 4
3520#jr $ra
.globl mth_NonNullRedBlackTree_lookup
3524:mth_NonNullRedBlackTree_lookup:
3524#subu $sp, $sp, 4
3528#sw $ra, ($sp)
# begin: LocalVarDecl at 182.10; stackHeight = 0
# begin: True at 182.19; stackHeight = 0
3532#li $t0, 1
3536#subu $sp, $sp, 4
3540#sw $t0, ($sp)
# end: True at 182.19; stackHeight = 4
3544#lw $0, ($sp) #**rtnVal
# end: LocalVarDecl at 182.10; stackHeight = 4
# begin: If at 183.2; stackHeight = 4
# begin: LessThan at 183.11; stackHeight = 4
# begin: IdentifierExp at 183.6; stackHeight = 4
3548#lw $t0, 8($sp) #**LocalVar
3552#subu $sp, $sp, 8
3556#sw $s5, 4($sp)
3560#sw $t0, ($sp)
# end: IdentifierExp at 183.6; stackHeight = 12
# begin: InstVarAccess at 183.17; stackHeight = 12
3564#subu $sp, $sp, 4
3568#sw $s2, ($sp)
3572#lw $t0, ($sp)
3576#addu $sp, $sp, 4
3580#beq $t0, $0, nullPtrException
3584#lw $t0, -64($t0)
3588#subu $sp, $sp, 8
3592#sw $s5, 4($sp)
3596#sw $t0, ($sp)
# end: InstVarAccess at 183.17; stackHeight = 20
3600#lw $t2, ($sp)
3604#addu $sp, $sp, 8
3608#lw $t1, ($sp)
3612#addu $sp, $sp, 8
3616#slt $t0, $t1, $t2
3620#subu $sp, $sp, 4
3624#sw $t0, ($sp)
# end: LessThan at 183.11; stackHeight = 8
3628#lw $t0, ($sp)
3632#addu $sp, $sp, 4
3636#beq $t0, $0, if_else_303
# begin: Block at 183.24; stackHeight = 4
# begin: Assign at 184.13; stackHeight = 4
# begin: Call at 184.20; stackHeight = 4
# begin: IdentifierExp at 184.15; stackHeight = 4
3640#lw $t0, 4($s2) #**InstVar
3644#subu $sp, $sp, 4
3648#sw $t0, ($sp)
# end: IdentifierExp at 184.15; stackHeight = 8
# begin: IdentifierExp at 184.27; stackHeight = 8
3652#lw $t0, 12($sp) #**LocalVar
3656#subu $sp, $sp, 8
3660#sw $s5, 4($sp)
3664#sw $t0, ($sp)
# end: IdentifierExp at 184.27; stackHeight = 16
3668#lw $t0, 8($sp)
3672#sw $s2, 8($sp)
3676#move $s2, $t0
3680#beq $s2, $0, nullPtrException
3684#lw $t0, -12($s2)
3688#lw $t0, 48($t0)
3692#jalr $t0
3696#addu $sp, $sp, 8
3700#lw $s2, ($sp)
3704#addu $sp, $sp, 4
3708#subu $sp, $sp, 4
3712#sw $t0, ($sp)
# end: Call at 184.20; stackHeight = 8
3716#lw $t0, ($sp)
3720#addu $sp, $sp, 4
3724#sw $t0, 0($sp)
# end: Assign at 184.13; stackHeight = 4
3728#addu $sp, $sp, 0
# end: Block at 183.24; stackHeight = 4
3732#j if_done_303
3736:if_else_303:
# begin: If at 186.7; stackHeight = 4
# begin: GreaterThan at 186.16; stackHeight = 4
# begin: IdentifierExp at 186.11; stackHeight = 4
3736#lw $t0, 8($sp) #**LocalVar
3740#subu $sp, $sp, 8
3744#sw $s5, 4($sp)
3748#sw $t0, ($sp)
# end: IdentifierExp at 186.11; stackHeight = 12
# begin: InstVarAccess at 186.22; stackHeight = 12
3752#subu $sp, $sp, 4
3756#sw $s2, ($sp)
3760#lw $t0, ($sp)
3764#addu $sp, $sp, 4
3768#beq $t0, $0, nullPtrException
3772#lw $t0, -64($t0)
3776#subu $sp, $sp, 8
3780#sw $s5, 4($sp)
3784#sw $t0, ($sp)
# end: InstVarAccess at 186.22; stackHeight = 20
3788#lw $t2, ($sp)
3792#addu $sp, $sp, 8
3796#lw $t1, ($sp)
3800#addu $sp, $sp, 8
3804#sgt $t0, $t1, $t2
3808#subu $sp, $sp, 4
3812#sw $t0, ($sp)
# end: GreaterThan at 186.16; stackHeight = 8
3816#lw $t0, ($sp)
3820#addu $sp, $sp, 4
3824#beq $t0, $0, if_else_302
# begin: Block at 186.29; stackHeight = 4
# begin: Assign at 187.13; stackHeight = 4
# begin: Call at 187.21; stackHeight = 4
# begin: IdentifierExp at 187.15; stackHeight = 4
3828#lw $t0, 8($s2) #**InstVar
3832#subu $sp, $sp, 4
3836#sw $t0, ($sp)
# end: IdentifierExp at 187.15; stackHeight = 8
# begin: IdentifierExp at 187.28; stackHeight = 8
3840#lw $t0, 12($sp) #**LocalVar
3844#subu $sp, $sp, 8
3848#sw $s5, 4($sp)
3852#sw $t0, ($sp)
# end: IdentifierExp at 187.28; stackHeight = 16
3856#lw $t0, 8($sp)
3860#sw $s2, 8($sp)
3864#move $s2, $t0
3868#beq $s2, $0, nullPtrException
3872#lw $t0, -12($s2)
3876#lw $t0, 48($t0)
3880#jalr $t0
3884#addu $sp, $sp, 8
3888#lw $s2, ($sp)
3892#addu $sp, $sp, 4
3896#subu $sp, $sp, 4
3900#sw $t0, ($sp)
# end: Call at 187.21; stackHeight = 8
3904#lw $t0, ($sp)
3908#addu $sp, $sp, 4
3912#sw $t0, 0($sp)
# end: Assign at 187.13; stackHeight = 4
3916#addu $sp, $sp, 0
# end: Block at 186.29; stackHeight = 4
3920#j if_done_302
3924:if_else_302:
# begin: Block at 189.2; stackHeight = 4
3924#addu $sp, $sp, 0
# end: Block at 189.2; stackHeight = 4
3928:if_done_302:
# end: If at 186.7; stackHeight = 4
3928:if_done_303:
# end: If at 183.2; stackHeight = 4
# begin: IdentifierExp at 189.9; stackHeight = 4
3928#lw $t0, 0($sp) #**LocalVar
3932#subu $sp, $sp, 4
3936#sw $t0, ($sp)
# end: IdentifierExp at 189.9; stackHeight = 8
3940#lw $t0, ($sp)
3944#addu $sp, $sp, 4
3948#addu $sp, $sp, 4
3952#lw $ra, ($sp)
3956#addu $sp, $sp, 4
3960#jr $ra
.globl mth_NonNullRedBlackTree_helpDelete
3964:mth_NonNullRedBlackTree_helpDelete:
3964#subu $sp, $sp, 4
3968#sw $ra, ($sp)
# begin: LocalVarDecl at 198.15; stackHeight = 0
3972#subu $sp, $sp, 4
3976#sw $0, ($sp)
3980#lw $0, ($sp) #**rtnVal
# end: LocalVarDecl at 198.15; stackHeight = 4
# begin: LocalVarDecl at 201.22; stackHeight = 4
3984#subu $sp, $sp, 4
3988#sw $s2, ($sp)
3992#lw $0, ($sp) #**rtnVal2
# end: LocalVarDecl at 201.22; stackHeight = 8
# begin: If at 204.2; stackHeight = 8
# begin: Equals at 204.11; stackHeight = 8
# begin: IdentifierExp at 204.6; stackHeight = 8
3996#lw $t0, 16($sp) #**LocalVar
4000#subu $sp, $sp, 8
4004#sw $s5, 4($sp)
4008#sw $t0, ($sp)
# end: IdentifierExp at 204.6; stackHeight = 16
# begin: InstVarAccess at 204.18; stackHeight = 16
4012#subu $sp, $sp, 4
4016#sw $s2, ($sp)
4020#lw $t0, ($sp)
4024#addu $sp, $sp, 4
4028#beq $t0, $0, nullPtrException
4032#lw $t0, -64($t0)
4036#subu $sp, $sp, 8
4040#sw $s5, 4($sp)
4044#sw $t0, ($sp)
# end: InstVarAccess at 204.18; stackHeight = 24
4048#lw $t2, ($sp)
4052#addu $sp, $sp, 8
4056#lw $t1, ($sp)
4060#addu $sp, $sp, 8
4064#seq $t0, $t1, $t2
4065##...subu $at,$t1,$t2
4069##...sltiu $t0,$at,1
4072#subu $sp, $sp, 4
4076#sw $t0, ($sp)
# end: Equals at 204.11; stackHeight = 12
4080#lw $t0, ($sp)
4084#addu $sp, $sp, 4
4088#beq $t0, $0, if_else_446
# begin: Block at 204.25; stackHeight = 8
# begin: If at 205.6; stackHeight = 8
# begin: Call at 205.16; stackHeight = 8
# begin: IdentifierExp at 205.10; stackHeight = 8
4092#lw $t0, 8($s2) #**InstVar
4096#subu $sp, $sp, 4
4100#sw $t0, ($sp)
# end: IdentifierExp at 205.10; stackHeight = 12
4104#lw $t0, 0($sp)
4108#sw $s2, 0($sp)
4112#move $s2, $t0
4116#beq $s2, $0, nullPtrException
4120#lw $t0, -12($s2)
4124#lw $t0, 12($t0)
4128#jalr $t0
4132#addu $sp, $sp, 0
4136#lw $s2, ($sp)
4140#addu $sp, $sp, 4
4144#subu $sp, $sp, 4
4148#sw $t0, ($sp)
# end: Call at 205.16; stackHeight = 12
4152#lw $t0, ($sp)
4156#addu $sp, $sp, 4
4160#beq $t0, $0, if_else_411
# begin: Block at 205.26; stackHeight = 8
# begin: If at 206.3; stackHeight = 8
# begin: Call at 206.12; stackHeight = 8
# begin: IdentifierExp at 206.7; stackHeight = 8
4164#lw $t0, 4($s2) #**InstVar
4168#subu $sp, $sp, 4
4172#sw $t0, ($sp)
# end: IdentifierExp at 206.7; stackHeight = 12
4176#lw $t0, 0($sp)
4180#sw $s2, 0($sp)
4184#move $s2, $t0
4188#beq $s2, $0, nullPtrException
4192#lw $t0, -12($s2)
4196#lw $t0, 12($t0)
4200#jalr $t0
4204#addu $sp, $sp, 0
4208#lw $s2, ($sp)
4212#addu $sp, $sp, 4
4216#subu $sp, $sp, 4
4220#sw $t0, ($sp)
# end: Call at 206.12; stackHeight = 12
4224#lw $t0, ($sp)
4228#addu $sp, $sp, 4
4232#beq $t0, $0, if_else_344
# begin: Block at 206.22; stackHeight = 8
# begin: Assign at 208.18; stackHeight = 8
# begin: IdentifierExp at 208.7; stackHeight = 8
4236#lw $t0, 12($sp) #**LocalVar
4240#subu $sp, $sp, 4
4244#sw $t0, ($sp)
# end: IdentifierExp at 208.7; stackHeight = 12
# begin: IntegerLiteral at 208.15; stackHeight = 12
4248#li $t0, 0
4252#subu $sp, $sp, 8
4256#sw $s5, 4($sp)
4260#sw $t0, ($sp)
# end: IntegerLiteral at 208.15; stackHeight = 20
# begin: IdentifierExp at 208.20; stackHeight = 20
4264#lw $t0, -20($s2) #**InstVar
4268#subu $sp, $sp, 4
4272#sw $t0, ($sp)
# end: IdentifierExp at 208.20; stackHeight = 24
4276#lw $t0, ($sp)
4280#addu $sp, $sp, 4
4284#lw $t1, ($sp)
4288#addu $sp, $sp, 8
4292#lw $t2, ($sp)
4296#addu $sp, $sp, 4
4300#beq $t2, $0, nullPtrException
4304#lw $t3, -4($t2)
4308#bgeu $t1, $t3, arrayIndexOutOfBounds
4309##...sltu $at,$t1,$t3
4313##...beq $at,$zero,18532
4316#sll $t1, $t1, 2
4320#addu $t1, $t1, $t2
4324#sw $t0, ($t1)
# end: Assign at 208.18; stackHeight = 8
# begin: Assign at 209.14; stackHeight = 8
# begin: IdentifierExp at 209.16; stackHeight = 8
4328#lw $t0, 8($s2) #**InstVar
4332#subu $sp, $sp, 4
4336#sw $t0, ($sp)
# end: IdentifierExp at 209.16; stackHeight = 12
4340#lw $t0, ($sp)
4344#addu $sp, $sp, 4
4348#sw $t0, 4($sp)
# end: Assign at 209.14; stackHeight = 8
4352#addu $sp, $sp, 0
# end: Block at 206.22; stackHeight = 8
4356#j if_done_344
4360:if_else_344:
# begin: Block at 211.8; stackHeight = 8
# begin: Assign at 213.14; stackHeight = 8
# begin: IdentifierExp at 213.16; stackHeight = 8
4360#lw $t0, 4($s2) #**InstVar
4364#subu $sp, $sp, 4
4368#sw $t0, ($sp)
# end: IdentifierExp at 213.16; stackHeight = 12
4372#lw $t0, ($sp)
4376#addu $sp, $sp, 4
4380#sw $t0, 4($sp)
# end: Assign at 213.14; stackHeight = 8
# begin: CallStatement at 214.14; stackHeight = 8
# begin: Call at 214.14; stackHeight = 8
# begin: IdentifierExp at 214.7; stackHeight = 8
4384#lw $t0, 4($sp) #**LocalVar
4388#subu $sp, $sp, 4
4392#sw $t0, ($sp)
# end: IdentifierExp at 214.7; stackHeight = 12
4396#lw $t0, 0($sp)
4400#sw $s2, 0($sp)
4404#move $s2, $t0
4408#beq $s2, $0, nullPtrException
4412#lw $t0, -12($s2)
4416#lw $t0, 20($t0)
4420#jalr $t0
4424#addu $sp, $sp, 0
4428#lw $s2, ($sp)
4432#addu $sp, $sp, 4
4436#subu $sp, $sp, 4
4440#sw $t0, ($sp)
# end: Call at 214.14; stackHeight = 12
4444#lw $t0, ($sp)
4448#addu $sp, $sp, 4
# end: CallStatement at 214.14; stackHeight = 8
4452#addu $sp, $sp, 0
# end: Block at 211.8; stackHeight = 8
4456:if_done_344:
# end: If at 206.3; stackHeight = 8
4456#addu $sp, $sp, 0
# end: Block at 205.26; stackHeight = 8
4460#j if_done_411
4464:if_else_411:
# begin: If at 217.11; stackHeight = 8
# begin: Call at 217.20; stackHeight = 8
# begin: IdentifierExp at 217.15; stackHeight = 8
4464#lw $t0, 4($s2) #**InstVar
4468#subu $sp, $sp, 4
4472#sw $t0, ($sp)
# end: IdentifierExp at 217.15; stackHeight = 12
4476#lw $t0, 0($sp)
4480#sw $s2, 0($sp)
4484#move $s2, $t0
4488#beq $s2, $0, nullPtrException
4492#lw $t0, -12($s2)
4496#lw $t0, 12($t0)
4500#jalr $t0
4504#addu $sp, $sp, 0
4508#lw $s2, ($sp)
4512#addu $sp, $sp, 4
4516#subu $sp, $sp, 4
4520#sw $t0, ($sp)
# end: Call at 217.20; stackHeight = 12
4524#lw $t0, ($sp)
4528#addu $sp, $sp, 4
4532#beq $t0, $0, if_else_410
# begin: Block at 217.30; stackHeight = 8
# begin: Assign at 219.10; stackHeight = 8
# begin: IdentifierExp at 219.12; stackHeight = 8
4536#lw $t0, 8($s2) #**InstVar
4540#subu $sp, $sp, 4
4544#sw $t0, ($sp)
# end: IdentifierExp at 219.12; stackHeight = 12
4548#lw $t0, ($sp)
4552#addu $sp, $sp, 4
4556#sw $t0, 4($sp)
# end: Assign at 219.10; stackHeight = 8
# begin: CallStatement at 220.10; stackHeight = 8
# begin: Call at 220.10; stackHeight = 8
# begin: IdentifierExp at 220.3; stackHeight = 8
4560#lw $t0, 4($sp) #**LocalVar
4564#subu $sp, $sp, 4
4568#sw $t0, ($sp)
# end: IdentifierExp at 220.3; stackHeight = 12
4572#lw $t0, 0($sp)
4576#sw $s2, 0($sp)
4580#move $s2, $t0
4584#beq $s2, $0, nullPtrException
4588#lw $t0, -12($s2)
4592#lw $t0, 20($t0)
4596#jalr $t0
4600#addu $sp, $sp, 0
4604#lw $s2, ($sp)
4608#addu $sp, $sp, 4
4612#subu $sp, $sp, 4
4616#sw $t0, ($sp)
# end: Call at 220.10; stackHeight = 12
4620#lw $t0, ($sp)
4624#addu $sp, $sp, 4
# end: CallStatement at 220.10; stackHeight = 8
4628#addu $sp, $sp, 0
# end: Block at 217.30; stackHeight = 8
4632#j if_done_410
4636:if_else_410:
# begin: Block at 222.11; stackHeight = 8
# begin: LocalVarDecl at 223.23; stackHeight = 8
# begin: Call at 223.36; stackHeight = 8
# begin: IdentifierExp at 223.30; stackHeight = 8
4636#lw $t0, 8($s2) #**InstVar
4640#subu $sp, $sp, 4
4644#sw $t0, ($sp)
# end: IdentifierExp at 223.30; stackHeight = 12
4648#lw $t0, 0($sp)
4652#sw $s2, 0($sp)
4656#move $s2, $t0
4660#beq $s2, $0, nullPtrException
4664#lw $t0, -12($s2)
4668#lw $t0, 36($t0)
4672#jalr $t0
4676#addu $sp, $sp, 0
4680#lw $s2, ($sp)
4684#addu $sp, $sp, 4
4688#subu $sp, $sp, 4
4692#sw $t0, ($sp)
# end: Call at 223.36; stackHeight = 12
4696#lw $0, ($sp) #**succ
# end: LocalVarDecl at 223.23; stackHeight = 12
# begin: Block at 224.3; stackHeight = 12
# begin: Block at 224.8; stackHeight = 12
4700#addu $sp, $sp, 0
# end: Block at 224.8; stackHeight = 12
# begin: BreakTarget at 224.3; stackHeight = 12
4704:while_cond_380:
# begin: True at 224.9; stackHeight = 12
4704#li $t0, 1
4708#subu $sp, $sp, 4
4712#sw $t0, ($sp)
# end: True at 224.9; stackHeight = 16
4716#lw $t0, ($sp)
4720#addu $sp, $sp, 4
4724#beq $t0, $0, break_target_380
# begin: Block at 224.3; stackHeight = 12
# begin: Block at 224.12; stackHeight = 12
# begin: LocalVarDecl at 225.27; stackHeight = 12
# begin: Call at 225.44; stackHeight = 12
# begin: InstVarAccess at 225.38; stackHeight = 12
# begin: IdentifierExp at 225.34; stackHeight = 12
4728#lw $t0, 0($sp) #**LocalVar
4732#subu $sp, $sp, 4
4736#sw $t0, ($sp)
# end: IdentifierExp at 225.34; stackHeight = 16
4740#lw $t0, ($sp)
4744#addu $sp, $sp, 4
4748#beq $t0, $0, nullPtrException
4752#lw $t0, 16($t0)
4756#subu $sp, $sp, 4
4760#sw $t0, ($sp)
# end: InstVarAccess at 225.38; stackHeight = 16
4764#lw $t0, 0($sp)
4768#sw $s2, 0($sp)
4772#move $s2, $t0
4776#beq $s2, $0, nullPtrException
4780#lw $t0, -12($s2)
4784#lw $t0, 36($t0)
4788#jalr $t0
4792#addu $sp, $sp, 0
4796#lw $s2, ($sp)
4800#addu $sp, $sp, 4
4804#subu $sp, $sp, 4
4808#sw $t0, ($sp)
# end: Call at 225.44; stackHeight = 16
4812#lw $0, ($sp) #**next
# end: LocalVarDecl at 225.27; stackHeight = 16
# begin: If at 226.7; stackHeight = 16
# begin: Equals at 226.16; stackHeight = 16
# begin: IdentifierExp at 226.11; stackHeight = 16
4816#lw $t0, 0($sp) #**LocalVar
4820#subu $sp, $sp, 4
4824#sw $t0, ($sp)
# end: IdentifierExp at 226.11; stackHeight = 20
4828#subu $sp, $sp, 4
4832#sw $0, ($sp)
4836#lw $t2, ($sp)
4840#addu $sp, $sp, 4
4844#lw $t1, ($sp)
4848#addu $sp, $sp, 4
4852#seq $t0, $t1, $t2
4853##...subu $at,$t1,$t2
4857##...sltiu $t0,$at,1
4860#subu $sp, $sp, 4
4864#sw $t0, ($sp)
# end: Equals at 226.16; stackHeight = 20
4868#lw $t0, ($sp)
4872#addu $sp, $sp, 4
4876#beq $t0, $0, if_else_371
# begin: Break at 226.25; stackHeight = 16
4880#addu $sp, $sp, 4
4884#j break_target_380
# end: Break at 226.25; stackHeight = 12
4888#j if_done_371
4892:if_else_371:
# begin: Block at 227.7; stackHeight = 12
4892#addu $sp, $sp, 0
# end: Block at 227.7; stackHeight = 12
4896:if_done_371:
# end: If at 226.7; stackHeight = 12
# begin: Assign at 227.12; stackHeight = 12
# begin: IdentifierExp at 227.14; stackHeight = 12
4896#lw $t0, -4($sp) #**LocalVar
4900#subu $sp, $sp, 4
4904#sw $t0, ($sp)
# end: IdentifierExp at 227.14; stackHeight = 16
4908#lw $t0, ($sp)
4912#addu $sp, $sp, 4
4916#sw $t0, 0($sp)
# end: Assign at 227.12; stackHeight = 12
4920#addu $sp, $sp, 0
# end: Block at 224.12; stackHeight = 12
# begin: Block at 224.10; stackHeight = 12
4924#addu $sp, $sp, 0
# end: Block at 224.10; stackHeight = 12
4928#addu $sp, $sp, 0
# end: Block at 224.3; stackHeight = 12
4932#j while_cond_380
4936:break_target_380:
# end: BreakTarget at 224.3; stackHeight = 12
4936#addu $sp, $sp, 0
# end: Block at 224.3; stackHeight = 12
# begin: LocalVarDecl at 231.7; stackHeight = 12
# begin: InstVarAccess at 231.18; stackHeight = 12
# begin: IdentifierExp at 231.14; stackHeight = 12
4940#lw $t0, 0($sp) #**LocalVar
4944#subu $sp, $sp, 4
4948#sw $t0, ($sp)
# end: IdentifierExp at 231.14; stackHeight = 16
4952#lw $t0, ($sp)
4956#addu $sp, $sp, 4
4960#beq $t0, $0, nullPtrException
4964#lw $t0, -64($t0)
4968#subu $sp, $sp, 8
4972#sw $s5, 4($sp)
4976#sw $t0, ($sp)
# end: InstVarAccess at 231.18; stackHeight = 20
4980#lw $0, ($sp) #**temp
# end: LocalVarDecl at 231.7; stackHeight = 20
# begin: Assign at 232.13; stackHeight = 20
# begin: IdentifierExp at 232.3; stackHeight = 20
4984#lw $t0, 8($sp) #**LocalVar
4988#subu $sp, $sp, 4
4992#sw $t0, ($sp)
# end: IdentifierExp at 232.3; stackHeight = 24
# begin: InstVarAccess at 232.19; stackHeight = 24
4996#subu $sp, $sp, 4
5000#sw $s2, ($sp)
5004#lw $t0, ($sp)
5008#addu $sp, $sp, 4
5012#beq $t0, $0, nullPtrException
5016#lw $t0, -64($t0)
5020#subu $sp, $sp, 8
5024#sw $s5, 4($sp)
5028#sw $t0, ($sp)
# end: InstVarAccess at 232.19; stackHeight = 32
5032#lw $t0, ($sp)
5036#addu $sp, $sp, 8
5040#lw $t1, ($sp)
5044#addu $sp, $sp, 4
5048#beq $t1, $0, nullPtrException
5052#sw $t0, -16($t1)
# end: Assign at 232.13; stackHeight = 20
# begin: Assign at 233.13; stackHeight = 20
# begin: IdentifierExp at 233.15; stackHeight = 20
5056#lw $t0, 0($sp) #**LocalVar
5060#subu $sp, $sp, 8
5064#sw $s5, 4($sp)
5068#sw $t0, ($sp)
# end: IdentifierExp at 233.15; stackHeight = 28
5072#lw $t0, ($sp)
5076#addu $sp, $sp, 8
5080#sw $t0, -16($s2)
# end: Assign at 233.13; stackHeight = 20
# begin: Assign at 236.17; stackHeight = 20
# begin: IdentifierExp at 236.3; stackHeight = 20
5084#lw $t0, 12($sp) #**LocalVar
5088#subu $sp, $sp, 4
5092#sw $t0, ($sp)
# end: IdentifierExp at 236.3; stackHeight = 24
# begin: Call at 236.25; stackHeight = 24
# begin: IdentifierExp at 236.19; stackHeight = 24
5096#lw $t0, 8($s2) #**InstVar
5100#subu $sp, $sp, 4
5104#sw $t0, ($sp)
# end: IdentifierExp at 236.19; stackHeight = 28
# begin: IdentifierExp at 236.36; stackHeight = 28
5108#lw $t0, 36($sp) #**LocalVar
5112#subu $sp, $sp, 8
5116#sw $s5, 4($sp)
5120#sw $t0, ($sp)
# end: IdentifierExp at 236.36; stackHeight = 36
# begin: IdentifierExp at 236.42; stackHeight = 36
5124#lw $t0, 40($sp) #**LocalVar
5128#subu $sp, $sp, 4
5132#sw $t0, ($sp)
# end: IdentifierExp at 236.42; stackHeight = 40
5136#lw $t0, 12($sp)
5140#sw $s2, 12($sp)
5144#move $s2, $t0
5148#beq $s2, $0, nullPtrException
5152#lw $t0, -12($s2)
5156#lw $t0, 56($t0)
5160#jalr $t0
5164#addu $sp, $sp, 12
5168#lw $s2, ($sp)
5172#addu $sp, $sp, 4
5176#subu $sp, $sp, 4
5180#sw $t0, ($sp)
# end: Call at 236.25; stackHeight = 28
5184#lw $t0, ($sp)
5188#addu $sp, $sp, 4
5192#lw $t1, ($sp)
5196#addu $sp, $sp, 4
5200#beq $t1, $0, nullPtrException
5204#sw $t0, 8($t1)
# end: Assign at 236.17; stackHeight = 20
# begin: Assign at 239.10; stackHeight = 20
# begin: Call at 239.20; stackHeight = 20
# begin: IdentifierExp at 239.12; stackHeight = 20
5208#lw $t0, 12($sp) #**LocalVar
5212#subu $sp, $sp, 4
5216#sw $t0, ($sp)
# end: IdentifierExp at 239.12; stackHeight = 24
# begin: True at 239.38; stackHeight = 24
5220#li $t0, 1
5224#subu $sp, $sp, 4
5228#sw $t0, ($sp)
# end: True at 239.38; stackHeight = 28
# begin: IdentifierExp at 239.44; stackHeight = 28
5232#lw $t0, 32($sp) #**LocalVar
5236#subu $sp, $sp, 4
5240#sw $t0, ($sp)
# end: IdentifierExp at 239.44; stackHeight = 32
5244#lw $t0, 8($sp)
5248#sw $s2, 8($sp)
5252#move $s2, $t0
5256#beq $s2, $0, nullPtrException
5260#lw $t0, -12($s2)
5264#lw $t0, 68($t0)
5268#jalr $t0
5272#addu $sp, $sp, 8
5276#lw $s2, ($sp)
5280#addu $sp, $sp, 4
5284#subu $sp, $sp, 4
5288#sw $t0, ($sp)
# end: Call at 239.20; stackHeight = 24
5292#lw $t0, ($sp)
5296#addu $sp, $sp, 4
5300#sw $t0, 16($sp)
# end: Assign at 239.10; stackHeight = 20
5304#addu $sp, $sp, 12
# end: Block at 222.11; stackHeight = 8
5308:if_done_410:
# end: If at 217.11; stackHeight = 8
5308:if_done_411:
# end: If at 205.6; stackHeight = 8
5308#addu $sp, $sp, 0
# end: Block at 204.25; stackHeight = 8
5312#j if_done_446
5316:if_else_446:
# begin: If at 242.7; stackHeight = 8
# begin: LessThan at 242.16; stackHeight = 8
# begin: IdentifierExp at 242.11; stackHeight = 8
5316#lw $t0, 16($sp) #**LocalVar
5320#subu $sp, $sp, 8
5324#sw $s5, 4($sp)
5328#sw $t0, ($sp)
# end: IdentifierExp at 242.11; stackHeight = 16
# begin: InstVarAccess at 242.22; stackHeight = 16
5332#subu $sp, $sp, 4
5336#sw $s2, ($sp)
5340#lw $t0, ($sp)
5344#addu $sp, $sp, 4
5348#beq $t0, $0, nullPtrException
5352#lw $t0, -64($t0)
5356#subu $sp, $sp, 8
5360#sw $s5, 4($sp)
5364#sw $t0, ($sp)
# end: InstVarAccess at 242.22; stackHeight = 24
5368#lw $t2, ($sp)
5372#addu $sp, $sp, 8
5376#lw $t1, ($sp)
5380#addu $sp, $sp, 8
5384#slt $t0, $t1, $t2
5388#subu $sp, $sp, 4
5392#sw $t0, ($sp)
# end: LessThan at 242.16; stackHeight = 12
5396#lw $t0, ($sp)
5400#addu $sp, $sp, 4
5404#beq $t0, $0, if_else_445
# begin: Block at 242.29; stackHeight = 8
# begin: Assign at 244.19; stackHeight = 8
# begin: IdentifierExp at 244.6; stackHeight = 8
5408#lw $t0, 0($sp) #**LocalVar
5412#subu $sp, $sp, 4
5416#sw $t0, ($sp)
# end: IdentifierExp at 244.6; stackHeight = 12
# begin: Call at 244.26; stackHeight = 12
# begin: IdentifierExp at 244.21; stackHeight = 12
5420#lw $t0, 4($s2) #**InstVar
5424#subu $sp, $sp, 4
5428#sw $t0, ($sp)
# end: IdentifierExp at 244.21; stackHeight = 16
# begin: IdentifierExp at 244.37; stackHeight = 16
5432#lw $t0, 24($sp) #**LocalVar
5436#subu $sp, $sp, 8
5440#sw $s5, 4($sp)
5444#sw $t0, ($sp)
# end: IdentifierExp at 244.37; stackHeight = 24
# begin: IdentifierExp at 244.43; stackHeight = 24
5448#lw $t0, 28($sp) #**LocalVar
5452#subu $sp, $sp, 4
5456#sw $t0, ($sp)
# end: IdentifierExp at 244.43; stackHeight = 28
5460#lw $t0, 12($sp)
5464#sw $s2, 12($sp)
5468#move $s2, $t0
5472#beq $s2, $0, nullPtrException
5476#lw $t0, -12($s2)
5480#lw $t0, 56($t0)
5484#jalr $t0
5488#addu $sp, $sp, 12
5492#lw $s2, ($sp)
5496#addu $sp, $sp, 4
5500#subu $sp, $sp, 4
5504#sw $t0, ($sp)
# end: Call at 244.26; stackHeight = 16
5508#lw $t0, ($sp)
5512#addu $sp, $sp, 4
5516#lw $t1, ($sp)
5520#addu $sp, $sp, 4
5524#beq $t1, $0, nullPtrException
5528#sw $t0, 4($t1)
# end: Assign at 244.19; stackHeight = 8
# begin: Assign at 245.13; stackHeight = 8
# begin: Call at 245.23; stackHeight = 8
# begin: IdentifierExp at 245.15; stackHeight = 8
5532#lw $t0, 0($sp) #**LocalVar
5536#subu $sp, $sp, 4
5540#sw $t0, ($sp)
# end: IdentifierExp at 245.15; stackHeight = 12
# begin: False at 245.41; stackHeight = 12
5544#subu $sp, $sp, 4
5548#sw $0, ($sp)
# end: False at 245.41; stackHeight = 16
# begin: IdentifierExp at 245.48; stackHeight = 16
5552#lw $t0, 20($sp) #**LocalVar
5556#subu $sp, $sp, 4
5560#sw $t0, ($sp)
# end: IdentifierExp at 245.48; stackHeight = 20
5564#lw $t0, 8($sp)
5568#sw $s2, 8($sp)
5572#move $s2, $t0
5576#beq $s2, $0, nullPtrException
5580#lw $t0, -12($s2)
5584#lw $t0, 68($t0)
5588#jalr $t0
5592#addu $sp, $sp, 8
5596#lw $s2, ($sp)
5600#addu $sp, $sp, 4
5604#subu $sp, $sp, 4
5608#sw $t0, ($sp)
# end: Call at 245.23; stackHeight = 12
5612#lw $t0, ($sp)
5616#addu $sp, $sp, 4
5620#sw $t0, 4($sp)
# end: Assign at 245.13; stackHeight = 8
5624#addu $sp, $sp, 0
# end: Block at 242.29; stackHeight = 8
5628#j if_done_445
5632:if_else_445:
# begin: Block at 247.7; stackHeight = 8
# begin: Assign at 249.20; stackHeight = 8
# begin: IdentifierExp at 249.6; stackHeight = 8
5632#lw $t0, 0($sp) #**LocalVar
5636#subu $sp, $sp, 4
5640#sw $t0, ($sp)
# end: IdentifierExp at 249.6; stackHeight = 12
# begin: Call at 249.28; stackHeight = 12
# begin: IdentifierExp at 249.22; stackHeight = 12
5644#lw $t0, 8($s2) #**InstVar
5648#subu $sp, $sp, 4
5652#sw $t0, ($sp)
# end: IdentifierExp at 249.22; stackHeight = 16
# begin: IdentifierExp at 249.39; stackHeight = 16
5656#lw $t0, 24($sp) #**LocalVar
5660#subu $sp, $sp, 8
5664#sw $s5, 4($sp)
5668#sw $t0, ($sp)
# end: IdentifierExp at 249.39; stackHeight = 24
# begin: IdentifierExp at 249.45; stackHeight = 24
5672#lw $t0, 28($sp) #**LocalVar
5676#subu $sp, $sp, 4
5680#sw $t0, ($sp)
# end: IdentifierExp at 249.45; stackHeight = 28
5684#lw $t0, 12($sp)
5688#sw $s2, 12($sp)
5692#move $s2, $t0
5696#beq $s2, $0, nullPtrException
5700#lw $t0, -12($s2)
5704#lw $t0, 56($t0)
5708#jalr $t0
5712#addu $sp, $sp, 12
5716#lw $s2, ($sp)
5720#addu $sp, $sp, 4
5724#subu $sp, $sp, 4
5728#sw $t0, ($sp)
# end: Call at 249.28; stackHeight = 16
5732#lw $t0, ($sp)
5736#addu $sp, $sp, 4
5740#lw $t1, ($sp)
5744#addu $sp, $sp, 4
5748#beq $t1, $0, nullPtrException
5752#sw $t0, 8($t1)
# end: Assign at 249.20; stackHeight = 8
# begin: Assign at 250.13; stackHeight = 8
# begin: Call at 250.23; stackHeight = 8
# begin: IdentifierExp at 250.15; stackHeight = 8
5756#lw $t0, 0($sp) #**LocalVar
5760#subu $sp, $sp, 4
5764#sw $t0, ($sp)
# end: IdentifierExp at 250.15; stackHeight = 12
# begin: True at 250.41; stackHeight = 12
5768#li $t0, 1
5772#subu $sp, $sp, 4
5776#sw $t0, ($sp)
# end: True at 250.41; stackHeight = 16
# begin: IdentifierExp at 250.47; stackHeight = 16
5780#lw $t0, 20($sp) #**LocalVar
5784#subu $sp, $sp, 4
5788#sw $t0, ($sp)
# end: IdentifierExp at 250.47; stackHeight = 20
5792#lw $t0, 8($sp)
5796#sw $s2, 8($sp)
5800#move $s2, $t0
5804#beq $s2, $0, nullPtrException
5808#lw $t0, -12($s2)
5812#lw $t0, 68($t0)
5816#jalr $t0
5820#addu $sp, $sp, 8
5824#lw $s2, ($sp)
5828#addu $sp, $sp, 4
5832#subu $sp, $sp, 4
5836#sw $t0, ($sp)
# end: Call at 250.23; stackHeight = 12
5840#lw $t0, ($sp)
5844#addu $sp, $sp, 4
5848#sw $t0, 4($sp)
# end: Assign at 250.13; stackHeight = 8
5852#addu $sp, $sp, 0
# end: Block at 247.7; stackHeight = 8
5856:if_done_445:
# end: If at 242.7; stackHeight = 8
5856:if_done_446:
# end: If at 204.2; stackHeight = 8
# begin: IdentifierExp at 253.9; stackHeight = 8
5856#lw $t0, 4($sp) #**LocalVar
5860#subu $sp, $sp, 4
5864#sw $t0, ($sp)
# end: IdentifierExp at 253.9; stackHeight = 12
5868#lw $t0, ($sp)
5872#addu $sp, $sp, 4
5876#addu $sp, $sp, 8
5880#lw $ra, ($sp)
5884#addu $sp, $sp, 4
5888#jr $ra
.globl mth_NonNullRedBlackTree_adjustAfterDelete
5892:mth_NonNullRedBlackTree_adjustAfterDelete:
5892#subu $sp, $sp, 4
5896#sw $ra, ($sp)
# begin: LocalVarDecl at 263.22; stackHeight = 0
5900#subu $sp, $sp, 4
5904#sw $s2, ($sp)
5908#lw $0, ($sp) #**rtnVal
# end: LocalVarDecl at 263.22; stackHeight = 4
# begin: If at 265.2; stackHeight = 4
# begin: ArrayLookup at 265.13; stackHeight = 4
# begin: IntegerLiteral at 265.14; stackHeight = 4
5912#li $t0, 0
5916#subu $sp, $sp, 8
5920#sw $s5, 4($sp)
5924#sw $t0, ($sp)
# end: IntegerLiteral at 265.14; stackHeight = 12
# begin: IdentifierExp at 265.6; stackHeight = 12
5928#lw $t0, 16($sp) #**LocalVar
5932#subu $sp, $sp, 4
5936#sw $t0, ($sp)
# end: IdentifierExp at 265.6; stackHeight = 16
5940#lw $t0, ($sp)
5944#addu $sp, $sp, 4
5948#lw $t1, ($sp)
5952#addu $sp, $sp, 8
5956#beq $t0, $0, nullPtrException
5960#lw $t3, -4($t0)
5964#bgeu $t1, $t3, arrayIndexOutOfBounds
5965##...sltu $at,$t1,$t3
5969##...beq $at,$zero,18532
5972#sll $t1, $t1, 2
5976#addu $t1, $t1, $t0
5980#lw $t0, ($t1)
5984#subu $sp, $sp, 4
5988#sw $t0, ($sp)
# end: ArrayLookup at 265.13; stackHeight = 8
5992#lw $t0, ($sp)
5996#addu $sp, $sp, 4
6000#beq $t0, $0, if_else_716
# begin: Block at 265.18; stackHeight = 4
# begin: Assign at 274.17; stackHeight = 4
# begin: IdentifierExp at 274.6; stackHeight = 4
6004#lw $t0, 8($sp) #**LocalVar
6008#subu $sp, $sp, 4
6012#sw $t0, ($sp)
# end: IdentifierExp at 274.6; stackHeight = 8
# begin: IntegerLiteral at 274.14; stackHeight = 8
6016#li $t0, 0
6020#subu $sp, $sp, 8
6024#sw $s5, 4($sp)
6028#sw $t0, ($sp)
# end: IntegerLiteral at 274.14; stackHeight = 16
# begin: False at 274.19; stackHeight = 16
6032#subu $sp, $sp, 4
6036#sw $0, ($sp)
# end: False at 274.19; stackHeight = 20
6040#lw $t0, ($sp)
6044#addu $sp, $sp, 4
6048#lw $t1, ($sp)
6052#addu $sp, $sp, 8
6056#lw $t2, ($sp)
6060#addu $sp, $sp, 4
6064#beq $t2, $0, nullPtrException
6068#lw $t3, -4($t2)
6072#bgeu $t1, $t3, arrayIndexOutOfBounds
6073##...sltu $at,$t1,$t3
6077##...beq $at,$zero,18532
6080#sll $t1, $t1, 2
6084#addu $t1, $t1, $t2
6088#sw $t0, ($t1)
# end: Assign at 274.17; stackHeight = 4
# begin: LocalVarDecl at 277.26; stackHeight = 4
6092#subu $sp, $sp, 4
6096#sw $s2, ($sp)
6100#lw $0, ($sp) #**parent
# end: LocalVarDecl at 277.26; stackHeight = 8
# begin: LocalVarDecl at 278.26; stackHeight = 8
# begin: Call at 279.34; stackHeight = 8
# begin: Call at 279.10; stackHeight = 8
# begin: IdentifierExp at 279.3; stackHeight = 8
6104#lw $t0, 0($sp) #**LocalVar
6108#subu $sp, $sp, 4
6112#sw $t0, ($sp)
# end: IdentifierExp at 279.3; stackHeight = 12
# begin: IdentifierExp at 279.19; stackHeight = 12
6116#lw $t0, 20($sp) #**LocalVar
6120#subu $sp, $sp, 4
6124#sw $t0, ($sp)
# end: IdentifierExp at 279.19; stackHeight = 16
6128#lw $t0, 4($sp)
6132#sw $s2, 4($sp)
6136#move $s2, $t0
6140#beq $s2, $0, nullPtrException
6144#lw $t0, -12($s2)
6148#lw $t0, 72($t0)
6152#jalr $t0
6156#addu $sp, $sp, 4
6160#lw $s2, ($sp)
6164#addu $sp, $sp, 4
6168#subu $sp, $sp, 4
6172#sw $t0, ($sp)
# end: Call at 279.10; stackHeight = 12
6176#lw $t0, 0($sp)
6180#sw $s2, 0($sp)
6184#move $s2, $t0
6188#beq $s2, $0, nullPtrException
6192#lw $t0, -12($s2)
6196#lw $t0, 36($t0)
6200#jalr $t0
6204#addu $sp, $sp, 0
6208#lw $s2, ($sp)
6212#addu $sp, $sp, 4
6216#subu $sp, $sp, 4
6220#sw $t0, ($sp)
# end: Call at 279.34; stackHeight = 12
6224#lw $0, ($sp) #**sibling
# end: LocalVarDecl at 278.26; stackHeight = 12
# begin: LocalVarDecl at 280.19; stackHeight = 12
# begin: Call at 280.41; stackHeight = 12
# begin: IdentifierExp at 280.33; stackHeight = 12
6228#lw $t0, 0($sp) #**LocalVar
6232#subu $sp, $sp, 4
6236#sw $t0, ($sp)
# end: IdentifierExp at 280.33; stackHeight = 16
# begin: IdentifierExp at 280.49; stackHeight = 16
6240#lw $t0, 24($sp) #**LocalVar
6244#subu $sp, $sp, 4
6248#sw $t0, ($sp)
# end: IdentifierExp at 280.49; stackHeight = 20
6252#lw $t0, 4($sp)
6256#sw $s2, 4($sp)
6260#move $s2, $t0
6264#beq $s2, $0, nullPtrException
6268#lw $t0, -12($s2)
6272#lw $t0, 76($t0)
6276#jalr $t0
6280#addu $sp, $sp, 4
6284#lw $s2, ($sp)
6288#addu $sp, $sp, 4
6292#subu $sp, $sp, 4
6296#sw $t0, ($sp)
# end: Call at 280.41; stackHeight = 16
6300#lw $0, ($sp) #**innerNephew
# end: LocalVarDecl at 280.19; stackHeight = 16
# begin: LocalVarDecl at 281.19; stackHeight = 16
# begin: Call at 281.41; stackHeight = 16
# begin: IdentifierExp at 281.33; stackHeight = 16
6304#lw $t0, 4($sp) #**LocalVar
6308#subu $sp, $sp, 4
6312#sw $t0, ($sp)
# end: IdentifierExp at 281.33; stackHeight = 20
# begin: IdentifierExp at 281.50; stackHeight = 20
6316#lw $t0, 28($sp) #**LocalVar
6320#subu $sp, $sp, 4
6324#sw $t0, ($sp)
# end: IdentifierExp at 281.50; stackHeight = 24
6328#lw $t0, 4($sp)
6332#sw $s2, 4($sp)
6336#move $s2, $t0
6340#beq $s2, $0, nullPtrException
6344#lw $t0, -12($s2)
6348#lw $t0, 72($t0)
6352#jalr $t0
6356#addu $sp, $sp, 4
6360#lw $s2, ($sp)
6364#addu $sp, $sp, 4
6368#subu $sp, $sp, 4
6372#sw $t0, ($sp)
# end: Call at 281.41; stackHeight = 20
6376#lw $0, ($sp) #**outerNephew
# end: LocalVarDecl at 281.19; stackHeight = 20
# begin: If at 284.6; stackHeight = 20
# begin: Call at 284.17; stackHeight = 20
# begin: IdentifierExp at 284.10; stackHeight = 20
6380#lw $t0, 12($sp) #**LocalVar
6384#subu $sp, $sp, 4
6388#sw $t0, ($sp)
# end: IdentifierExp at 284.10; stackHeight = 24
6392#lw $t0, 0($sp)
6396#sw $s2, 0($sp)
6400#move $s2, $t0
6404#beq $s2, $0, nullPtrException
6408#lw $t0, -12($s2)
6412#lw $t0, 24($t0)
6416#jalr $t0
6420#addu $sp, $sp, 0
6424#lw $s2, ($sp)
6428#addu $sp, $sp, 4
6432#subu $sp, $sp, 4
6436#sw $t0, ($sp)
# end: Call at 284.17; stackHeight = 24
6440#lw $t0, ($sp)
6444#addu $sp, $sp, 4
6448#beq $t0, $0, if_else_713
# begin: Block at 284.26; stackHeight = 20
# begin: If at 285.3; stackHeight = 20
# begin: Call at 285.19; stackHeight = 20
# begin: IdentifierExp at 285.7; stackHeight = 20
6452#lw $t0, 4($sp) #**LocalVar
6456#subu $sp, $sp, 4
6460#sw $t0, ($sp)
# end: IdentifierExp at 285.7; stackHeight = 24
6464#lw $t0, 0($sp)
6468#sw $s2, 0($sp)
6472#move $s2, $t0
6476#beq $s2, $0, nullPtrException
6480#lw $t0, -12($s2)
6484#lw $t0, 16($t0)
6488#jalr $t0
6492#addu $sp, $sp, 0
6496#lw $s2, ($sp)
6500#addu $sp, $sp, 4
6504#subu $sp, $sp, 4
6508#sw $t0, ($sp)
# end: Call at 285.19; stackHeight = 24
6512#lw $t0, ($sp)
6516#addu $sp, $sp, 4
6520#beq $t0, $0, if_else_573
# begin: Block at 285.30; stackHeight = 20
# begin: CallStatement at 287.14; stackHeight = 20
# begin: Call at 287.14; stackHeight = 20
# begin: IdentifierExp at 287.7; stackHeight = 20
6524#lw $t0, 12($sp) #**LocalVar
6528#subu $sp, $sp, 4
6532#sw $t0, ($sp)
# end: IdentifierExp at 287.7; stackHeight = 24
# begin: IdentifierExp at 287.23; stackHeight = 24
6536#lw $t0, 8($sp) #**LocalVar
6540#subu $sp, $sp, 4
6544#sw $t0, ($sp)
# end: IdentifierExp at 287.23; stackHeight = 28
# begin: IdentifierExp at 287.36; stackHeight = 28
6548#lw $t0, 36($sp) #**LocalVar
6552#subu $sp, $sp, 4
6556#sw $t0, ($sp)
# end: IdentifierExp at 287.36; stackHeight = 32
6560#lw $t0, 8($sp)
6564#sw $s2, 8($sp)
6568#move $s2, $t0
6572#beq $s2, $0, nullPtrException
6576#lw $t0, -12($s2)
6580#lw $t0, 80($t0)
6584#jalr $t0
6588#addu $sp, $sp, 8
6592#lw $s2, ($sp)
6596#addu $sp, $sp, 4
6600#subu $sp, $sp, 4
6604#sw $t0, ($sp)
# end: Call at 287.14; stackHeight = 24
6608#lw $t0, ($sp)
6612#addu $sp, $sp, 4
# end: CallStatement at 287.14; stackHeight = 20
# begin: CallStatement at 288.15; stackHeight = 20
# begin: Call at 288.15; stackHeight = 20
# begin: IdentifierExp at 288.7; stackHeight = 20
6616#lw $t0, 8($sp) #**LocalVar
6620#subu $sp, $sp, 4
6624#sw $t0, ($sp)
# end: IdentifierExp at 288.7; stackHeight = 24
# begin: IdentifierExp at 288.23; stackHeight = 24
6628#lw $t0, 16($sp) #**LocalVar
6632#subu $sp, $sp, 4
6636#sw $t0, ($sp)
# end: IdentifierExp at 288.23; stackHeight = 28
# begin: IdentifierExp at 288.31; stackHeight = 28
6640#lw $t0, 36($sp) #**LocalVar
6644#subu $sp, $sp, 4
6648#sw $t0, ($sp)
# end: IdentifierExp at 288.31; stackHeight = 32
6652#lw $t0, 8($sp)
6656#sw $s2, 8($sp)
6660#move $s2, $t0
6664#beq $s2, $0, nullPtrException
6668#lw $t0, -12($s2)
6672#lw $t0, 84($t0)
6676#jalr $t0
6680#addu $sp, $sp, 8
6684#lw $s2, ($sp)
6688#addu $sp, $sp, 4
6692#subu $sp, $sp, 4
6696#sw $t0, ($sp)
# end: Call at 288.15; stackHeight = 24
6700#lw $t0, ($sp)
6704#addu $sp, $sp, 4
# end: CallStatement at 288.15; stackHeight = 20
# begin: Assign at 289.14; stackHeight = 20
# begin: IdentifierExp at 289.16; stackHeight = 20
6708#lw $t0, 8($sp) #**LocalVar
6712#subu $sp, $sp, 4
6716#sw $t0, ($sp)
# end: IdentifierExp at 289.16; stackHeight = 24
6720#lw $t0, ($sp)
6724#addu $sp, $sp, 4
6728#sw $t0, 16($sp)
# end: Assign at 289.14; stackHeight = 20
6732#addu $sp, $sp, 0
# end: Block at 285.30; stackHeight = 20
6736#j if_done_573
6740:if_else_573:
# begin: If at 291.8; stackHeight = 20
# begin: Call at 291.24; stackHeight = 20
# begin: IdentifierExp at 291.12; stackHeight = 20
6740#lw $t0, 0($sp) #**LocalVar
6744#subu $sp, $sp, 4
6748#sw $t0, ($sp)
# end: IdentifierExp at 291.12; stackHeight = 24
6752#lw $t0, 0($sp)
6756#sw $s2, 0($sp)
6760#move $s2, $t0
6764#beq $s2, $0, nullPtrException
6768#lw $t0, -12($s2)
6772#lw $t0, 24($t0)
6776#jalr $t0
6780#addu $sp, $sp, 0
6784#lw $s2, ($sp)
6788#addu $sp, $sp, 4
6792#subu $sp, $sp, 4
6796#sw $t0, ($sp)
# end: Call at 291.24; stackHeight = 24
6800#lw $t0, ($sp)
6804#addu $sp, $sp, 4
6808#beq $t0, $0, if_else_572
# begin: Block at 291.33; stackHeight = 20
# begin: CallStatement at 293.14; stackHeight = 20
# begin: Call at 293.14; stackHeight = 20
# begin: IdentifierExp at 293.7; stackHeight = 20
6812#lw $t0, 12($sp) #**LocalVar
6816#subu $sp, $sp, 4
6820#sw $t0, ($sp)
# end: IdentifierExp at 293.7; stackHeight = 24
# begin: IdentifierExp at 293.23; stackHeight = 24
6824#lw $t0, 8($sp) #**LocalVar
6828#subu $sp, $sp, 4
6832#sw $t0, ($sp)
# end: IdentifierExp at 293.23; stackHeight = 28
# begin: IdentifierExp at 293.36; stackHeight = 28
6836#lw $t0, 36($sp) #**LocalVar
6840#subu $sp, $sp, 4
6844#sw $t0, ($sp)
# end: IdentifierExp at 293.36; stackHeight = 32
6848#lw $t0, 8($sp)
6852#sw $s2, 8($sp)
6856#move $s2, $t0
6860#beq $s2, $0, nullPtrException
6864#lw $t0, -12($s2)
6868#lw $t0, 80($t0)
6872#jalr $t0
6876#addu $sp, $sp, 8
6880#lw $s2, ($sp)
6884#addu $sp, $sp, 4
6888#subu $sp, $sp, 4
6892#sw $t0, ($sp)
# end: Call at 293.14; stackHeight = 24
6896#lw $t0, ($sp)
6900#addu $sp, $sp, 4
# end: CallStatement at 293.14; stackHeight = 20
# begin: CallStatement at 294.15; stackHeight = 20
# begin: Call at 294.15; stackHeight = 20
# begin: IdentifierExp at 294.7; stackHeight = 20
6904#lw $t0, 8($sp) #**LocalVar
6908#subu $sp, $sp, 4
6912#sw $t0, ($sp)
# end: IdentifierExp at 294.7; stackHeight = 24
# begin: IdentifierExp at 294.23; stackHeight = 24
6916#lw $t0, 16($sp) #**LocalVar
6920#subu $sp, $sp, 4
6924#sw $t0, ($sp)
# end: IdentifierExp at 294.23; stackHeight = 28
# begin: IdentifierExp at 294.31; stackHeight = 28
6928#lw $t0, 36($sp) #**LocalVar
6932#subu $sp, $sp, 4
6936#sw $t0, ($sp)
# end: IdentifierExp at 294.31; stackHeight = 32
6940#lw $t0, 8($sp)
6944#sw $s2, 8($sp)
6948#move $s2, $t0
6952#beq $s2, $0, nullPtrException
6956#lw $t0, -12($s2)
6960#lw $t0, 84($t0)
6964#jalr $t0
6968#addu $sp, $sp, 8
6972#lw $s2, ($sp)
6976#addu $sp, $sp, 4
6980#subu $sp, $sp, 4
6984#sw $t0, ($sp)
# end: Call at 294.15; stackHeight = 24
6988#lw $t0, ($sp)
6992#addu $sp, $sp, 4
# end: CallStatement at 294.15; stackHeight = 20
# begin: CallStatement at 295.14; stackHeight = 20
# begin: Call at 295.14; stackHeight = 20
# begin: IdentifierExp at 295.7; stackHeight = 20
6996#lw $t0, 12($sp) #**LocalVar
7000#subu $sp, $sp, 4
7004#sw $t0, ($sp)
# end: IdentifierExp at 295.7; stackHeight = 24
7008#lw $t0, 0($sp)
7012#sw $s2, 0($sp)
7016#move $s2, $t0
7020#beq $s2, $0, nullPtrException
7024#lw $t0, -12($s2)
7028#lw $t0, 20($t0)
7032#jalr $t0
7036#addu $sp, $sp, 0
7040#lw $s2, ($sp)
7044#addu $sp, $sp, 4
7048#subu $sp, $sp, 4
7052#sw $t0, ($sp)
# end: Call at 295.14; stackHeight = 24
7056#lw $t0, ($sp)
7060#addu $sp, $sp, 4
# end: CallStatement at 295.14; stackHeight = 20
# begin: CallStatement at 296.15; stackHeight = 20
# begin: Call at 296.15; stackHeight = 20
# begin: IdentifierExp at 296.7; stackHeight = 20
7064#lw $t0, 8($sp) #**LocalVar
7068#subu $sp, $sp, 4
7072#sw $t0, ($sp)
# end: IdentifierExp at 296.7; stackHeight = 24
7076#lw $t0, 0($sp)
7080#sw $s2, 0($sp)
7084#move $s2, $t0
7088#beq $s2, $0, nullPtrException
7092#lw $t0, -12($s2)
7096#lw $t0, 60($t0)
7100#jalr $t0
7104#addu $sp, $sp, 0
7108#lw $s2, ($sp)
7112#addu $sp, $sp, 4
7116#subu $sp, $sp, 4
7120#sw $t0, ($sp)
# end: Call at 296.15; stackHeight = 24
7124#lw $t0, ($sp)
7128#addu $sp, $sp, 4
# end: CallStatement at 296.15; stackHeight = 20
# begin: CallStatement at 297.19; stackHeight = 20
# begin: Call at 297.19; stackHeight = 20
# begin: IdentifierExp at 297.7; stackHeight = 20
7132#lw $t0, 0($sp) #**LocalVar
7136#subu $sp, $sp, 4
7140#sw $t0, ($sp)
# end: IdentifierExp at 297.7; stackHeight = 24
7144#lw $t0, 0($sp)
7148#sw $s2, 0($sp)
7152#move $s2, $t0
7156#beq $s2, $0, nullPtrException
7160#lw $t0, -12($s2)
7164#lw $t0, 20($t0)
7168#jalr $t0
7172#addu $sp, $sp, 0
7176#lw $s2, ($sp)
7180#addu $sp, $sp, 4
7184#subu $sp, $sp, 4
7188#sw $t0, ($sp)
# end: Call at 297.19; stackHeight = 24
7192#lw $t0, ($sp)
7196#addu $sp, $sp, 4
# end: CallStatement at 297.19; stackHeight = 20
# begin: Assign at 298.14; stackHeight = 20
# begin: IdentifierExp at 298.16; stackHeight = 20
7200#lw $t0, 8($sp) #**LocalVar
7204#subu $sp, $sp, 4
7208#sw $t0, ($sp)
# end: IdentifierExp at 298.16; stackHeight = 24
7212#lw $t0, ($sp)
7216#addu $sp, $sp, 4
7220#sw $t0, 16($sp)
# end: Assign at 298.14; stackHeight = 20
7224#addu $sp, $sp, 0
# end: Block at 291.33; stackHeight = 20
7228#j if_done_572
7232:if_else_572:
# begin: Block at 300.8; stackHeight = 20
# begin: LocalVarDecl at 302.27; stackHeight = 20
# begin: Call at 302.60; stackHeight = 20
# begin: IdentifierExp at 302.48; stackHeight = 20
7232#lw $t0, 4($sp) #**LocalVar
7236#subu $sp, $sp, 4
7240#sw $t0, ($sp)
# end: IdentifierExp at 302.48; stackHeight = 24
7244#lw $t0, 0($sp)
7248#sw $s2, 0($sp)
7252#move $s2, $t0
7256#beq $s2, $0, nullPtrException
7260#lw $t0, -12($s2)
7264#lw $t0, 36($t0)
7268#jalr $t0
7272#addu $sp, $sp, 0
7276#lw $s2, ($sp)
7280#addu $sp, $sp, 4
7284#subu $sp, $sp, 4
7288#sw $t0, ($sp)
# end: Call at 302.60; stackHeight = 24
7292#lw $0, ($sp) #**innerNephewNonNull
# end: LocalVarDecl at 302.27; stackHeight = 24
# begin: CallStatement at 303.14; stackHeight = 24
# begin: Call at 303.14; stackHeight = 24
# begin: IdentifierExp at 303.7; stackHeight = 24
7296#lw $t0, 16($sp) #**LocalVar
7300#subu $sp, $sp, 4
7304#sw $t0, ($sp)
# end: IdentifierExp at 303.7; stackHeight = 28
# begin: Call at 303.42; stackHeight = 28
# begin: IdentifierExp at 303.23; stackHeight = 28
7308#lw $t0, 4($sp) #**LocalVar
7312#subu $sp, $sp, 4
7316#sw $t0, ($sp)
# end: IdentifierExp at 303.23; stackHeight = 32
# begin: IdentifierExp at 303.50; stackHeight = 32
7320#lw $t0, 40($sp) #**LocalVar
7324#subu $sp, $sp, 4
7328#sw $t0, ($sp)
# end: IdentifierExp at 303.50; stackHeight = 36
7332#lw $t0, 4($sp)
7336#sw $s2, 4($sp)
7340#move $s2, $t0
7344#beq $s2, $0, nullPtrException
7348#lw $t0, -12($s2)
7352#lw $t0, 76($t0)
7356#jalr $t0
7360#addu $sp, $sp, 4
7364#lw $s2, ($sp)
7368#addu $sp, $sp, 4
7372#subu $sp, $sp, 4
7376#sw $t0, ($sp)
# end: Call at 303.42; stackHeight = 32
# begin: IdentifierExp at 304.9; stackHeight = 32
7380#lw $t0, 40($sp) #**LocalVar
7384#subu $sp, $sp, 4
7388#sw $t0, ($sp)
# end: IdentifierExp at 304.9; stackHeight = 36
7392#lw $t0, 8($sp)
7396#sw $s2, 8($sp)
7400#move $s2, $t0
7404#beq $s2, $0, nullPtrException
7408#lw $t0, -12($s2)
7412#lw $t0, 80($t0)
7416#jalr $t0
7420#addu $sp, $sp, 8
7424#lw $s2, ($sp)
7428#addu $sp, $sp, 4
7432#subu $sp, $sp, 4
7436#sw $t0, ($sp)
# end: Call at 303.14; stackHeight = 28
7440#lw $t0, ($sp)
7444#addu $sp, $sp, 4
# end: CallStatement at 303.14; stackHeight = 24
# begin: CallStatement at 305.15; stackHeight = 24
# begin: Call at 305.15; stackHeight = 24
# begin: IdentifierExp at 305.7; stackHeight = 24
7448#lw $t0, 12($sp) #**LocalVar
7452#subu $sp, $sp, 4
7456#sw $t0, ($sp)
# end: IdentifierExp at 305.7; stackHeight = 28
# begin: Call at 305.42; stackHeight = 28
# begin: IdentifierExp at 305.23; stackHeight = 28
7460#lw $t0, 4($sp) #**LocalVar
7464#subu $sp, $sp, 4
7468#sw $t0, ($sp)
# end: IdentifierExp at 305.23; stackHeight = 32
# begin: IdentifierExp at 305.51; stackHeight = 32
7472#lw $t0, 40($sp) #**LocalVar
7476#subu $sp, $sp, 4
7480#sw $t0, ($sp)
# end: IdentifierExp at 305.51; stackHeight = 36
7484#lw $t0, 4($sp)
7488#sw $s2, 4($sp)
7492#move $s2, $t0
7496#beq $s2, $0, nullPtrException
7500#lw $t0, -12($s2)
7504#lw $t0, 72($t0)
7508#jalr $t0
7512#addu $sp, $sp, 4
7516#lw $s2, ($sp)
7520#addu $sp, $sp, 4
7524#subu $sp, $sp, 4
7528#sw $t0, ($sp)
# end: Call at 305.42; stackHeight = 32
# begin: IdentifierExp at 306.9; stackHeight = 32
7532#lw $t0, 40($sp) #**LocalVar
7536#subu $sp, $sp, 4
7540#sw $t0, ($sp)
# end: IdentifierExp at 306.9; stackHeight = 36
7544#lw $t0, 8($sp)
7548#sw $s2, 8($sp)
7552#move $s2, $t0
7556#beq $s2, $0, nullPtrException
7560#lw $t0, -12($s2)
7564#lw $t0, 84($t0)
7568#jalr $t0
7572#addu $sp, $sp, 8
7576#lw $s2, ($sp)
7580#addu $sp, $sp, 4
7584#subu $sp, $sp, 4
7588#sw $t0, ($sp)
# end: Call at 305.15; stackHeight = 28
7592#lw $t0, ($sp)
7596#addu $sp, $sp, 4
# end: CallStatement at 305.15; stackHeight = 24
# begin: CallStatement at 307.26; stackHeight = 24
# begin: Call at 307.26; stackHeight = 24
# begin: IdentifierExp at 307.7; stackHeight = 24
7600#lw $t0, 0($sp) #**LocalVar
7604#subu $sp, $sp, 4
7608#sw $t0, ($sp)
# end: IdentifierExp at 307.7; stackHeight = 28
# begin: IdentifierExp at 307.34; stackHeight = 28
7612#lw $t0, 20($sp) #**LocalVar
7616#subu $sp, $sp, 4
7620#sw $t0, ($sp)
# end: IdentifierExp at 307.34; stackHeight = 32
# begin: IdentifierExp at 307.42; stackHeight = 32
7624#lw $t0, 40($sp) #**LocalVar
7628#subu $sp, $sp, 4
7632#sw $t0, ($sp)
# end: IdentifierExp at 307.42; stackHeight = 36
7636#lw $t0, 8($sp)
7640#sw $s2, 8($sp)
7644#move $s2, $t0
7648#beq $s2, $0, nullPtrException
7652#lw $t0, -12($s2)
7656#lw $t0, 84($t0)
7660#jalr $t0
7664#addu $sp, $sp, 8
7668#lw $s2, ($sp)
7672#addu $sp, $sp, 4
7676#subu $sp, $sp, 4
7680#sw $t0, ($sp)
# end: Call at 307.26; stackHeight = 28
7684#lw $t0, ($sp)
7688#addu $sp, $sp, 4
# end: CallStatement at 307.26; stackHeight = 24
# begin: CallStatement at 308.26; stackHeight = 24
# begin: Call at 308.26; stackHeight = 24
# begin: IdentifierExp at 308.7; stackHeight = 24
7692#lw $t0, 0($sp) #**LocalVar
7696#subu $sp, $sp, 4
7700#sw $t0, ($sp)
# end: IdentifierExp at 308.7; stackHeight = 28
# begin: IdentifierExp at 308.35; stackHeight = 28
7704#lw $t0, 16($sp) #**LocalVar
7708#subu $sp, $sp, 4
7712#sw $t0, ($sp)
# end: IdentifierExp at 308.35; stackHeight = 32
# begin: IdentifierExp at 308.44; stackHeight = 32
7716#lw $t0, 40($sp) #**LocalVar
7720#subu $sp, $sp, 4
7724#sw $t0, ($sp)
# end: IdentifierExp at 308.44; stackHeight = 36
7728#lw $t0, 8($sp)
7732#sw $s2, 8($sp)
7736#move $s2, $t0
7740#beq $s2, $0, nullPtrException
7744#lw $t0, -12($s2)
7748#lw $t0, 80($t0)
7752#jalr $t0
7756#addu $sp, $sp, 8
7760#lw $s2, ($sp)
7764#addu $sp, $sp, 4
7768#subu $sp, $sp, 4
7772#sw $t0, ($sp)
# end: Call at 308.26; stackHeight = 28
7776#lw $t0, ($sp)
7780#addu $sp, $sp, 4
# end: CallStatement at 308.26; stackHeight = 24
# begin: CallStatement at 309.15; stackHeight = 24
# begin: Call at 309.15; stackHeight = 24
# begin: IdentifierExp at 309.7; stackHeight = 24
7784#lw $t0, 12($sp) #**LocalVar
7788#subu $sp, $sp, 4
7792#sw $t0, ($sp)
# end: IdentifierExp at 309.7; stackHeight = 28
7796#lw $t0, 0($sp)
7800#sw $s2, 0($sp)
7804#move $s2, $t0
7808#beq $s2, $0, nullPtrException
7812#lw $t0, -12($s2)
7816#lw $t0, 60($t0)
7820#jalr $t0
7824#addu $sp, $sp, 0
7828#lw $s2, ($sp)
7832#addu $sp, $sp, 4
7836#subu $sp, $sp, 4
7840#sw $t0, ($sp)
# end: Call at 309.15; stackHeight = 28
7844#lw $t0, ($sp)
7848#addu $sp, $sp, 4
# end: CallStatement at 309.15; stackHeight = 24
# begin: CallStatement at 310.19; stackHeight = 24
# begin: Call at 310.19; stackHeight = 24
# begin: IdentifierExp at 310.7; stackHeight = 24
7852#lw $t0, 8($sp) #**LocalVar
7856#subu $sp, $sp, 4
7860#sw $t0, ($sp)
# end: IdentifierExp at 310.7; stackHeight = 28
7864#lw $t0, 0($sp)
7868#sw $s2, 0($sp)
7872#move $s2, $t0
7876#beq $s2, $0, nullPtrException
7880#lw $t0, -12($s2)
7884#lw $t0, 20($t0)
7888#jalr $t0
7892#addu $sp, $sp, 0
7896#lw $s2, ($sp)
7900#addu $sp, $sp, 4
7904#subu $sp, $sp, 4
7908#sw $t0, ($sp)
# end: Call at 310.19; stackHeight = 28
7912#lw $t0, ($sp)
7916#addu $sp, $sp, 4
# end: CallStatement at 310.19; stackHeight = 24
# begin: Assign at 311.14; stackHeight = 24
# begin: IdentifierExp at 311.16; stackHeight = 24
7920#lw $t0, 12($sp) #**LocalVar
7924#subu $sp, $sp, 4
7928#sw $t0, ($sp)
# end: IdentifierExp at 311.16; stackHeight = 28
7932#lw $t0, ($sp)
7936#addu $sp, $sp, 4
7940#sw $t0, 20($sp)
# end: Assign at 311.14; stackHeight = 24
7944#addu $sp, $sp, 4
# end: Block at 300.8; stackHeight = 20
7948:if_done_572:
# end: If at 291.8; stackHeight = 20
7948:if_done_573:
# end: If at 285.3; stackHeight = 20
7948#addu $sp, $sp, 0
# end: Block at 284.26; stackHeight = 20
7952#j if_done_713
7956:if_else_713:
# begin: If at 314.11; stackHeight = 20
# begin: Call at 314.23; stackHeight = 20
# begin: IdentifierExp at 314.15; stackHeight = 20
7956#lw $t0, 8($sp) #**LocalVar
7960#subu $sp, $sp, 4
7964#sw $t0, ($sp)
# end: IdentifierExp at 314.15; stackHeight = 24
7968#lw $t0, 0($sp)
7972#sw $s2, 0($sp)
7976#move $s2, $t0
7980#beq $s2, $0, nullPtrException
7984#lw $t0, -12($s2)
7988#lw $t0, 24($t0)
7992#jalr $t0
7996#addu $sp, $sp, 0
8000#lw $s2, ($sp)
8004#addu $sp, $sp, 4
8008#subu $sp, $sp, 4
8012#sw $t0, ($sp)
# end: Call at 314.23; stackHeight = 24
8016#lw $t0, ($sp)
8020#addu $sp, $sp, 4
8024#beq $t0, $0, if_else_712
# begin: Block at 314.32; stackHeight = 20
# begin: LocalVarDecl at 315.23; stackHeight = 20
# begin: Call at 315.56; stackHeight = 20
# begin: IdentifierExp at 315.44; stackHeight = 20
8028#lw $t0, 4($sp) #**LocalVar
8032#subu $sp, $sp, 4
8036#sw $t0, ($sp)
# end: IdentifierExp at 315.44; stackHeight = 24
8040#lw $t0, 0($sp)
8044#sw $s2, 0($sp)
8048#move $s2, $t0
8052#beq $s2, $0, nullPtrException
8056#lw $t0, -12($s2)
8060#lw $t0, 36($t0)
8064#jalr $t0
8068#addu $sp, $sp, 0
8072#lw $s2, ($sp)
8076#addu $sp, $sp, 4
8080#subu $sp, $sp, 4
8084#sw $t0, ($sp)
# end: Call at 315.56; stackHeight = 24
8088#lw $0, ($sp) #**innerNephewNonNull
# end: LocalVarDecl at 315.23; stackHeight = 24
# begin: LocalVarDecl at 316.16; stackHeight = 24
# begin: Call at 317.26; stackHeight = 24
# begin: IdentifierExp at 317.7; stackHeight = 24
8092#lw $t0, 0($sp) #**LocalVar
8096#subu $sp, $sp, 4
8100#sw $t0, ($sp)
# end: IdentifierExp at 317.7; stackHeight = 28
# begin: IdentifierExp at 317.34; stackHeight = 28
8104#lw $t0, 36($sp) #**LocalVar
8108#subu $sp, $sp, 4
8112#sw $t0, ($sp)
# end: IdentifierExp at 317.34; stackHeight = 32
8116#lw $t0, 4($sp)
8120#sw $s2, 4($sp)
8124#move $s2, $t0
8128#beq $s2, $0, nullPtrException
8132#lw $t0, -12($s2)
8136#lw $t0, 76($t0)
8140#jalr $t0
8144#addu $sp, $sp, 4
8148#lw $s2, ($sp)
8152#addu $sp, $sp, 4
8156#subu $sp, $sp, 4
8160#sw $t0, ($sp)
# end: Call at 317.26; stackHeight = 28
8164#lw $0, ($sp) #**innerGrandNephew
# end: LocalVarDecl at 316.16; stackHeight = 28
# begin: If at 318.3; stackHeight = 28
# begin: Call at 318.24; stackHeight = 28
# begin: IdentifierExp at 318.7; stackHeight = 28
8168#lw $t0, 0($sp) #**LocalVar
8172#subu $sp, $sp, 4
8176#sw $t0, ($sp)
# end: IdentifierExp at 318.7; stackHeight = 32
8180#lw $t0, 0($sp)
8184#sw $s2, 0($sp)
8188#move $s2, $t0
8192#beq $s2, $0, nullPtrException
8196#lw $t0, -12($s2)
8200#lw $t0, 24($t0)
8204#jalr $t0
8208#addu $sp, $sp, 0
8212#lw $s2, ($sp)
8216#addu $sp, $sp, 4
8220#subu $sp, $sp, 4
8224#sw $t0, ($sp)
# end: Call at 318.24; stackHeight = 32
8228#lw $t0, ($sp)
8232#addu $sp, $sp, 4
8236#beq $t0, $0, if_else_638
# begin: Block at 318.33; stackHeight = 28
# begin: LocalVarDecl at 320.27; stackHeight = 28
# begin: Call at 321.21; stackHeight = 28
# begin: IdentifierExp at 321.4; stackHeight = 28
8240#lw $t0, 0($sp) #**LocalVar
8244#subu $sp, $sp, 4
8248#sw $t0, ($sp)
# end: IdentifierExp at 321.4; stackHeight = 32
8252#lw $t0, 0($sp)
8256#sw $s2, 0($sp)
8260#move $s2, $t0
8264#beq $s2, $0, nullPtrException
8268#lw $t0, -12($s2)
8272#lw $t0, 36($t0)
8276#jalr $t0
8280#addu $sp, $sp, 0
8284#lw $s2, ($sp)
8288#addu $sp, $sp, 4
8292#subu $sp, $sp, 4
8296#sw $t0, ($sp)
# end: Call at 321.21; stackHeight = 32
8300#lw $0, ($sp) #**innerGrandNephewNonNull
# end: LocalVarDecl at 320.27; stackHeight = 32
# begin: CallStatement at 322.14; stackHeight = 32
# begin: Call at 322.14; stackHeight = 32
# begin: IdentifierExp at 322.7; stackHeight = 32
8304#lw $t0, 24($sp) #**LocalVar
8308#subu $sp, $sp, 4
8312#sw $t0, ($sp)
# end: IdentifierExp at 322.7; stackHeight = 36
# begin: Call at 322.47; stackHeight = 36
# begin: IdentifierExp at 322.23; stackHeight = 36
8316#lw $t0, 4($sp) #**LocalVar
8320#subu $sp, $sp, 4
8324#sw $t0, ($sp)
# end: IdentifierExp at 322.23; stackHeight = 40
# begin: IdentifierExp at 322.55; stackHeight = 40
8328#lw $t0, 48($sp) #**LocalVar
8332#subu $sp, $sp, 4
8336#sw $t0, ($sp)
# end: IdentifierExp at 322.55; stackHeight = 44
8340#lw $t0, 4($sp)
8344#sw $s2, 4($sp)
8348#move $s2, $t0
8352#beq $s2, $0, nullPtrException
8356#lw $t0, -12($s2)
8360#lw $t0, 76($t0)
8364#jalr $t0
8368#addu $sp, $sp, 4
8372#lw $s2, ($sp)
8376#addu $sp, $sp, 4
8380#subu $sp, $sp, 4
8384#sw $t0, ($sp)
# end: Call at 322.47; stackHeight = 40
# begin: IdentifierExp at 323.9; stackHeight = 40
8388#lw $t0, 48($sp) #**LocalVar
8392#subu $sp, $sp, 4
8396#sw $t0, ($sp)
# end: IdentifierExp at 323.9; stackHeight = 44
8400#lw $t0, 8($sp)
8404#sw $s2, 8($sp)
8408#move $s2, $t0
8412#beq $s2, $0, nullPtrException
8416#lw $t0, -12($s2)
8420#lw $t0, 80($t0)
8424#jalr $t0
8428#addu $sp, $sp, 8
8432#lw $s2, ($sp)
8436#addu $sp, $sp, 4
8440#subu $sp, $sp, 4
8444#sw $t0, ($sp)
# end: Call at 322.14; stackHeight = 36
8448#lw $t0, ($sp)
8452#addu $sp, $sp, 4
# end: CallStatement at 322.14; stackHeight = 32
# begin: CallStatement at 324.26; stackHeight = 32
# begin: Call at 324.26; stackHeight = 32
# begin: IdentifierExp at 324.7; stackHeight = 32
8456#lw $t0, 8($sp) #**LocalVar
8460#subu $sp, $sp, 4
8464#sw $t0, ($sp)
# end: IdentifierExp at 324.7; stackHeight = 36
# begin: Call at 325.37; stackHeight = 36
# begin: IdentifierExp at 325.13; stackHeight = 36
8468#lw $t0, 4($sp) #**LocalVar
8472#subu $sp, $sp, 4
8476#sw $t0, ($sp)
# end: IdentifierExp at 325.13; stackHeight = 40
# begin: IdentifierExp at 325.46; stackHeight = 40
8480#lw $t0, 48($sp) #**LocalVar
8484#subu $sp, $sp, 4
8488#sw $t0, ($sp)
# end: IdentifierExp at 325.46; stackHeight = 44
8492#lw $t0, 4($sp)
8496#sw $s2, 4($sp)
8500#move $s2, $t0
8504#beq $s2, $0, nullPtrException
8508#lw $t0, -12($s2)
8512#lw $t0, 72($t0)
8516#jalr $t0
8520#addu $sp, $sp, 4
8524#lw $s2, ($sp)
8528#addu $sp, $sp, 4
8532#subu $sp, $sp, 4
8536#sw $t0, ($sp)
# end: Call at 325.37; stackHeight = 40
# begin: IdentifierExp at 326.13; stackHeight = 40
8540#lw $t0, 48($sp) #**LocalVar
8544#subu $sp, $sp, 4
8548#sw $t0, ($sp)
# end: IdentifierExp at 326.13; stackHeight = 44
8552#lw $t0, 8($sp)
8556#sw $s2, 8($sp)
8560#move $s2, $t0
8564#beq $s2, $0, nullPtrException
8568#lw $t0, -12($s2)
8572#lw $t0, 84($t0)
8576#jalr $t0
8580#addu $sp, $sp, 8
8584#lw $s2, ($sp)
8588#addu $sp, $sp, 4
8592#subu $sp, $sp, 4
8596#sw $t0, ($sp)
# end: Call at 324.26; stackHeight = 36
8600#lw $t0, ($sp)
8604#addu $sp, $sp, 4
# end: CallStatement at 324.26; stackHeight = 32
# begin: CallStatement at 327.31; stackHeight = 32
# begin: Call at 327.31; stackHeight = 32
# begin: IdentifierExp at 327.7; stackHeight = 32
8608#lw $t0, 0($sp) #**LocalVar
8612#subu $sp, $sp, 4
8616#sw $t0, ($sp)
# end: IdentifierExp at 327.7; stackHeight = 36
8620#lw $t0, 0($sp)
8624#sw $s2, 0($sp)
8628#move $s2, $t0
8632#beq $s2, $0, nullPtrException
8636#lw $t0, -12($s2)
8640#lw $t0, 20($t0)
8644#jalr $t0
8648#addu $sp, $sp, 0
8652#lw $s2, ($sp)
8656#addu $sp, $sp, 4
8660#subu $sp, $sp, 4
8664#sw $t0, ($sp)
# end: Call at 327.31; stackHeight = 36
8668#lw $t0, ($sp)
8672#addu $sp, $sp, 4
# end: CallStatement at 327.31; stackHeight = 32
# begin: Assign at 328.14; stackHeight = 32
# begin: IdentifierExp at 328.16; stackHeight = 32
8676#lw $t0, 0($sp) #**LocalVar
8680#subu $sp, $sp, 4
8684#sw $t0, ($sp)
# end: IdentifierExp at 328.16; stackHeight = 36
8688#lw $t0, ($sp)
8692#addu $sp, $sp, 4
8696#sw $t0, 28($sp)
# end: Assign at 328.14; stackHeight = 32
8700#addu $sp, $sp, 4
# end: Block at 318.33; stackHeight = 28
8704#j if_done_638
8708:if_else_638:
# begin: Block at 330.8; stackHeight = 28
# begin: CallStatement at 332.14; stackHeight = 28
# begin: Call at 332.14; stackHeight = 28
# begin: IdentifierExp at 332.7; stackHeight = 28
8708#lw $t0, 20($sp) #**LocalVar
8712#subu $sp, $sp, 4
8716#sw $t0, ($sp)
# end: IdentifierExp at 332.7; stackHeight = 32
# begin: Call at 332.42; stackHeight = 32
# begin: IdentifierExp at 332.23; stackHeight = 32
8720#lw $t0, 8($sp) #**LocalVar
8724#subu $sp, $sp, 4
8728#sw $t0, ($sp)
# end: IdentifierExp at 332.23; stackHeight = 36
# begin: IdentifierExp at 332.50; stackHeight = 36
8732#lw $t0, 44($sp) #**LocalVar
8736#subu $sp, $sp, 4
8740#sw $t0, ($sp)
# end: IdentifierExp at 332.50; stackHeight = 40
8744#lw $t0, 4($sp)
8748#sw $s2, 4($sp)
8752#move $s2, $t0
8756#beq $s2, $0, nullPtrException
8760#lw $t0, -12($s2)
8764#lw $t0, 76($t0)
8768#jalr $t0
8772#addu $sp, $sp, 4
8776#lw $s2, ($sp)
8780#addu $sp, $sp, 4
8784#subu $sp, $sp, 4
8788#sw $t0, ($sp)
# end: Call at 332.42; stackHeight = 36
# begin: IdentifierExp at 333.9; stackHeight = 36
8792#lw $t0, 44($sp) #**LocalVar
8796#subu $sp, $sp, 4
8800#sw $t0, ($sp)
# end: IdentifierExp at 333.9; stackHeight = 40
8804#lw $t0, 8($sp)
8808#sw $s2, 8($sp)
8812#move $s2, $t0
8816#beq $s2, $0, nullPtrException
8820#lw $t0, -12($s2)
8824#lw $t0, 80($t0)
8828#jalr $t0
8832#addu $sp, $sp, 8
8836#lw $s2, ($sp)
8840#addu $sp, $sp, 4
8844#subu $sp, $sp, 4
8848#sw $t0, ($sp)
# end: Call at 332.14; stackHeight = 32
8852#lw $t0, ($sp)
8856#addu $sp, $sp, 4
# end: CallStatement at 332.14; stackHeight = 28
# begin: CallStatement at 334.26; stackHeight = 28
# begin: Call at 334.26; stackHeight = 28
# begin: IdentifierExp at 334.7; stackHeight = 28
8860#lw $t0, 4($sp) #**LocalVar
8864#subu $sp, $sp, 4
8868#sw $t0, ($sp)
# end: IdentifierExp at 334.7; stackHeight = 32
# begin: IdentifierExp at 334.34; stackHeight = 32
8872#lw $t0, 24($sp) #**LocalVar
8876#subu $sp, $sp, 4
8880#sw $t0, ($sp)
# end: IdentifierExp at 334.34; stackHeight = 36
# begin: IdentifierExp at 334.42; stackHeight = 36
8884#lw $t0, 44($sp) #**LocalVar
8888#subu $sp, $sp, 4
8892#sw $t0, ($sp)
# end: IdentifierExp at 334.42; stackHeight = 40
8896#lw $t0, 8($sp)
8900#sw $s2, 8($sp)
8904#move $s2, $t0
8908#beq $s2, $0, nullPtrException
8912#lw $t0, -12($s2)
8916#lw $t0, 84($t0)
8920#jalr $t0
8924#addu $sp, $sp, 8
8928#lw $s2, ($sp)
8932#addu $sp, $sp, 4
8936#subu $sp, $sp, 4
8940#sw $t0, ($sp)
# end: Call at 334.26; stackHeight = 32
8944#lw $t0, ($sp)
8948#addu $sp, $sp, 4
# end: CallStatement at 334.26; stackHeight = 28
# begin: CallStatement at 335.14; stackHeight = 28
# begin: Call at 335.14; stackHeight = 28
# begin: IdentifierExp at 335.7; stackHeight = 28
8952#lw $t0, 20($sp) #**LocalVar
8956#subu $sp, $sp, 4
8960#sw $t0, ($sp)
# end: IdentifierExp at 335.7; stackHeight = 32
8964#lw $t0, 0($sp)
8968#sw $s2, 0($sp)
8972#move $s2, $t0
8976#beq $s2, $0, nullPtrException
8980#lw $t0, -12($s2)
8984#lw $t0, 60($t0)
8988#jalr $t0
8992#addu $sp, $sp, 0
8996#lw $s2, ($sp)
9000#addu $sp, $sp, 4
9004#subu $sp, $sp, 4
9008#sw $t0, ($sp)
# end: Call at 335.14; stackHeight = 32
9012#lw $t0, ($sp)
9016#addu $sp, $sp, 4
# end: CallStatement at 335.14; stackHeight = 28
# begin: CallStatement at 336.15; stackHeight = 28
# begin: Call at 336.15; stackHeight = 28
# begin: IdentifierExp at 336.7; stackHeight = 28
9020#lw $t0, 16($sp) #**LocalVar
9024#subu $sp, $sp, 4
9028#sw $t0, ($sp)
# end: IdentifierExp at 336.7; stackHeight = 32
9032#lw $t0, 0($sp)
9036#sw $s2, 0($sp)
9040#move $s2, $t0
9044#beq $s2, $0, nullPtrException
9048#lw $t0, -12($s2)
9052#lw $t0, 20($t0)
9056#jalr $t0
9060#addu $sp, $sp, 0
9064#lw $s2, ($sp)
9068#addu $sp, $sp, 4
9072#subu $sp, $sp, 4
9076#sw $t0, ($sp)
# end: Call at 336.15; stackHeight = 32
9080#lw $t0, ($sp)
9084#addu $sp, $sp, 4
# end: CallStatement at 336.15; stackHeight = 28
# begin: Assign at 337.14; stackHeight = 28
# begin: IdentifierExp at 337.16; stackHeight = 28
9088#lw $t0, 16($sp) #**LocalVar
9092#subu $sp, $sp, 4
9096#sw $t0, ($sp)
# end: IdentifierExp at 337.16; stackHeight = 32
9100#lw $t0, ($sp)
9104#addu $sp, $sp, 4
9108#sw $t0, 24($sp)
# end: Assign at 337.14; stackHeight = 28
9112#addu $sp, $sp, 0
# end: Block at 330.8; stackHeight = 28
9116:if_done_638:
# end: If at 318.3; stackHeight = 28
9116#addu $sp, $sp, 8
# end: Block at 314.32; stackHeight = 20
9120#j if_done_712
9124:if_else_712:
# begin: Block at 340.11; stackHeight = 20
# begin: If at 341.3; stackHeight = 20
# begin: Call at 341.19; stackHeight = 20
# begin: IdentifierExp at 341.7; stackHeight = 20
9124#lw $t0, 0($sp) #**LocalVar
9128#subu $sp, $sp, 4
9132#sw $t0, ($sp)
# end: IdentifierExp at 341.7; stackHeight = 24
9136#lw $t0, 0($sp)
9140#sw $s2, 0($sp)
9144#move $s2, $t0
9148#beq $s2, $0, nullPtrException
9152#lw $t0, -12($s2)
9156#lw $t0, 24($t0)
9160#jalr $t0
9164#addu $sp, $sp, 0
9168#lw $s2, ($sp)
9172#addu $sp, $sp, 4
9176#subu $sp, $sp, 4
9180#sw $t0, ($sp)
# end: Call at 341.19; stackHeight = 24
9184#lw $t0, ($sp)
9188#addu $sp, $sp, 4
9192#beq $t0, $0, if_else_710
# begin: Block at 341.28; stackHeight = 20
# begin: CallStatement at 343.14; stackHeight = 20
# begin: Call at 343.14; stackHeight = 20
# begin: IdentifierExp at 343.7; stackHeight = 20
9196#lw $t0, 12($sp) #**LocalVar
9200#subu $sp, $sp, 4
9204#sw $t0, ($sp)
# end: IdentifierExp at 343.7; stackHeight = 24
# begin: Call at 343.31; stackHeight = 24
# begin: IdentifierExp at 343.23; stackHeight = 24
9208#lw $t0, 12($sp) #**LocalVar
9212#subu $sp, $sp, 4
9216#sw $t0, ($sp)
# end: IdentifierExp at 343.23; stackHeight = 28
# begin: IdentifierExp at 343.39; stackHeight = 28
9220#lw $t0, 36($sp) #**LocalVar
9224#subu $sp, $sp, 4
9228#sw $t0, ($sp)
# end: IdentifierExp at 343.39; stackHeight = 32
9232#lw $t0, 4($sp)
9236#sw $s2, 4($sp)
9240#move $s2, $t0
9244#beq $s2, $0, nullPtrException
9248#lw $t0, -12($s2)
9252#lw $t0, 76($t0)
9256#jalr $t0
9260#addu $sp, $sp, 4
9264#lw $s2, ($sp)
9268#addu $sp, $sp, 4
9272#subu $sp, $sp, 4
9276#sw $t0, ($sp)
# end: Call at 343.31; stackHeight = 28
# begin: IdentifierExp at 343.55; stackHeight = 28
9280#lw $t0, 36($sp) #**LocalVar
9284#subu $sp, $sp, 4
9288#sw $t0, ($sp)
# end: IdentifierExp at 343.55; stackHeight = 32
9292#lw $t0, 8($sp)
9296#sw $s2, 8($sp)
9300#move $s2, $t0
9304#beq $s2, $0, nullPtrException
9308#lw $t0, -12($s2)
9312#lw $t0, 80($t0)
9316#jalr $t0
9320#addu $sp, $sp, 8
9324#lw $s2, ($sp)
9328#addu $sp, $sp, 4
9332#subu $sp, $sp, 4
9336#sw $t0, ($sp)
# end: Call at 343.14; stackHeight = 24
9340#lw $t0, ($sp)
9344#addu $sp, $sp, 4
# end: CallStatement at 343.14; stackHeight = 20
# begin: CallStatement at 344.15; stackHeight = 20
# begin: Call at 344.15; stackHeight = 20
# begin: IdentifierExp at 344.7; stackHeight = 20
9348#lw $t0, 8($sp) #**LocalVar
9352#subu $sp, $sp, 4
9356#sw $t0, ($sp)
# end: IdentifierExp at 344.7; stackHeight = 24
# begin: IdentifierExp at 344.23; stackHeight = 24
9360#lw $t0, 16($sp) #**LocalVar
9364#subu $sp, $sp, 4
9368#sw $t0, ($sp)
# end: IdentifierExp at 344.23; stackHeight = 28
# begin: IdentifierExp at 344.31; stackHeight = 28
9372#lw $t0, 36($sp) #**LocalVar
9376#subu $sp, $sp, 4
9380#sw $t0, ($sp)
# end: IdentifierExp at 344.31; stackHeight = 32
9384#lw $t0, 8($sp)
9388#sw $s2, 8($sp)
9392#move $s2, $t0
9396#beq $s2, $0, nullPtrException
9400#lw $t0, -12($s2)
9404#lw $t0, 84($t0)
9408#jalr $t0
9412#addu $sp, $sp, 8
9416#lw $s2, ($sp)
9420#addu $sp, $sp, 4
9424#subu $sp, $sp, 4
9428#sw $t0, ($sp)
# end: Call at 344.15; stackHeight = 24
9432#lw $t0, ($sp)
9436#addu $sp, $sp, 4
# end: CallStatement at 344.15; stackHeight = 20
# begin: CallStatement at 345.31; stackHeight = 20
# begin: Call at 345.31; stackHeight = 20
# begin: Call at 345.19; stackHeight = 20
# begin: IdentifierExp at 345.7; stackHeight = 20
9440#lw $t0, 0($sp) #**LocalVar
9444#subu $sp, $sp, 4
9448#sw $t0, ($sp)
# end: IdentifierExp at 345.7; stackHeight = 24
9452#lw $t0, 0($sp)
9456#sw $s2, 0($sp)
9460#move $s2, $t0
9464#beq $s2, $0, nullPtrException
9468#lw $t0, -12($s2)
9472#lw $t0, 36($t0)
9476#jalr $t0
9480#addu $sp, $sp, 0
9484#lw $s2, ($sp)
9488#addu $sp, $sp, 4
9492#subu $sp, $sp, 4
9496#sw $t0, ($sp)
# end: Call at 345.19; stackHeight = 24
9500#lw $t0, 0($sp)
9504#sw $s2, 0($sp)
9508#move $s2, $t0
9512#beq $s2, $0, nullPtrException
9516#lw $t0, -12($s2)
9520#lw $t0, 20($t0)
9524#jalr $t0
9528#addu $sp, $sp, 0
9532#lw $s2, ($sp)
9536#addu $sp, $sp, 4
9540#subu $sp, $sp, 4
9544#sw $t0, ($sp)
# end: Call at 345.31; stackHeight = 24
9548#lw $t0, ($sp)
9552#addu $sp, $sp, 4
# end: CallStatement at 345.31; stackHeight = 20
# begin: Assign at 346.14; stackHeight = 20
# begin: IdentifierExp at 346.16; stackHeight = 20
9556#lw $t0, 8($sp) #**LocalVar
9560#subu $sp, $sp, 4
9564#sw $t0, ($sp)
# end: IdentifierExp at 346.16; stackHeight = 24
9568#lw $t0, ($sp)
9572#addu $sp, $sp, 4
9576#sw $t0, 16($sp)
# end: Assign at 346.14; stackHeight = 20
9580#addu $sp, $sp, 0
# end: Block at 341.28; stackHeight = 20
9584#j if_done_710
9588:if_else_710:
# begin: If at 348.8; stackHeight = 20
# begin: Call at 348.24; stackHeight = 20
# begin: IdentifierExp at 348.12; stackHeight = 20
9588#lw $t0, 4($sp) #**LocalVar
9592#subu $sp, $sp, 4
9596#sw $t0, ($sp)
# end: IdentifierExp at 348.12; stackHeight = 24
9600#lw $t0, 0($sp)
9604#sw $s2, 0($sp)
9608#move $s2, $t0
9612#beq $s2, $0, nullPtrException
9616#lw $t0, -12($s2)
9620#lw $t0, 24($t0)
9624#jalr $t0
9628#addu $sp, $sp, 0
9632#lw $s2, ($sp)
9636#addu $sp, $sp, 4
9640#subu $sp, $sp, 4
9644#sw $t0, ($sp)
# end: Call at 348.24; stackHeight = 24
9648#lw $t0, ($sp)
9652#addu $sp, $sp, 4
9656#beq $t0, $0, if_else_709
# begin: Block at 348.33; stackHeight = 20
# begin: LocalVarDecl at 350.27; stackHeight = 20
# begin: Call at 350.60; stackHeight = 20
# begin: IdentifierExp at 350.48; stackHeight = 20
9660#lw $t0, 4($sp) #**LocalVar
9664#subu $sp, $sp, 4
9668#sw $t0, ($sp)
# end: IdentifierExp at 350.48; stackHeight = 24
9672#lw $t0, 0($sp)
9676#sw $s2, 0($sp)
9680#move $s2, $t0
9684#beq $s2, $0, nullPtrException
9688#lw $t0, -12($s2)
9692#lw $t0, 36($t0)
9696#jalr $t0
9700#addu $sp, $sp, 0
9704#lw $s2, ($sp)
9708#addu $sp, $sp, 4
9712#subu $sp, $sp, 4
9716#sw $t0, ($sp)
# end: Call at 350.60; stackHeight = 24
9720#lw $0, ($sp) #**innerNephewNonNull
# end: LocalVarDecl at 350.27; stackHeight = 24
# begin: CallStatement at 351.14; stackHeight = 24
# begin: Call at 351.14; stackHeight = 24
# begin: IdentifierExp at 351.7; stackHeight = 24
9724#lw $t0, 16($sp) #**LocalVar
9728#subu $sp, $sp, 4
9732#sw $t0, ($sp)
# end: IdentifierExp at 351.7; stackHeight = 28
# begin: Call at 351.42; stackHeight = 28
# begin: IdentifierExp at 351.23; stackHeight = 28
9736#lw $t0, 4($sp) #**LocalVar
9740#subu $sp, $sp, 4
9744#sw $t0, ($sp)
# end: IdentifierExp at 351.23; stackHeight = 32
# begin: IdentifierExp at 351.50; stackHeight = 32
9748#lw $t0, 40($sp) #**LocalVar
9752#subu $sp, $sp, 4
9756#sw $t0, ($sp)
# end: IdentifierExp at 351.50; stackHeight = 36
9760#lw $t0, 4($sp)
9764#sw $s2, 4($sp)
9768#move $s2, $t0
9772#beq $s2, $0, nullPtrException
9776#lw $t0, -12($s2)
9780#lw $t0, 76($t0)
9784#jalr $t0
9788#addu $sp, $sp, 4
9792#lw $s2, ($sp)
9796#addu $sp, $sp, 4
9800#subu $sp, $sp, 4
9804#sw $t0, ($sp)
# end: Call at 351.42; stackHeight = 32
# begin: IdentifierExp at 352.9; stackHeight = 32
9808#lw $t0, 40($sp) #**LocalVar
9812#subu $sp, $sp, 4
9816#sw $t0, ($sp)
# end: IdentifierExp at 352.9; stackHeight = 36
9820#lw $t0, 8($sp)
9824#sw $s2, 8($sp)
9828#move $s2, $t0
9832#beq $s2, $0, nullPtrException
9836#lw $t0, -12($s2)
9840#lw $t0, 80($t0)
9844#jalr $t0
9848#addu $sp, $sp, 8
9852#lw $s2, ($sp)
9856#addu $sp, $sp, 4
9860#subu $sp, $sp, 4
9864#sw $t0, ($sp)
# end: Call at 351.14; stackHeight = 28
9868#lw $t0, ($sp)
9872#addu $sp, $sp, 4
# end: CallStatement at 351.14; stackHeight = 24
# begin: CallStatement at 353.15; stackHeight = 24
# begin: Call at 353.15; stackHeight = 24
# begin: IdentifierExp at 353.7; stackHeight = 24
9876#lw $t0, 12($sp) #**LocalVar
9880#subu $sp, $sp, 4
9884#sw $t0, ($sp)
# end: IdentifierExp at 353.7; stackHeight = 28
# begin: Call at 353.42; stackHeight = 28
# begin: IdentifierExp at 353.23; stackHeight = 28
9888#lw $t0, 4($sp) #**LocalVar
9892#subu $sp, $sp, 4
9896#sw $t0, ($sp)
# end: IdentifierExp at 353.23; stackHeight = 32
# begin: IdentifierExp at 353.51; stackHeight = 32
9900#lw $t0, 40($sp) #**LocalVar
9904#subu $sp, $sp, 4
9908#sw $t0, ($sp)
# end: IdentifierExp at 353.51; stackHeight = 36
9912#lw $t0, 4($sp)
9916#sw $s2, 4($sp)
9920#move $s2, $t0
9924#beq $s2, $0, nullPtrException
9928#lw $t0, -12($s2)
9932#lw $t0, 72($t0)
9936#jalr $t0
9940#addu $sp, $sp, 4
9944#lw $s2, ($sp)
9948#addu $sp, $sp, 4
9952#subu $sp, $sp, 4
9956#sw $t0, ($sp)
# end: Call at 353.42; stackHeight = 32
# begin: IdentifierExp at 354.9; stackHeight = 32
9960#lw $t0, 40($sp) #**LocalVar
9964#subu $sp, $sp, 4
9968#sw $t0, ($sp)
# end: IdentifierExp at 354.9; stackHeight = 36
9972#lw $t0, 8($sp)
9976#sw $s2, 8($sp)
9980#move $s2, $t0
9984#beq $s2, $0, nullPtrException
9988#lw $t0, -12($s2)
9992#lw $t0, 84($t0)
9996#jalr $t0
10000#addu $sp, $sp, 8
10004#lw $s2, ($sp)
10008#addu $sp, $sp, 4
10012#subu $sp, $sp, 4
10016#sw $t0, ($sp)
# end: Call at 353.15; stackHeight = 28
10020#lw $t0, ($sp)
10024#addu $sp, $sp, 4
# end: CallStatement at 353.15; stackHeight = 24
# begin: CallStatement at 355.26; stackHeight = 24
# begin: Call at 355.26; stackHeight = 24
# begin: IdentifierExp at 355.7; stackHeight = 24
10028#lw $t0, 0($sp) #**LocalVar
10032#subu $sp, $sp, 4
10036#sw $t0, ($sp)
# end: IdentifierExp at 355.7; stackHeight = 28
# begin: IdentifierExp at 355.34; stackHeight = 28
10040#lw $t0, 20($sp) #**LocalVar
10044#subu $sp, $sp, 4
10048#sw $t0, ($sp)
# end: IdentifierExp at 355.34; stackHeight = 32
# begin: IdentifierExp at 355.42; stackHeight = 32
10052#lw $t0, 40($sp) #**LocalVar
10056#subu $sp, $sp, 4
10060#sw $t0, ($sp)
# end: IdentifierExp at 355.42; stackHeight = 36
10064#lw $t0, 8($sp)
10068#sw $s2, 8($sp)
10072#move $s2, $t0
10076#beq $s2, $0, nullPtrException
10080#lw $t0, -12($s2)
10084#lw $t0, 84($t0)
10088#jalr $t0
10092#addu $sp, $sp, 8
10096#lw $s2, ($sp)
10100#addu $sp, $sp, 4
10104#subu $sp, $sp, 4
10108#sw $t0, ($sp)
# end: Call at 355.26; stackHeight = 28
10112#lw $t0, ($sp)
10116#addu $sp, $sp, 4
# end: CallStatement at 355.26; stackHeight = 24
# begin: CallStatement at 356.26; stackHeight = 24
# begin: Call at 356.26; stackHeight = 24
# begin: IdentifierExp at 356.7; stackHeight = 24
10120#lw $t0, 0($sp) #**LocalVar
10124#subu $sp, $sp, 4
10128#sw $t0, ($sp)
# end: IdentifierExp at 356.7; stackHeight = 28
# begin: IdentifierExp at 356.35; stackHeight = 28
10132#lw $t0, 16($sp) #**LocalVar
10136#subu $sp, $sp, 4
10140#sw $t0, ($sp)
# end: IdentifierExp at 356.35; stackHeight = 32
# begin: IdentifierExp at 356.44; stackHeight = 32
10144#lw $t0, 40($sp) #**LocalVar
10148#subu $sp, $sp, 4
10152#sw $t0, ($sp)
# end: IdentifierExp at 356.44; stackHeight = 36
10156#lw $t0, 8($sp)
10160#sw $s2, 8($sp)
10164#move $s2, $t0
10168#beq $s2, $0, nullPtrException
10172#lw $t0, -12($s2)
10176#lw $t0, 80($t0)
10180#jalr $t0
10184#addu $sp, $sp, 8
10188#lw $s2, ($sp)
10192#addu $sp, $sp, 4
10196#subu $sp, $sp, 4
10200#sw $t0, ($sp)
# end: Call at 356.26; stackHeight = 28
10204#lw $t0, ($sp)
10208#addu $sp, $sp, 4
# end: CallStatement at 356.26; stackHeight = 24
# begin: CallStatement at 357.26; stackHeight = 24
# begin: Call at 357.26; stackHeight = 24
# begin: IdentifierExp at 357.7; stackHeight = 24
10212#lw $t0, 0($sp) #**LocalVar
10216#subu $sp, $sp, 4
10220#sw $t0, ($sp)
# end: IdentifierExp at 357.7; stackHeight = 28
10224#lw $t0, 0($sp)
10228#sw $s2, 0($sp)
10232#move $s2, $t0
10236#beq $s2, $0, nullPtrException
10240#lw $t0, -12($s2)
10244#lw $t0, 20($t0)
10248#jalr $t0
10252#addu $sp, $sp, 0
10256#lw $s2, ($sp)
10260#addu $sp, $sp, 4
10264#subu $sp, $sp, 4
10268#sw $t0, ($sp)
# end: Call at 357.26; stackHeight = 28
10272#lw $t0, ($sp)
10276#addu $sp, $sp, 4
# end: CallStatement at 357.26; stackHeight = 24
# begin: Assign at 358.14; stackHeight = 24
# begin: IdentifierExp at 358.16; stackHeight = 24
10280#lw $t0, 0($sp) #**LocalVar
10284#subu $sp, $sp, 4
10288#sw $t0, ($sp)
# end: IdentifierExp at 358.16; stackHeight = 28
10292#lw $t0, ($sp)
10296#addu $sp, $sp, 4
10300#sw $t0, 20($sp)
# end: Assign at 358.14; stackHeight = 24
10304#addu $sp, $sp, 4
# end: Block at 348.33; stackHeight = 20
10308#j if_done_709
10312:if_else_709:
# begin: Block at 360.8; stackHeight = 20
# begin: CallStatement at 362.15; stackHeight = 20
# begin: Call at 362.15; stackHeight = 20
# begin: IdentifierExp at 362.7; stackHeight = 20
10312#lw $t0, 8($sp) #**LocalVar
10316#subu $sp, $sp, 4
10320#sw $t0, ($sp)
# end: IdentifierExp at 362.7; stackHeight = 24
10324#lw $t0, 0($sp)
10328#sw $s2, 0($sp)
10332#move $s2, $t0
10336#beq $s2, $0, nullPtrException
10340#lw $t0, -12($s2)
10344#lw $t0, 60($t0)
10348#jalr $t0
10352#addu $sp, $sp, 0
10356#lw $s2, ($sp)
10360#addu $sp, $sp, 4
10364#subu $sp, $sp, 4
10368#sw $t0, ($sp)
# end: Call at 362.15; stackHeight = 24
10372#lw $t0, ($sp)
10376#addu $sp, $sp, 4
# end: CallStatement at 362.15; stackHeight = 20
# begin: Assign at 363.18; stackHeight = 20
# begin: IdentifierExp at 363.7; stackHeight = 20
10380#lw $t0, 24($sp) #**LocalVar
10384#subu $sp, $sp, 4
10388#sw $t0, ($sp)
# end: IdentifierExp at 363.7; stackHeight = 24
# begin: IntegerLiteral at 363.15; stackHeight = 24
10392#li $t0, 0
10396#subu $sp, $sp, 8
10400#sw $s5, 4($sp)
10404#sw $t0, ($sp)
# end: IntegerLiteral at 363.15; stackHeight = 32
# begin: True at 363.20; stackHeight = 32
10408#li $t0, 1
10412#subu $sp, $sp, 4
10416#sw $t0, ($sp)
# end: True at 363.20; stackHeight = 36
10420#lw $t0, ($sp)
10424#addu $sp, $sp, 4
10428#lw $t1, ($sp)
10432#addu $sp, $sp, 8
10436#lw $t2, ($sp)
10440#addu $sp, $sp, 4
10444#beq $t2, $0, nullPtrException
10448#lw $t3, -4($t2)
10452#bgeu $t1, $t3, arrayIndexOutOfBounds
10453##...sltu $at,$t1,$t3
10457##...beq $at,$zero,18532
10460#sll $t1, $t1, 2
10464#addu $t1, $t1, $t2
10468#sw $t0, ($t1)
# end: Assign at 363.18; stackHeight = 20
10472#addu $sp, $sp, 0
# end: Block at 360.8; stackHeight = 20
10476:if_done_709:
# end: If at 348.8; stackHeight = 20
10476:if_done_710:
# end: If at 341.3; stackHeight = 20
10476#addu $sp, $sp, 0
# end: Block at 340.11; stackHeight = 20
10480:if_done_712:
# end: If at 314.11; stackHeight = 20
10480:if_done_713:
# end: If at 284.6; stackHeight = 20
10480#addu $sp, $sp, 16
# end: Block at 265.18; stackHeight = 4
10484#j if_done_716
10488:if_else_716:
# begin: Block at 370.2; stackHeight = 4
10488#addu $sp, $sp, 0
# end: Block at 370.2; stackHeight = 4
10492:if_done_716:
# end: If at 265.2; stackHeight = 4
# begin: IdentifierExp at 370.9; stackHeight = 4
10492#lw $t0, 0($sp) #**LocalVar
10496#subu $sp, $sp, 4
10500#sw $t0, ($sp)
# end: IdentifierExp at 370.9; stackHeight = 8
10504#lw $t0, ($sp)
10508#addu $sp, $sp, 4
10512#addu $sp, $sp, 4
10516#lw $ra, ($sp)
10520#addu $sp, $sp, 4
10524#jr $ra
.globl mth_NonNullRedBlackTree_asNonNull
10528:mth_NonNullRedBlackTree_asNonNull:
10528#subu $sp, $sp, 4
10532#sw $ra, ($sp)
10536#subu $sp, $sp, 4
10540#sw $s2, ($sp)
10544#lw $t0, ($sp)
10548#addu $sp, $sp, 4
10552#addu $sp, $sp, 0
10556#lw $ra, ($sp)
10560#addu $sp, $sp, 4
10564#jr $ra
.globl mth_NonNullRedBlackTree_getRight
10568:mth_NonNullRedBlackTree_getRight:
10568#subu $sp, $sp, 4
10572#sw $ra, ($sp)
# begin: LocalVarDecl at 380.15; stackHeight = 0
# begin: IdentifierExp at 380.24; stackHeight = 0
10576#lw $t0, 8($s2) #**InstVar
10580#subu $sp, $sp, 4
10584#sw $t0, ($sp)
# end: IdentifierExp at 380.24; stackHeight = 4
10588#lw $0, ($sp) #**rtnVal
# end: LocalVarDecl at 380.15; stackHeight = 4
# begin: If at 381.2; stackHeight = 4
# begin: IdentifierExp at 381.6; stackHeight = 4
10592#lw $t0, 8($sp) #**LocalVar
10596#subu $sp, $sp, 4
10600#sw $t0, ($sp)
# end: IdentifierExp at 381.6; stackHeight = 8
10604#lw $t0, ($sp)
10608#addu $sp, $sp, 4
10612#beq $t0, $0, if_else_735
# begin: Block at 381.21; stackHeight = 4
# begin: Assign at 382.13; stackHeight = 4
# begin: IdentifierExp at 382.15; stackHeight = 4
10616#lw $t0, 4($s2) #**InstVar
10620#subu $sp, $sp, 4
10624#sw $t0, ($sp)
# end: IdentifierExp at 382.15; stackHeight = 8
10628#lw $t0, ($sp)
10632#addu $sp, $sp, 4
10636#sw $t0, 0($sp)
# end: Assign at 382.13; stackHeight = 4
10640#addu $sp, $sp, 0
# end: Block at 381.21; stackHeight = 4
10644#j if_done_735
10648:if_else_735:
# begin: Block at 384.2; stackHeight = 4
10648#addu $sp, $sp, 0
# end: Block at 384.2; stackHeight = 4
10652:if_done_735:
# end: If at 381.2; stackHeight = 4
# begin: IdentifierExp at 384.9; stackHeight = 4
10652#lw $t0, 0($sp) #**LocalVar
10656#subu $sp, $sp, 4
10660#sw $t0, ($sp)
# end: IdentifierExp at 384.9; stackHeight = 8
10664#lw $t0, ($sp)
10668#addu $sp, $sp, 4
10672#addu $sp, $sp, 4
10676#lw $ra, ($sp)
10680#addu $sp, $sp, 4
10684#jr $ra
.globl mth_NonNullRedBlackTree_getLeft
10688:mth_NonNullRedBlackTree_getLeft:
10688#subu $sp, $sp, 4
10692#sw $ra, ($sp)
# begin: Call at 389.9; stackHeight = 0
10696#subu $sp, $sp, 4
10700#sw $s2, ($sp)
# begin: Not at 389.18; stackHeight = 4
# begin: IdentifierExp at 389.19; stackHeight = 4
10704#lw $t0, 8($sp) #**LocalVar
10708#subu $sp, $sp, 4
10712#sw $t0, ($sp)
# end: IdentifierExp at 389.19; stackHeight = 8
10716#lw $t0, ($sp)
10720#xor $t0, $t0, 1
10724#sw $t0, ($sp)
# end: Not at 389.18; stackHeight = 8
10728#lw $t0, 4($sp)
10732#sw $s2, 4($sp)
10736#move $s2, $t0
10740#beq $s2, $0, nullPtrException
10744#lw $t0, -12($s2)
10748#lw $t0, 72($t0)
10752#jalr $t0
10756#addu $sp, $sp, 4
10760#lw $s2, ($sp)
10764#addu $sp, $sp, 4
10768#subu $sp, $sp, 4
10772#sw $t0, ($sp)
# end: Call at 389.9; stackHeight = 4
10776#lw $t0, ($sp)
10780#addu $sp, $sp, 4
10784#addu $sp, $sp, 0
10788#lw $ra, ($sp)
10792#addu $sp, $sp, 4
10796#jr $ra
# begin: MethodDeclVoid at 393.17; stackHeight = -4
.globl mth_NonNullRedBlackTree_setRight
10800:mth_NonNullRedBlackTree_setRight:
10800#subu $sp, $sp, 4
10804#sw $ra, ($sp)
# begin: If at 394.2; stackHeight = 0
# begin: IdentifierExp at 394.6; stackHeight = 0
10808#lw $t0, 4($sp) #**LocalVar
10812#subu $sp, $sp, 4
10816#sw $t0, ($sp)
# end: IdentifierExp at 394.6; stackHeight = 4
10820#lw $t0, ($sp)
10824#addu $sp, $sp, 4
10828#beq $t0, $0, if_else_759
# begin: Block at 394.21; stackHeight = 0
# begin: Assign at 395.11; stackHeight = 0
# begin: IdentifierExp at 395.13; stackHeight = 0
10832#lw $t0, 8($sp) #**LocalVar
10836#subu $sp, $sp, 4
10840#sw $t0, ($sp)
# end: IdentifierExp at 395.13; stackHeight = 4
10844#lw $t0, ($sp)
10848#addu $sp, $sp, 4
10852#sw $t0, 4($sp)
# end: Assign at 395.11; stackHeight = 0
10856#addu $sp, $sp, 0
# end: Block at 394.21; stackHeight = 0
10860#j if_done_759
10864:if_else_759:
# begin: Block at 397.7; stackHeight = 0
# begin: Assign at 398.12; stackHeight = 0
# begin: IdentifierExp at 398.14; stackHeight = 0
10864#lw $t0, 8($sp) #**LocalVar
10868#subu $sp, $sp, 4
10872#sw $t0, ($sp)
# end: IdentifierExp at 398.14; stackHeight = 4
10876#lw $t0, ($sp)
10880#addu $sp, $sp, 4
10884#sw $t0, 8($sp)
# end: Assign at 398.12; stackHeight = 0
10888#addu $sp, $sp, 0
# end: Block at 397.7; stackHeight = 0
10892:if_done_759:
# end: If at 394.2; stackHeight = 0
10892#addu $sp, $sp, 0
10896#lw $ra, ($sp)
10900#addu $sp, $sp, 4
10904#jr $ra
# end: MethodDeclVoid at 393.17; stackHeight = -4
# begin: MethodDeclVoid at 403.17; stackHeight = -4
.globl mth_NonNullRedBlackTree_setLeft
10908:mth_NonNullRedBlackTree_setLeft:
10908#subu $sp, $sp, 4
10912#sw $ra, ($sp)
# begin: CallStatement at 404.2; stackHeight = 0
# begin: Call at 404.2; stackHeight = 0
10916#subu $sp, $sp, 4
10920#sw $s2, ($sp)
# begin: IdentifierExp at 404.11; stackHeight = 4
10924#lw $t0, 12($sp) #**LocalVar
10928#subu $sp, $sp, 4
10932#sw $t0, ($sp)
# end: IdentifierExp at 404.11; stackHeight = 8
# begin: Not at 404.17; stackHeight = 8
# begin: IdentifierExp at 404.18; stackHeight = 8
10936#lw $t0, 12($sp) #**LocalVar
10940#subu $sp, $sp, 4
10944#sw $t0, ($sp)
# end: IdentifierExp at 404.18; stackHeight = 12
10948#lw $t0, ($sp)
10952#xor $t0, $t0, 1
10956#sw $t0, ($sp)
# end: Not at 404.17; stackHeight = 12
10960#lw $t0, 8($sp)
10964#sw $s2, 8($sp)
10968#move $s2, $t0
10972#beq $s2, $0, nullPtrException
10976#lw $t0, -12($s2)
10980#lw $t0, 80($t0)
10984#jalr $t0
10988#addu $sp, $sp, 8
10992#lw $s2, ($sp)
10996#addu $sp, $sp, 4
11000#subu $sp, $sp, 4
11004#sw $t0, ($sp)
# end: Call at 404.2; stackHeight = 4
11008#lw $t0, ($sp)
11012#addu $sp, $sp, 4
# end: CallStatement at 404.2; stackHeight = 0
11016#addu $sp, $sp, 0
11020#lw $ra, ($sp)
11024#addu $sp, $sp, 4
11028#jr $ra
# end: MethodDeclVoid at 403.17; stackHeight = -4
.globl mth_NonNullRedBlackTree_rebalanceAfterInsert
11032:mth_NonNullRedBlackTree_rebalanceAfterInsert:
11032#subu $sp, $sp, 4
11036#sw $ra, ($sp)
# begin: LocalVarDecl at 419.15; stackHeight = 0
11040#subu $sp, $sp, 4
11044#sw $s2, ($sp)
11048#lw $0, ($sp) #**rtnVal
# end: LocalVarDecl at 419.15; stackHeight = 4
# begin: LocalVarDecl at 420.15; stackHeight = 4
# begin: Call at 420.25; stackHeight = 4
11052#subu $sp, $sp, 4
11056#sw $s2, ($sp)
# begin: IdentifierExp at 420.34; stackHeight = 8
11060#lw $t0, 12($sp) #**LocalVar
11064#subu $sp, $sp, 4
11068#sw $t0, ($sp)
# end: IdentifierExp at 420.34; stackHeight = 12
11072#lw $t0, 4($sp)
11076#sw $s2, 4($sp)
11080#move $s2, $t0
11084#beq $s2, $0, nullPtrException
11088#lw $t0, -12($s2)
11092#lw $t0, 72($t0)
11096#jalr $t0
11100#addu $sp, $sp, 4
11104#lw $s2, ($sp)
11108#addu $sp, $sp, 4
11112#subu $sp, $sp, 4
11116#sw $t0, ($sp)
# end: Call at 420.25; stackHeight = 8
11120#lw $0, ($sp) #**myRight
# end: LocalVarDecl at 420.15; stackHeight = 8
# begin: LocalVarDecl at 421.15; stackHeight = 8
# begin: Call at 421.24; stackHeight = 8
11124#subu $sp, $sp, 4
11128#sw $s2, ($sp)
# begin: IdentifierExp at 421.32; stackHeight = 12
11132#lw $t0, 16($sp) #**LocalVar
11136#subu $sp, $sp, 4
11140#sw $t0, ($sp)
# end: IdentifierExp at 421.32; stackHeight = 16
11144#lw $t0, 4($sp)
11148#sw $s2, 4($sp)
11152#move $s2, $t0
11156#beq $s2, $0, nullPtrException
11160#lw $t0, -12($s2)
11164#lw $t0, 76($t0)
11168#jalr $t0
11172#addu $sp, $sp, 4
11176#lw $s2, ($sp)
11180#addu $sp, $sp, 4
11184#subu $sp, $sp, 4
11188#sw $t0, ($sp)
# end: Call at 421.24; stackHeight = 12
11192#lw $0, ($sp) #**myLeft
# end: LocalVarDecl at 421.15; stackHeight = 12
# begin: If at 423.2; stackHeight = 12
# begin: Call at 423.14; stackHeight = 12
# begin: IdentifierExp at 423.6; stackHeight = 12
11196#lw $t0, 4($sp) #**LocalVar
11200#subu $sp, $sp, 4
11204#sw $t0, ($sp)
# end: IdentifierExp at 423.6; stackHeight = 16
11208#lw $t0, 0($sp)
11212#sw $s2, 0($sp)
11216#move $s2, $t0
11220#beq $s2, $0, nullPtrException
11224#lw $t0, -12($s2)
11228#lw $t0, 24($t0)
11232#jalr $t0
11236#addu $sp, $sp, 0
11240#lw $s2, ($sp)
11244#addu $sp, $sp, 4
11248#subu $sp, $sp, 4
11252#sw $t0, ($sp)
# end: Call at 423.14; stackHeight = 16
11256#lw $t0, ($sp)
11260#addu $sp, $sp, 4
11264#beq $t0, $0, if_else_908
# begin: Block at 423.23; stackHeight = 12
# begin: LocalVarDecl at 424.19; stackHeight = 12
# begin: Call at 424.54; stackHeight = 12
# begin: Call at 424.42; stackHeight = 12
# begin: IdentifierExp at 424.34; stackHeight = 12
11268#lw $t0, 4($sp) #**LocalVar
11272#subu $sp, $sp, 4
11276#sw $t0, ($sp)
# end: IdentifierExp at 424.34; stackHeight = 16
11280#lw $t0, 0($sp)
11284#sw $s2, 0($sp)
11288#move $s2, $t0
11292#beq $s2, $0, nullPtrException
11296#lw $t0, -12($s2)
11300#lw $t0, 36($t0)
11304#jalr $t0
11308#addu $sp, $sp, 0
11312#lw $s2, ($sp)
11316#addu $sp, $sp, 4
11320#subu $sp, $sp, 4
11324#sw $t0, ($sp)
# end: Call at 424.42; stackHeight = 16
# begin: IdentifierExp at 424.63; stackHeight = 16
11328#lw $t0, 20($sp) #**LocalVar
11332#subu $sp, $sp, 4
11336#sw $t0, ($sp)
# end: IdentifierExp at 424.63; stackHeight = 20
11340#lw $t0, 4($sp)
11344#sw $s2, 4($sp)
11348#move $s2, $t0
11352#beq $s2, $0, nullPtrException
11356#lw $t0, -12($s2)
11360#lw $t0, 72($t0)
11364#jalr $t0
11368#addu $sp, $sp, 4
11372#lw $s2, ($sp)
11376#addu $sp, $sp, 4
11380#subu $sp, $sp, 4
11384#sw $t0, ($sp)
# end: Call at 424.54; stackHeight = 16
11388#lw $0, ($sp) #**myRightRight
# end: LocalVarDecl at 424.19; stackHeight = 16
# begin: LocalVarDecl at 425.19; stackHeight = 16
# begin: Call at 425.53; stackHeight = 16
# begin: Call at 425.41; stackHeight = 16
# begin: IdentifierExp at 425.33; stackHeight = 16
11392#lw $t0, 8($sp) #**LocalVar
11396#subu $sp, $sp, 4
11400#sw $t0, ($sp)
# end: IdentifierExp at 425.33; stackHeight = 20
11404#lw $t0, 0($sp)
11408#sw $s2, 0($sp)
11412#move $s2, $t0
11416#beq $s2, $0, nullPtrException
11420#lw $t0, -12($s2)
11424#lw $t0, 36($t0)
11428#jalr $t0
11432#addu $sp, $sp, 0
11436#lw $s2, ($sp)
11440#addu $sp, $sp, 4
11444#subu $sp, $sp, 4
11448#sw $t0, ($sp)
# end: Call at 425.41; stackHeight = 20
# begin: IdentifierExp at 425.61; stackHeight = 20
11452#lw $t0, 24($sp) #**LocalVar
11456#subu $sp, $sp, 4
11460#sw $t0, ($sp)
# end: IdentifierExp at 425.61; stackHeight = 24
11464#lw $t0, 4($sp)
11468#sw $s2, 4($sp)
11472#move $s2, $t0
11476#beq $s2, $0, nullPtrException
11480#lw $t0, -12($s2)
11484#lw $t0, 76($t0)
11488#jalr $t0
11492#addu $sp, $sp, 4
11496#lw $s2, ($sp)
11500#addu $sp, $sp, 4
11504#subu $sp, $sp, 4
11508#sw $t0, ($sp)
# end: Call at 425.53; stackHeight = 20
11512#lw $0, ($sp) #**myRightLeft
# end: LocalVarDecl at 425.19; stackHeight = 20
# begin: If at 426.6; stackHeight = 20
# begin: Call at 426.23; stackHeight = 20
# begin: IdentifierExp at 426.10; stackHeight = 20
11516#lw $t0, 4($sp) #**LocalVar
11520#subu $sp, $sp, 4
11524#sw $t0, ($sp)
# end: IdentifierExp at 426.10; stackHeight = 24
11528#lw $t0, 0($sp)
11532#sw $s2, 0($sp)
11536#move $s2, $t0
11540#beq $s2, $0, nullPtrException
11544#lw $t0, -12($s2)
11548#lw $t0, 24($t0)
11552#jalr $t0
11556#addu $sp, $sp, 0
11560#lw $s2, ($sp)
11564#addu $sp, $sp, 4
11568#subu $sp, $sp, 4
11572#sw $t0, ($sp)
# end: Call at 426.23; stackHeight = 24
11576#lw $t0, ($sp)
11580#addu $sp, $sp, 4
11584#beq $t0, $0, if_else_905
# begin: Block at 426.32; stackHeight = 20
# begin: If at 427.3; stackHeight = 20
# begin: Call at 427.14; stackHeight = 20
# begin: IdentifierExp at 427.7; stackHeight = 20
11588#lw $t0, 8($sp) #**LocalVar
11592#subu $sp, $sp, 4
11596#sw $t0, ($sp)
# end: IdentifierExp at 427.7; stackHeight = 24
11600#lw $t0, 0($sp)
11604#sw $s2, 0($sp)
11608#move $s2, $t0
11612#beq $s2, $0, nullPtrException
11616#lw $t0, -12($s2)
11620#lw $t0, 24($t0)
11624#jalr $t0
11628#addu $sp, $sp, 0
11632#lw $s2, ($sp)
11636#addu $sp, $sp, 4
11640#subu $sp, $sp, 4
11644#sw $t0, ($sp)
# end: Call at 427.14; stackHeight = 24
11648#lw $t0, ($sp)
11652#addu $sp, $sp, 4
11656#beq $t0, $0, if_else_902
# begin: Block at 427.23; stackHeight = 20
# begin: Assign at 429.20; stackHeight = 20
# begin: False at 429.22; stackHeight = 20
11660#subu $sp, $sp, 4
11664#sw $0, ($sp)
# end: False at 429.22; stackHeight = 24
11668#lw $t0, ($sp)
11672#addu $sp, $sp, 4
11676#sw $t0, -20($s2)
# end: Assign at 429.20; stackHeight = 20
# begin: CallStatement at 430.14; stackHeight = 20
# begin: Call at 430.14; stackHeight = 20
# begin: IdentifierExp at 430.7; stackHeight = 20
11680#lw $t0, 8($sp) #**LocalVar
11684#subu $sp, $sp, 4
11688#sw $t0, ($sp)
# end: IdentifierExp at 430.7; stackHeight = 24
11692#lw $t0, 0($sp)
11696#sw $s2, 0($sp)
11700#move $s2, $t0
11704#beq $s2, $0, nullPtrException
11708#lw $t0, -12($s2)
11712#lw $t0, 20($t0)
11716#jalr $t0
11720#addu $sp, $sp, 0
11724#lw $s2, ($sp)
11728#addu $sp, $sp, 4
11732#subu $sp, $sp, 4
11736#sw $t0, ($sp)
# end: Call at 430.14; stackHeight = 24
11740#lw $t0, ($sp)
11744#addu $sp, $sp, 4
# end: CallStatement at 430.14; stackHeight = 20
# begin: CallStatement at 431.15; stackHeight = 20
# begin: Call at 431.15; stackHeight = 20
# begin: IdentifierExp at 431.7; stackHeight = 20
11748#lw $t0, 12($sp) #**LocalVar
11752#subu $sp, $sp, 4
11756#sw $t0, ($sp)
# end: IdentifierExp at 431.7; stackHeight = 24
11760#lw $t0, 0($sp)
11764#sw $s2, 0($sp)
11768#move $s2, $t0
11772#beq $s2, $0, nullPtrException
11776#lw $t0, -12($s2)
11780#lw $t0, 20($t0)
11784#jalr $t0
11788#addu $sp, $sp, 0
11792#lw $s2, ($sp)
11796#addu $sp, $sp, 4
11800#subu $sp, $sp, 4
11804#sw $t0, ($sp)
# end: Call at 431.15; stackHeight = 24
11808#lw $t0, ($sp)
11812#addu $sp, $sp, 4
# end: CallStatement at 431.15; stackHeight = 20
11816#addu $sp, $sp, 0
# end: Block at 427.23; stackHeight = 20
11820#j if_done_902
11824:if_else_902:
# begin: Block at 433.8; stackHeight = 20
# begin: LocalVarDecl at 434.27; stackHeight = 20
# begin: Call at 434.39; stackHeight = 20
# begin: IdentifierExp at 434.31; stackHeight = 20
11824#lw $t0, 12($sp) #**LocalVar
11828#subu $sp, $sp, 4
11832#sw $t0, ($sp)
# end: IdentifierExp at 434.31; stackHeight = 24
11836#lw $t0, 0($sp)
11840#sw $s2, 0($sp)
11844#move $s2, $t0
11848#beq $s2, $0, nullPtrException
11852#lw $t0, -12($s2)
11856#lw $t0, 36($t0)
11860#jalr $t0
11864#addu $sp, $sp, 0
11868#lw $s2, ($sp)
11872#addu $sp, $sp, 4
11876#subu $sp, $sp, 4
11880#sw $t0, ($sp)
# end: Call at 434.39; stackHeight = 24
11884#lw $0, ($sp) #**r
# end: LocalVarDecl at 434.27; stackHeight = 24
# begin: If at 435.7; stackHeight = 24
# begin: Call at 435.37; stackHeight = 24
# begin: Call at 435.13; stackHeight = 24
# begin: IdentifierExp at 435.11; stackHeight = 24
11888#lw $t0, 0($sp) #**LocalVar
11892#subu $sp, $sp, 4
11896#sw $t0, ($sp)
# end: IdentifierExp at 435.11; stackHeight = 28
# begin: IdentifierExp at 435.22; stackHeight = 28
11900#lw $t0, 32($sp) #**LocalVar
11904#subu $sp, $sp, 4
11908#sw $t0, ($sp)
# end: IdentifierExp at 435.22; stackHeight = 32
11912#lw $t0, 4($sp)
11916#sw $s2, 4($sp)
11920#move $s2, $t0
11924#beq $s2, $0, nullPtrException
11928#lw $t0, -12($s2)
11932#lw $t0, 72($t0)
11936#jalr $t0
11940#addu $sp, $sp, 4
11944#lw $s2, ($sp)
11948#addu $sp, $sp, 4
11952#subu $sp, $sp, 4
11956#sw $t0, ($sp)
# end: Call at 435.13; stackHeight = 28
11960#lw $t0, 0($sp)
11964#sw $s2, 0($sp)
11968#move $s2, $t0
11972#beq $s2, $0, nullPtrException
11976#lw $t0, -12($s2)
11980#lw $t0, 24($t0)
11984#jalr $t0
11988#addu $sp, $sp, 0
11992#lw $s2, ($sp)
11996#addu $sp, $sp, 4
12000#subu $sp, $sp, 4
12004#sw $t0, ($sp)
# end: Call at 435.37; stackHeight = 28
12008#lw $t0, ($sp)
12012#addu $sp, $sp, 4
12016#beq $t0, $0, if_else_900
# begin: Block at 435.46; stackHeight = 24
# begin: Assign at 437.11; stackHeight = 24
# begin: IdentifierExp at 437.13; stackHeight = 24
12020#lw $t0, 0($sp) #**LocalVar
12024#subu $sp, $sp, 4
12028#sw $t0, ($sp)
# end: IdentifierExp at 437.13; stackHeight = 28
12032#lw $t0, ($sp)
12036#addu $sp, $sp, 4
12040#sw $t0, 20($sp)
# end: Assign at 437.11; stackHeight = 24
# begin: CallStatement at 438.9; stackHeight = 24
# begin: Call at 438.9; stackHeight = 24
12044#subu $sp, $sp, 4
12048#sw $s2, ($sp)
# begin: Call at 438.20; stackHeight = 28
# begin: IdentifierExp at 438.18; stackHeight = 28
12052#lw $t0, 4($sp) #**LocalVar
12056#subu $sp, $sp, 4
12060#sw $t0, ($sp)
# end: IdentifierExp at 438.18; stackHeight = 32
# begin: IdentifierExp at 438.28; stackHeight = 32
12064#lw $t0, 36($sp) #**LocalVar
12068#subu $sp, $sp, 4
12072#sw $t0, ($sp)
# end: IdentifierExp at 438.28; stackHeight = 36
12076#lw $t0, 4($sp)
12080#sw $s2, 4($sp)
12084#move $s2, $t0
12088#beq $s2, $0, nullPtrException
12092#lw $t0, -12($s2)
12096#lw $t0, 76($t0)
12100#jalr $t0
12104#addu $sp, $sp, 4
12108#lw $s2, ($sp)
12112#addu $sp, $sp, 4
12116#subu $sp, $sp, 4
12120#sw $t0, ($sp)
# end: Call at 438.20; stackHeight = 32
# begin: IdentifierExp at 438.44; stackHeight = 32
12124#lw $t0, 36($sp) #**LocalVar
12128#subu $sp, $sp, 4
12132#sw $t0, ($sp)
# end: IdentifierExp at 438.44; stackHeight = 36
12136#lw $t0, 8($sp)
12140#sw $s2, 8($sp)
12144#move $s2, $t0
12148#beq $s2, $0, nullPtrException
12152#lw $t0, -12($s2)
12156#lw $t0, 80($t0)
12160#jalr $t0
12164#addu $sp, $sp, 8
12168#lw $s2, ($sp)
12172#addu $sp, $sp, 4
12176#subu $sp, $sp, 4
12180#sw $t0, ($sp)
# end: Call at 438.9; stackHeight = 28
12184#lw $t0, ($sp)
12188#addu $sp, $sp, 4
# end: CallStatement at 438.9; stackHeight = 24
# begin: CallStatement at 439.6; stackHeight = 24
# begin: Call at 439.6; stackHeight = 24
# begin: IdentifierExp at 439.4; stackHeight = 24
12192#lw $t0, 0($sp) #**LocalVar
12196#subu $sp, $sp, 4
12200#sw $t0, ($sp)
# end: IdentifierExp at 439.4; stackHeight = 28
12204#subu $sp, $sp, 4
12208#sw $s2, ($sp)
# begin: IdentifierExp at 439.20; stackHeight = 32
12212#lw $t0, 36($sp) #**LocalVar
12216#subu $sp, $sp, 4
12220#sw $t0, ($sp)
# end: IdentifierExp at 439.20; stackHeight = 36
12224#lw $t0, 8($sp)
12228#sw $s2, 8($sp)
12232#move $s2, $t0
12236#beq $s2, $0, nullPtrException
12240#lw $t0, -12($s2)
12244#lw $t0, 84($t0)
12248#jalr $t0
12252#addu $sp, $sp, 8
12256#lw $s2, ($sp)
12260#addu $sp, $sp, 4
12264#subu $sp, $sp, 4
12268#sw $t0, ($sp)
# end: Call at 439.6; stackHeight = 28
12272#lw $t0, ($sp)
12276#addu $sp, $sp, 4
# end: CallStatement at 439.6; stackHeight = 24
# begin: CallStatement at 440.9; stackHeight = 24
# begin: Call at 440.9; stackHeight = 24
12280#subu $sp, $sp, 4
12284#sw $s2, ($sp)
12288#lw $t0, 0($sp)
12292#sw $s2, 0($sp)
12296#move $s2, $t0
12300#beq $s2, $0, nullPtrException
12304#lw $t0, -12($s2)
12308#lw $t0, 60($t0)
12312#jalr $t0
12316#addu $sp, $sp, 0
12320#lw $s2, ($sp)
12324#addu $sp, $sp, 4
12328#subu $sp, $sp, 4
12332#sw $t0, ($sp)
# end: Call at 440.9; stackHeight = 28
12336#lw $t0, ($sp)
12340#addu $sp, $sp, 4
# end: CallStatement at 440.9; stackHeight = 24
# begin: CallStatement at 441.6; stackHeight = 24
# begin: Call at 441.6; stackHeight = 24
# begin: IdentifierExp at 441.4; stackHeight = 24
12344#lw $t0, 0($sp) #**LocalVar
12348#subu $sp, $sp, 4
12352#sw $t0, ($sp)
# end: IdentifierExp at 441.4; stackHeight = 28
12356#lw $t0, 0($sp)
12360#sw $s2, 0($sp)
12364#move $s2, $t0
12368#beq $s2, $0, nullPtrException
12372#lw $t0, -12($s2)
12376#lw $t0, 20($t0)
12380#jalr $t0
12384#addu $sp, $sp, 0
12388#lw $s2, ($sp)
12392#addu $sp, $sp, 4
12396#subu $sp, $sp, 4
12400#sw $t0, ($sp)
# end: Call at 441.6; stackHeight = 28
12404#lw $t0, ($sp)
12408#addu $sp, $sp, 4
# end: CallStatement at 441.6; stackHeight = 24
12412#addu $sp, $sp, 0
# end: Block at 435.46; stackHeight = 24
12416#j if_done_900
12420:if_else_900:
# begin: If at 443.12; stackHeight = 24
# begin: Call at 443.41; stackHeight = 24
# begin: Call at 443.18; stackHeight = 24
# begin: IdentifierExp at 443.16; stackHeight = 24
12420#lw $t0, 0($sp) #**LocalVar
12424#subu $sp, $sp, 4
12428#sw $t0, ($sp)
# end: IdentifierExp at 443.16; stackHeight = 28
# begin: IdentifierExp at 443.26; stackHeight = 28
12432#lw $t0, 32($sp) #**LocalVar
12436#subu $sp, $sp, 4
12440#sw $t0, ($sp)
# end: IdentifierExp at 443.26; stackHeight = 32
12444#lw $t0, 4($sp)
12448#sw $s2, 4($sp)
12452#move $s2, $t0
12456#beq $s2, $0, nullPtrException
12460#lw $t0, -12($s2)
12464#lw $t0, 76($t0)
12468#jalr $t0
12472#addu $sp, $sp, 4
12476#lw $s2, ($sp)
12480#addu $sp, $sp, 4
12484#subu $sp, $sp, 4
12488#sw $t0, ($sp)
# end: Call at 443.18; stackHeight = 28
12492#lw $t0, 0($sp)
12496#sw $s2, 0($sp)
12500#move $s2, $t0
12504#beq $s2, $0, nullPtrException
12508#lw $t0, -12($s2)
12512#lw $t0, 24($t0)
12516#jalr $t0
12520#addu $sp, $sp, 0
12524#lw $s2, ($sp)
12528#addu $sp, $sp, 4
12532#subu $sp, $sp, 4
12536#sw $t0, ($sp)
# end: Call at 443.41; stackHeight = 28
12540#lw $t0, ($sp)
12544#addu $sp, $sp, 4
12548#beq $t0, $0, if_else_899
# begin: Block at 443.50; stackHeight = 24
# begin: LocalVarDecl at 445.24; stackHeight = 24
# begin: Call at 445.54; stackHeight = 24
# begin: Call at 445.31; stackHeight = 24
# begin: IdentifierExp at 445.29; stackHeight = 24
12552#lw $t0, 0($sp) #**LocalVar
12556#subu $sp, $sp, 4
12560#sw $t0, ($sp)
# end: IdentifierExp at 445.29; stackHeight = 28
# begin: IdentifierExp at 445.39; stackHeight = 28
12564#lw $t0, 32($sp) #**LocalVar
12568#subu $sp, $sp, 4
12572#sw $t0, ($sp)
# end: IdentifierExp at 445.39; stackHeight = 32
12576#lw $t0, 4($sp)
12580#sw $s2, 4($sp)
12584#move $s2, $t0
12588#beq $s2, $0, nullPtrException
12592#lw $t0, -12($s2)
12596#lw $t0, 76($t0)
12600#jalr $t0
12604#addu $sp, $sp, 4
12608#lw $s2, ($sp)
12612#addu $sp, $sp, 4
12616#subu $sp, $sp, 4
12620#sw $t0, ($sp)
# end: Call at 445.31; stackHeight = 28
12624#lw $t0, 0($sp)
12628#sw $s2, 0($sp)
12632#move $s2, $t0
12636#beq $s2, $0, nullPtrException
12640#lw $t0, -12($s2)
12644#lw $t0, 36($t0)
12648#jalr $t0
12652#addu $sp, $sp, 0
12656#lw $s2, ($sp)
12660#addu $sp, $sp, 4
12664#subu $sp, $sp, 4
12668#sw $t0, ($sp)
# end: Call at 445.54; stackHeight = 28
12672#lw $0, ($sp) #**rl
# end: LocalVarDecl at 445.24; stackHeight = 28
# begin: Assign at 446.11; stackHeight = 28
# begin: IdentifierExp at 446.13; stackHeight = 28
12676#lw $t0, 0($sp) #**LocalVar
12680#subu $sp, $sp, 4
12684#sw $t0, ($sp)
# end: IdentifierExp at 446.13; stackHeight = 32
12688#lw $t0, ($sp)
12692#addu $sp, $sp, 4
12696#sw $t0, 24($sp)
# end: Assign at 446.11; stackHeight = 28
# begin: CallStatement at 447.6; stackHeight = 28
# begin: Call at 447.6; stackHeight = 28
# begin: IdentifierExp at 447.4; stackHeight = 28
12700#lw $t0, 4($sp) #**LocalVar
12704#subu $sp, $sp, 4
12708#sw $t0, ($sp)
# end: IdentifierExp at 447.4; stackHeight = 32
# begin: Call at 447.17; stackHeight = 32
# begin: IdentifierExp at 447.14; stackHeight = 32
12712#lw $t0, 4($sp) #**LocalVar
12716#subu $sp, $sp, 4
12720#sw $t0, ($sp)
# end: IdentifierExp at 447.14; stackHeight = 36
# begin: IdentifierExp at 447.26; stackHeight = 36
12724#lw $t0, 40($sp) #**LocalVar
12728#subu $sp, $sp, 4
12732#sw $t0, ($sp)
# end: IdentifierExp at 447.26; stackHeight = 40
12736#lw $t0, 4($sp)
12740#sw $s2, 4($sp)
12744#move $s2, $t0
12748#beq $s2, $0, nullPtrException
12752#lw $t0, -12($s2)
12756#lw $t0, 72($t0)
12760#jalr $t0
12764#addu $sp, $sp, 4
12768#lw $s2, ($sp)
12772#addu $sp, $sp, 4
12776#subu $sp, $sp, 4
12780#sw $t0, ($sp)
# end: Call at 447.17; stackHeight = 36
# begin: IdentifierExp at 447.42; stackHeight = 36
12784#lw $t0, 40($sp) #**LocalVar
12788#subu $sp, $sp, 4
12792#sw $t0, ($sp)
# end: IdentifierExp at 447.42; stackHeight = 40
12796#lw $t0, 8($sp)
12800#sw $s2, 8($sp)
12804#move $s2, $t0
12808#beq $s2, $0, nullPtrException
12812#lw $t0, -12($s2)
12816#lw $t0, 84($t0)
12820#jalr $t0
12824#addu $sp, $sp, 8
12828#lw $s2, ($sp)
12832#addu $sp, $sp, 4
12836#subu $sp, $sp, 4
12840#sw $t0, ($sp)
# end: Call at 447.6; stackHeight = 32
12844#lw $t0, ($sp)
12848#addu $sp, $sp, 4
# end: CallStatement at 447.6; stackHeight = 28
# begin: CallStatement at 448.7; stackHeight = 28
# begin: Call at 448.7; stackHeight = 28
# begin: IdentifierExp at 448.4; stackHeight = 28
12852#lw $t0, 0($sp) #**LocalVar
12856#subu $sp, $sp, 4
12860#sw $t0, ($sp)
# end: IdentifierExp at 448.4; stackHeight = 32
# begin: IdentifierExp at 448.16; stackHeight = 32
12864#lw $t0, 8($sp) #**LocalVar
12868#subu $sp, $sp, 4
12872#sw $t0, ($sp)
# end: IdentifierExp at 448.16; stackHeight = 36
# begin: IdentifierExp at 448.19; stackHeight = 36
12876#lw $t0, 40($sp) #**LocalVar
12880#subu $sp, $sp, 4
12884#sw $t0, ($sp)
# end: IdentifierExp at 448.19; stackHeight = 40
12888#lw $t0, 8($sp)
12892#sw $s2, 8($sp)
12896#move $s2, $t0
12900#beq $s2, $0, nullPtrException
12904#lw $t0, -12($s2)
12908#lw $t0, 80($t0)
12912#jalr $t0
12916#addu $sp, $sp, 8
12920#lw $s2, ($sp)
12924#addu $sp, $sp, 4
12928#subu $sp, $sp, 4
12932#sw $t0, ($sp)
# end: Call at 448.7; stackHeight = 32
12936#lw $t0, ($sp)
12940#addu $sp, $sp, 4
# end: CallStatement at 448.7; stackHeight = 28
# begin: CallStatement at 449.9; stackHeight = 28
# begin: Call at 449.9; stackHeight = 28
12944#subu $sp, $sp, 4
12948#sw $s2, ($sp)
# begin: Call at 449.21; stackHeight = 32
# begin: IdentifierExp at 449.18; stackHeight = 32
12952#lw $t0, 4($sp) #**LocalVar
12956#subu $sp, $sp, 4
12960#sw $t0, ($sp)
# end: IdentifierExp at 449.18; stackHeight = 36
# begin: IdentifierExp at 449.29; stackHeight = 36
12964#lw $t0, 40($sp) #**LocalVar
12968#subu $sp, $sp, 4
12972#sw $t0, ($sp)
# end: IdentifierExp at 449.29; stackHeight = 40
12976#lw $t0, 4($sp)
12980#sw $s2, 4($sp)
12984#move $s2, $t0
12988#beq $s2, $0, nullPtrException
12992#lw $t0, -12($s2)
12996#lw $t0, 76($t0)
13000#jalr $t0
13004#addu $sp, $sp, 4
13008#lw $s2, ($sp)
13012#addu $sp, $sp, 4
13016#subu $sp, $sp, 4
13020#sw $t0, ($sp)
# end: Call at 449.21; stackHeight = 36
# begin: IdentifierExp at 449.45; stackHeight = 36
13024#lw $t0, 40($sp) #**LocalVar
13028#subu $sp, $sp, 4
13032#sw $t0, ($sp)
# end: IdentifierExp at 449.45; stackHeight = 40
13036#lw $t0, 8($sp)
13040#sw $s2, 8($sp)
13044#move $s2, $t0
13048#beq $s2, $0, nullPtrException
13052#lw $t0, -12($s2)
13056#lw $t0, 80($t0)
13060#jalr $t0
13064#addu $sp, $sp, 8
13068#lw $s2, ($sp)
13072#addu $sp, $sp, 4
13076#subu $sp, $sp, 4
13080#sw $t0, ($sp)
# end: Call at 449.9; stackHeight = 32
13084#lw $t0, ($sp)
13088#addu $sp, $sp, 4
# end: CallStatement at 449.9; stackHeight = 28
# begin: CallStatement at 450.7; stackHeight = 28
# begin: Call at 450.7; stackHeight = 28
# begin: IdentifierExp at 450.4; stackHeight = 28
13092#lw $t0, 0($sp) #**LocalVar
13096#subu $sp, $sp, 4
13100#sw $t0, ($sp)
# end: IdentifierExp at 450.4; stackHeight = 32
13104#subu $sp, $sp, 4
13108#sw $s2, ($sp)
# begin: IdentifierExp at 450.21; stackHeight = 36
13112#lw $t0, 40($sp) #**LocalVar
13116#subu $sp, $sp, 4
13120#sw $t0, ($sp)
# end: IdentifierExp at 450.21; stackHeight = 40
13124#lw $t0, 8($sp)
13128#sw $s2, 8($sp)
13132#move $s2, $t0
13136#beq $s2, $0, nullPtrException
13140#lw $t0, -12($s2)
13144#lw $t0, 84($t0)
13148#jalr $t0
13152#addu $sp, $sp, 8
13156#lw $s2, ($sp)
13160#addu $sp, $sp, 4
13164#subu $sp, $sp, 4
13168#sw $t0, ($sp)
# end: Call at 450.7; stackHeight = 32
13172#lw $t0, ($sp)
13176#addu $sp, $sp, 4
# end: CallStatement at 450.7; stackHeight = 28
# begin: CallStatement at 451.9; stackHeight = 28
# begin: Call at 451.9; stackHeight = 28
13180#subu $sp, $sp, 4
13184#sw $s2, ($sp)
13188#lw $t0, 0($sp)
13192#sw $s2, 0($sp)
13196#move $s2, $t0
13200#beq $s2, $0, nullPtrException
13204#lw $t0, -12($s2)
13208#lw $t0, 60($t0)
13212#jalr $t0
13216#addu $sp, $sp, 0
13220#lw $s2, ($sp)
13224#addu $sp, $sp, 4
13228#subu $sp, $sp, 4
13232#sw $t0, ($sp)
# end: Call at 451.9; stackHeight = 32
13236#lw $t0, ($sp)
13240#addu $sp, $sp, 4
# end: CallStatement at 451.9; stackHeight = 28
# begin: CallStatement at 452.7; stackHeight = 28
# begin: Call at 452.7; stackHeight = 28
# begin: IdentifierExp at 452.4; stackHeight = 28
13244#lw $t0, 0($sp) #**LocalVar
13248#subu $sp, $sp, 4
13252#sw $t0, ($sp)
# end: IdentifierExp at 452.4; stackHeight = 32
13256#lw $t0, 0($sp)
13260#sw $s2, 0($sp)
13264#move $s2, $t0
13268#beq $s2, $0, nullPtrException
13272#lw $t0, -12($s2)
13276#lw $t0, 20($t0)
13280#jalr $t0
13284#addu $sp, $sp, 0
13288#lw $s2, ($sp)
13292#addu $sp, $sp, 4
13296#subu $sp, $sp, 4
13300#sw $t0, ($sp)
# end: Call at 452.7; stackHeight = 32
13304#lw $t0, ($sp)
13308#addu $sp, $sp, 4
# end: CallStatement at 452.7; stackHeight = 28
13312#addu $sp, $sp, 4
# end: Block at 443.50; stackHeight = 24
13316#j if_done_899
13320:if_else_899:
# begin: Block at 454.3; stackHeight = 24
13320#addu $sp, $sp, 0
# end: Block at 454.3; stackHeight = 24
13324:if_done_899:
# end: If at 443.12; stackHeight = 24
13324:if_done_900:
# end: If at 435.7; stackHeight = 24
13324#addu $sp, $sp, 4
# end: Block at 433.8; stackHeight = 20
13328:if_done_902:
# end: If at 427.3; stackHeight = 20
13328#addu $sp, $sp, 0
# end: Block at 426.32; stackHeight = 20
13332#j if_done_905
13336:if_else_905:
# begin: Block at 456.2; stackHeight = 20
13336#addu $sp, $sp, 0
# end: Block at 456.2; stackHeight = 20
13340:if_done_905:
# end: If at 426.6; stackHeight = 20
13340#addu $sp, $sp, 8
# end: Block at 423.23; stackHeight = 12
13344#j if_done_908
13348:if_else_908:
# begin: Block at 457.2; stackHeight = 12
13348#addu $sp, $sp, 0
# end: Block at 457.2; stackHeight = 12
13352:if_done_908:
# end: If at 423.2; stackHeight = 12
# begin: IdentifierExp at 457.9; stackHeight = 12
13352#lw $t0, 8($sp) #**LocalVar
13356#subu $sp, $sp, 4
13360#sw $t0, ($sp)
# end: IdentifierExp at 457.9; stackHeight = 16
13364#lw $t0, ($sp)
13368#addu $sp, $sp, 4
13372#addu $sp, $sp, 12
13376#lw $ra, ($sp)
13380#addu $sp, $sp, 4
13384#jr $ra
# begin: MethodDeclVoid at 460.17; stackHeight = -4
.globl mth_NonNullRedBlackTree_helpPrint
13388:mth_NonNullRedBlackTree_helpPrint:
13388#subu $sp, $sp, 4
13392#sw $ra, ($sp)
# begin: CallStatement at 461.8; stackHeight = 0
# begin: Call at 461.8; stackHeight = 0
# begin: IdentifierExp at 461.2; stackHeight = 0
13396#lw $t0, 8($s2) #**InstVar
13400#subu $sp, $sp, 4
13404#sw $t0, ($sp)
# end: IdentifierExp at 461.2; stackHeight = 4
# begin: Call at 461.36; stackHeight = 4
# begin: NewObject at 461.18; stackHeight = 4
13408#li $s6, 3
13412#li $s7, 2
13416#jal newObject
13420#la $t0, CLASS_BooleanList
13424#sw $t0, -12($s7)
# end: NewObject at 461.18; stackHeight = 8
# begin: True at 461.41; stackHeight = 8
13428#li $t0, 1
13432#subu $sp, $sp, 4
13436#sw $t0, ($sp)
# end: True at 461.41; stackHeight = 12
# begin: IdentifierExp at 461.47; stackHeight = 12
13440#lw $t0, 20($sp) #**LocalVar
13444#subu $sp, $sp, 4
13448#sw $t0, ($sp)
# end: IdentifierExp at 461.47; stackHeight = 16
13452#lw $t0, 8($sp)
13456#sw $s2, 8($sp)
13460#move $s2, $t0
13464#beq $s2, $0, nullPtrException
13468#lw $t0, -12($s2)
13472#lw $t0, 12($t0)
13476#jalr $t0
13480#addu $sp, $sp, 8
13484#lw $s2, ($sp)
13488#addu $sp, $sp, 4
13492#subu $sp, $sp, 4
13496#sw $t0, ($sp)
# end: Call at 461.36; stackHeight = 8
# begin: IdentifierExp at 461.52; stackHeight = 8
13500#lw $t0, 12($sp) #**LocalVar
13504#subu $sp, $sp, 4
13508#sw $t0, ($sp)
# end: IdentifierExp at 461.52; stackHeight = 12
13512#lw $t0, 8($sp)
13516#sw $s2, 8($sp)
13520#move $s2, $t0
13524#beq $s2, $0, nullPtrException
13528#lw $t0, -12($s2)
13532#lw $t0, 44($t0)
13536#jalr $t0
13540#addu $sp, $sp, 8
13544#lw $s2, ($sp)
13548#addu $sp, $sp, 4
13552#subu $sp, $sp, 4
13556#sw $t0, ($sp)
# end: Call at 461.8; stackHeight = 4
13560#lw $t0, ($sp)
13564#addu $sp, $sp, 4
# end: CallStatement at 461.8; stackHeight = 0
# begin: CallStatement at 462.2; stackHeight = 0
# begin: Call at 462.2; stackHeight = 0
13568#subu $sp, $sp, 4
13572#sw $s2, ($sp)
# begin: IdentifierExp at 462.18; stackHeight = 4
13576#lw $t0, 12($sp) #**LocalVar
13580#subu $sp, $sp, 4
13584#sw $t0, ($sp)
# end: IdentifierExp at 462.18; stackHeight = 8
# begin: IdentifierExp at 462.22; stackHeight = 8
13588#lw $t0, 12($sp) #**LocalVar
13592#subu $sp, $sp, 4
13596#sw $t0, ($sp)
# end: IdentifierExp at 462.22; stackHeight = 12
13600#lw $t0, 8($sp)
13604#sw $s2, 8($sp)
13608#move $s2, $t0
13612#beq $s2, $0, nullPtrException
13616#lw $t0, -12($s2)
13620#lw $t0, 92($t0)
13624#jalr $t0
13628#addu $sp, $sp, 8
13632#lw $s2, ($sp)
13636#addu $sp, $sp, 4
13640#subu $sp, $sp, 4
13644#sw $t0, ($sp)
# end: Call at 462.2; stackHeight = 4
13648#lw $t0, ($sp)
13652#addu $sp, $sp, 4
# end: CallStatement at 462.2; stackHeight = 0
# begin: If at 463.2; stackHeight = 0
# begin: Equals at 463.9; stackHeight = 0
# begin: IdentifierExp at 463.6; stackHeight = 0
13656#lw $t0, 8($sp) #**LocalVar
13660#subu $sp, $sp, 4
13664#sw $t0, ($sp)
# end: IdentifierExp at 463.6; stackHeight = 4
13668#subu $sp, $sp, 4
13672#sw $0, ($sp)
13676#lw $t2, ($sp)
13680#addu $sp, $sp, 4
13684#lw $t1, ($sp)
13688#addu $sp, $sp, 4
13692#seq $t0, $t1, $t2
13693##...subu $at,$t1,$t2
13697##...sltiu $t0,$at,1
13700#subu $sp, $sp, 4
13704#sw $t0, ($sp)
# end: Equals at 463.9; stackHeight = 4
13708#lw $t0, ($sp)
13712#addu $sp, $sp, 4
13716#beq $t0, $0, if_else_950
# begin: Block at 463.18; stackHeight = 0
# begin: CallStatement at 464.10; stackHeight = 0
# begin: Call at 464.10; stackHeight = 0
# begin: IdentifierExp at 464.6; stackHeight = 0
13720#lw $t0, 4($sp) #**LocalVar
13724#subu $sp, $sp, 4
13728#sw $t0, ($sp)
# end: IdentifierExp at 464.6; stackHeight = 4
# begin: StringLiteral at 464.19; stackHeight = 4
13732#li $t0, strLit_933
13736#subu $sp, $sp, 4
13740#sw $t0, ($sp)
# end: StringLiteral at 464.19; stackHeight = 8
13744#lw $t0, 4($sp)
13748#sw $s2, 4($sp)
13752#move $s2, $t0
13756#beq $s2, $0, nullPtrException
13760#lw $t0, -12($s2)
13764#lw $t0, 24($t0)
13768#jalr $t0
13772#addu $sp, $sp, 4
13776#lw $s2, ($sp)
13780#addu $sp, $sp, 4
13784#subu $sp, $sp, 4
13788#sw $t0, ($sp)
# end: Call at 464.10; stackHeight = 4
13792#lw $t0, ($sp)
13796#addu $sp, $sp, 4
# end: CallStatement at 464.10; stackHeight = 0
13800#addu $sp, $sp, 0
# end: Block at 463.18; stackHeight = 0
13804#j if_done_950
13808:if_else_950:
# begin: If at 466.7; stackHeight = 0
# begin: InstVarAccess at 466.13; stackHeight = 0
# begin: IdentifierExp at 466.11; stackHeight = 0
13808#lw $t0, 8($sp) #**LocalVar
13812#subu $sp, $sp, 4
13816#sw $t0, ($sp)
# end: IdentifierExp at 466.11; stackHeight = 4
13820#lw $t0, ($sp)
13824#addu $sp, $sp, 4
13828#beq $t0, $0, nullPtrException
13832#lw $t0, -64($t0)
13836#subu $sp, $sp, 4
13840#sw $t0, ($sp)
# end: InstVarAccess at 466.13; stackHeight = 4
13844#lw $t0, ($sp)
13848#addu $sp, $sp, 4
13852#beq $t0, $0, if_else_949
# begin: Block at 466.19; stackHeight = 0
# begin: CallStatement at 467.10; stackHeight = 0
# begin: Call at 467.10; stackHeight = 0
# begin: IdentifierExp at 467.6; stackHeight = 0
13856#lw $t0, 4($sp) #**LocalVar
13860#subu $sp, $sp, 4
13864#sw $t0, ($sp)
# end: IdentifierExp at 467.6; stackHeight = 4
# begin: StringLiteral at 467.19; stackHeight = 4
13868#li $t0, strLit_940
13872#subu $sp, $sp, 4
13876#sw $t0, ($sp)
# end: StringLiteral at 467.19; stackHeight = 8
13880#lw $t0, 4($sp)
13884#sw $s2, 4($sp)
13888#move $s2, $t0
13892#beq $s2, $0, nullPtrException
13896#lw $t0, -12($s2)
13900#lw $t0, 24($t0)
13904#jalr $t0
13908#addu $sp, $sp, 4
13912#lw $s2, ($sp)
13916#addu $sp, $sp, 4
13920#subu $sp, $sp, 4
13924#sw $t0, ($sp)
# end: Call at 467.10; stackHeight = 4
13928#lw $t0, ($sp)
13932#addu $sp, $sp, 4
# end: CallStatement at 467.10; stackHeight = 0
13936#addu $sp, $sp, 0
# end: Block at 466.19; stackHeight = 0
13940#j if_done_949
13944:if_else_949:
# begin: Block at 469.7; stackHeight = 0
# begin: CallStatement at 470.10; stackHeight = 0
# begin: Call at 470.10; stackHeight = 0
# begin: IdentifierExp at 470.6; stackHeight = 0
13944#lw $t0, 4($sp) #**LocalVar
13948#subu $sp, $sp, 4
13952#sw $t0, ($sp)
# end: IdentifierExp at 470.6; stackHeight = 4
# begin: StringLiteral at 470.19; stackHeight = 4
13956#li $t0, strLit_945
13960#subu $sp, $sp, 4
13964#sw $t0, ($sp)
# end: StringLiteral at 470.19; stackHeight = 8
13968#lw $t0, 4($sp)
13972#sw $s2, 4($sp)
13976#move $s2, $t0
13980#beq $s2, $0, nullPtrException
13984#lw $t0, -12($s2)
13988#lw $t0, 24($t0)
13992#jalr $t0
13996#addu $sp, $sp, 4
14000#lw $s2, ($sp)
14004#addu $sp, $sp, 4
14008#subu $sp, $sp, 4
14012#sw $t0, ($sp)
# end: Call at 470.10; stackHeight = 4
14016#lw $t0, ($sp)
14020#addu $sp, $sp, 4
# end: CallStatement at 470.10; stackHeight = 0
14024#addu $sp, $sp, 0
# end: Block at 469.7; stackHeight = 0
14028:if_done_949:
# end: If at 466.7; stackHeight = 0
14028:if_done_950:
# end: If at 463.2; stackHeight = 0
# begin: If at 472.2; stackHeight = 0
# begin: Call at 472.6; stackHeight = 0
14028#subu $sp, $sp, 4
14032#sw $s2, ($sp)
14036#lw $t0, 0($sp)
14040#sw $s2, 0($sp)
14044#move $s2, $t0
14048#beq $s2, $0, nullPtrException
14052#lw $t0, -12($s2)
14056#lw $t0, 16($t0)
14060#jalr $t0
14064#addu $sp, $sp, 0
14068#lw $s2, ($sp)
14072#addu $sp, $sp, 4
14076#subu $sp, $sp, 4
14080#sw $t0, ($sp)
# end: Call at 472.6; stackHeight = 4
14084#lw $t0, ($sp)
14088#addu $sp, $sp, 4
14092#beq $t0, $0, if_else_963
# begin: Block at 472.17; stackHeight = 0
# begin: CallStatement at 473.10; stackHeight = 0
# begin: Call at 473.10; stackHeight = 0
# begin: IdentifierExp at 473.6; stackHeight = 0
14096#lw $t0, 4($sp) #**LocalVar
14100#subu $sp, $sp, 4
14104#sw $t0, ($sp)
# end: IdentifierExp at 473.6; stackHeight = 4
# begin: StringLiteral at 473.19; stackHeight = 4
14108#li $t0, strLit_954
14112#subu $sp, $sp, 4
14116#sw $t0, ($sp)
# end: StringLiteral at 473.19; stackHeight = 8
14120#lw $t0, 4($sp)
14124#sw $s2, 4($sp)
14128#move $s2, $t0
14132#beq $s2, $0, nullPtrException
14136#lw $t0, -12($s2)
14140#lw $t0, 24($t0)
14144#jalr $t0
14148#addu $sp, $sp, 4
14152#lw $s2, ($sp)
14156#addu $sp, $sp, 4
14160#subu $sp, $sp, 4
14164#sw $t0, ($sp)
# end: Call at 473.10; stackHeight = 4
14168#lw $t0, ($sp)
14172#addu $sp, $sp, 4
# end: CallStatement at 473.10; stackHeight = 0
14176#addu $sp, $sp, 0
# end: Block at 472.17; stackHeight = 0
14180#j if_done_963
14184:if_else_963:
# begin: Block at 475.7; stackHeight = 0
# begin: CallStatement at 476.10; stackHeight = 0
# begin: Call at 476.10; stackHeight = 0
# begin: IdentifierExp at 476.6; stackHeight = 0
14184#lw $t0, 4($sp) #**LocalVar
14188#subu $sp, $sp, 4
14192#sw $t0, ($sp)
# end: IdentifierExp at 476.6; stackHeight = 4
# begin: StringLiteral at 476.19; stackHeight = 4
14196#li $t0, strLit_959
14200#subu $sp, $sp, 4
14204#sw $t0, ($sp)
# end: StringLiteral at 476.19; stackHeight = 8
14208#lw $t0, 4($sp)
14212#sw $s2, 4($sp)
14216#move $s2, $t0
14220#beq $s2, $0, nullPtrException
14224#lw $t0, -12($s2)
14228#lw $t0, 24($t0)
14232#jalr $t0
14236#addu $sp, $sp, 4
14240#lw $s2, ($sp)
14244#addu $sp, $sp, 4
14248#subu $sp, $sp, 4
14252#sw $t0, ($sp)
# end: Call at 476.10; stackHeight = 4
14256#lw $t0, ($sp)
14260#addu $sp, $sp, 4
# end: CallStatement at 476.10; stackHeight = 0
14264#addu $sp, $sp, 0
# end: Block at 475.7; stackHeight = 0
14268:if_done_963:
# end: If at 472.2; stackHeight = 0
# begin: CallStatement at 478.6; stackHeight = 0
# begin: Call at 478.6; stackHeight = 0
# begin: IdentifierExp at 478.2; stackHeight = 0
14268#lw $t0, 4($sp) #**LocalVar
14272#subu $sp, $sp, 4
14276#sw $t0, ($sp)
# end: IdentifierExp at 478.2; stackHeight = 4
# begin: IdentifierExp at 478.15; stackHeight = 4
14280#lw $t0, -16($s2) #**InstVar
14284#subu $sp, $sp, 8
14288#sw $s5, 4($sp)
14292#sw $t0, ($sp)
# end: IdentifierExp at 478.15; stackHeight = 12
14296#lw $t0, 8($sp)
14300#sw $s2, 8($sp)
14304#move $s2, $t0
14308#beq $s2, $0, nullPtrException
14312#lw $t0, -12($s2)
14316#lw $t0, 32($t0)
14320#jalr $t0
14324#addu $sp, $sp, 8
14328#lw $s2, ($sp)
14332#addu $sp, $sp, 4
14336#subu $sp, $sp, 4
14340#sw $t0, ($sp)
# end: Call at 478.6; stackHeight = 4
14344#lw $t0, ($sp)
14348#addu $sp, $sp, 4
# end: CallStatement at 478.6; stackHeight = 0
# begin: CallStatement at 479.6; stackHeight = 0
# begin: Call at 479.6; stackHeight = 0
# begin: IdentifierExp at 479.2; stackHeight = 0
14352#lw $t0, 4($sp) #**LocalVar
14356#subu $sp, $sp, 4
14360#sw $t0, ($sp)
# end: IdentifierExp at 479.2; stackHeight = 4
# begin: StringLiteral at 479.15; stackHeight = 4
14364#li $t0, strLit_969
14368#subu $sp, $sp, 4
14372#sw $t0, ($sp)
# end: StringLiteral at 479.15; stackHeight = 8
14376#lw $t0, 4($sp)
14380#sw $s2, 4($sp)
14384#move $s2, $t0
14388#beq $s2, $0, nullPtrException
14392#lw $t0, -12($s2)
14396#lw $t0, 24($t0)
14400#jalr $t0
14404#addu $sp, $sp, 4
14408#lw $s2, ($sp)
14412#addu $sp, $sp, 4
14416#subu $sp, $sp, 4
14420#sw $t0, ($sp)
# end: Call at 479.6; stackHeight = 4
14424#lw $t0, ($sp)
14428#addu $sp, $sp, 4
# end: CallStatement at 479.6; stackHeight = 0
# begin: CallStatement at 480.7; stackHeight = 0
# begin: Call at 480.7; stackHeight = 0
# begin: IdentifierExp at 480.2; stackHeight = 0
14432#lw $t0, 4($s2) #**InstVar
14436#subu $sp, $sp, 4
14440#sw $t0, ($sp)
# end: IdentifierExp at 480.2; stackHeight = 4
# begin: Call at 480.35; stackHeight = 4
# begin: NewObject at 480.17; stackHeight = 4
14444#li $s6, 3
14448#li $s7, 2
14452#jal newObject
14456#la $t0, CLASS_BooleanList
14460#sw $t0, -12($s7)
# end: NewObject at 480.17; stackHeight = 8
# begin: False at 480.40; stackHeight = 8
14464#subu $sp, $sp, 4
14468#sw $0, ($sp)
# end: False at 480.40; stackHeight = 12
# begin: IdentifierExp at 480.47; stackHeight = 12
14472#lw $t0, 20($sp) #**LocalVar
14476#subu $sp, $sp, 4
14480#sw $t0, ($sp)
# end: IdentifierExp at 480.47; stackHeight = 16
14484#lw $t0, 8($sp)
14488#sw $s2, 8($sp)
14492#move $s2, $t0
14496#beq $s2, $0, nullPtrException
14500#lw $t0, -12($s2)
14504#lw $t0, 12($t0)
14508#jalr $t0
14512#addu $sp, $sp, 8
14516#lw $s2, ($sp)
14520#addu $sp, $sp, 4
14524#subu $sp, $sp, 4
14528#sw $t0, ($sp)
# end: Call at 480.35; stackHeight = 8
# begin: IdentifierExp at 480.52; stackHeight = 8
14532#lw $t0, 12($sp) #**LocalVar
14536#subu $sp, $sp, 4
14540#sw $t0, ($sp)
# end: IdentifierExp at 480.52; stackHeight = 12
14544#lw $t0, 8($sp)
14548#sw $s2, 8($sp)
14552#move $s2, $t0
14556#beq $s2, $0, nullPtrException
14560#lw $t0, -12($s2)
14564#lw $t0, 44($t0)
14568#jalr $t0
14572#addu $sp, $sp, 8
14576#lw $s2, ($sp)
14580#addu $sp, $sp, 4
14584#subu $sp, $sp, 4
14588#sw $t0, ($sp)
# end: Call at 480.7; stackHeight = 4
14592#lw $t0, ($sp)
14596#addu $sp, $sp, 4
# end: CallStatement at 480.7; stackHeight = 0
14600#addu $sp, $sp, 0
14604#lw $ra, ($sp)
14608#addu $sp, $sp, 4
14612#jr $ra
# end: MethodDeclVoid at 460.17; stackHeight = -4
# begin: MethodDeclVoid at 483.17; stackHeight = -4
.globl mth_NonNullRedBlackTree_helpPrintIndent
14616:mth_NonNullRedBlackTree_helpPrintIndent:
14616#subu $sp, $sp, 4
14620#sw $ra, ($sp)
# begin: If at 484.2; stackHeight = 0
# begin: Not at 484.9; stackHeight = 0
# begin: Equals at 484.9; stackHeight = 0
# begin: IdentifierExp at 484.6; stackHeight = 0
14624#lw $t0, 8($sp) #**LocalVar
14628#subu $sp, $sp, 4
14632#sw $t0, ($sp)
# end: IdentifierExp at 484.6; stackHeight = 4
14636#subu $sp, $sp, 4
14640#sw $0, ($sp)
14644#lw $t2, ($sp)
14648#addu $sp, $sp, 4
14652#lw $t1, ($sp)
14656#addu $sp, $sp, 4
14660#seq $t0, $t1, $t2
14661##...subu $at,$t1,$t2
14665##...sltiu $t0,$at,1
14668#subu $sp, $sp, 4
14672#sw $t0, ($sp)
# end: Equals at 484.9; stackHeight = 4
14676#lw $t0, ($sp)
14680#xor $t0, $t0, 1
14684#sw $t0, ($sp)
# end: Not at 484.9; stackHeight = 4
14688#lw $t0, ($sp)
14692#addu $sp, $sp, 4
14696#beq $t0, $0, if_else_1027
# begin: Block at 484.18; stackHeight = 0
# begin: If at 485.6; stackHeight = 0
# begin: Not at 485.18; stackHeight = 0
# begin: Equals at 485.18; stackHeight = 0
# begin: InstVarAccess at 485.12; stackHeight = 0
# begin: IdentifierExp at 485.10; stackHeight = 0
14700#lw $t0, 8($sp) #**LocalVar
14704#subu $sp, $sp, 4
14708#sw $t0, ($sp)
# end: IdentifierExp at 485.10; stackHeight = 4
14712#lw $t0, ($sp)
14716#addu $sp, $sp, 4
14720#beq $t0, $0, nullPtrException
14724#lw $t0, 16($t0)
14728#subu $sp, $sp, 4
14732#sw $t0, ($sp)
# end: InstVarAccess at 485.12; stackHeight = 4
14736#subu $sp, $sp, 4
14740#sw $0, ($sp)
14744#lw $t2, ($sp)
14748#addu $sp, $sp, 4
14752#lw $t1, ($sp)
14756#addu $sp, $sp, 4
14760#seq $t0, $t1, $t2
14761##...subu $at,$t1,$t2
14765##...sltiu $t0,$at,1
14768#subu $sp, $sp, 4
14772#sw $t0, ($sp)
# end: Equals at 485.18; stackHeight = 4
14776#lw $t0, ($sp)
14780#xor $t0, $t0, 1
14784#sw $t0, ($sp)
# end: Not at 485.18; stackHeight = 4
14788#lw $t0, ($sp)
14792#addu $sp, $sp, 4
14796#beq $t0, $0, if_else_1024
# begin: Block at 485.27; stackHeight = 0
# begin: CallStatement at 486.3; stackHeight = 0
# begin: Call at 486.3; stackHeight = 0
14800#subu $sp, $sp, 4
14804#sw $s2, ($sp)
# begin: InstVarAccess at 486.21; stackHeight = 4
# begin: IdentifierExp at 486.19; stackHeight = 4
14808#lw $t0, 12($sp) #**LocalVar
14812#subu $sp, $sp, 4
14816#sw $t0, ($sp)
# end: IdentifierExp at 486.19; stackHeight = 8
14820#lw $t0, ($sp)
14824#addu $sp, $sp, 4
14828#beq $t0, $0, nullPtrException
14832#lw $t0, 16($t0)
14836#subu $sp, $sp, 4
14840#sw $t0, ($sp)
# end: InstVarAccess at 486.21; stackHeight = 8
# begin: IdentifierExp at 486.28; stackHeight = 8
14844#lw $t0, 12($sp) #**LocalVar
14848#subu $sp, $sp, 4
14852#sw $t0, ($sp)
# end: IdentifierExp at 486.28; stackHeight = 12
14856#lw $t0, 8($sp)
14860#sw $s2, 8($sp)
14864#move $s2, $t0
14868#beq $s2, $0, nullPtrException
14872#lw $t0, -12($s2)
14876#lw $t0, 92($t0)
14880#jalr $t0
14884#addu $sp, $sp, 8
14888#lw $s2, ($sp)
14892#addu $sp, $sp, 4
14896#subu $sp, $sp, 4
14900#sw $t0, ($sp)
# end: Call at 486.3; stackHeight = 4
14904#lw $t0, ($sp)
14908#addu $sp, $sp, 4
# end: CallStatement at 486.3; stackHeight = 0
# begin: If at 487.3; stackHeight = 0
# begin: Equals at 487.14; stackHeight = 0
# begin: InstVarAccess at 487.9; stackHeight = 0
# begin: IdentifierExp at 487.7; stackHeight = 0
14912#lw $t0, 8($sp) #**LocalVar
14916#subu $sp, $sp, 4
14920#sw $t0, ($sp)
# end: IdentifierExp at 487.7; stackHeight = 4
14924#lw $t0, ($sp)
14928#addu $sp, $sp, 4
14932#beq $t0, $0, nullPtrException
14936#lw $t0, -64($t0)
14940#subu $sp, $sp, 4
14944#sw $t0, ($sp)
# end: InstVarAccess at 487.9; stackHeight = 4
# begin: InstVarAccess at 487.24; stackHeight = 4
# begin: InstVarAccess at 487.19; stackHeight = 4
# begin: IdentifierExp at 487.17; stackHeight = 4
14948#lw $t0, 12($sp) #**LocalVar
14952#subu $sp, $sp, 4
14956#sw $t0, ($sp)
# end: IdentifierExp at 487.17; stackHeight = 8
14960#lw $t0, ($sp)
14964#addu $sp, $sp, 4
14968#beq $t0, $0, nullPtrException
14972#lw $t0, 16($t0)
14976#subu $sp, $sp, 4
14980#sw $t0, ($sp)
# end: InstVarAccess at 487.19; stackHeight = 8
14984#lw $t0, ($sp)
14988#addu $sp, $sp, 4
14992#beq $t0, $0, nullPtrException
14996#lw $t0, -64($t0)
15000#subu $sp, $sp, 4
15004#sw $t0, ($sp)
# end: InstVarAccess at 487.24; stackHeight = 8
15008#lw $t2, ($sp)
15012#addu $sp, $sp, 4
15016#lw $t1, ($sp)
15020#addu $sp, $sp, 4
15024#seq $t0, $t1, $t2
15025##...subu $at,$t1,$t2
15029##...sltiu $t0,$at,1
15032#subu $sp, $sp, 4
15036#sw $t0, ($sp)
# end: Equals at 487.14; stackHeight = 4
15040#lw $t0, ($sp)
15044#addu $sp, $sp, 4
15048#beq $t0, $0, if_else_1017
# begin: Block at 487.30; stackHeight = 0
# begin: CallStatement at 488.11; stackHeight = 0
# begin: Call at 488.11; stackHeight = 0
# begin: IdentifierExp at 488.7; stackHeight = 0
15052#lw $t0, 4($sp) #**LocalVar
15056#subu $sp, $sp, 4
15060#sw $t0, ($sp)
# end: IdentifierExp at 488.7; stackHeight = 4
# begin: StringLiteral at 488.20; stackHeight = 4
15064#li $t0, strLit_1008
15068#subu $sp, $sp, 4
15072#sw $t0, ($sp)
# end: StringLiteral at 488.20; stackHeight = 8
15076#lw $t0, 4($sp)
15080#sw $s2, 4($sp)
15084#move $s2, $t0
15088#beq $s2, $0, nullPtrException
15092#lw $t0, -12($s2)
15096#lw $t0, 24($t0)
15100#jalr $t0
15104#addu $sp, $sp, 4
15108#lw $s2, ($sp)
15112#addu $sp, $sp, 4
15116#subu $sp, $sp, 4
15120#sw $t0, ($sp)
# end: Call at 488.11; stackHeight = 4
15124#lw $t0, ($sp)
15128#addu $sp, $sp, 4
# end: CallStatement at 488.11; stackHeight = 0
15132#addu $sp, $sp, 0
# end: Block at 487.30; stackHeight = 0
15136#j if_done_1017
15140:if_else_1017:
# begin: Block at 490.8; stackHeight = 0
# begin: CallStatement at 491.11; stackHeight = 0
# begin: Call at 491.11; stackHeight = 0
# begin: IdentifierExp at 491.7; stackHeight = 0
15140#lw $t0, 4($sp) #**LocalVar
15144#subu $sp, $sp, 4
15148#sw $t0, ($sp)
# end: IdentifierExp at 491.7; stackHeight = 4
# begin: StringLiteral at 491.20; stackHeight = 4
15152#li $t0, strLit_1013
15156#subu $sp, $sp, 4
15160#sw $t0, ($sp)
# end: StringLiteral at 491.20; stackHeight = 8
15164#lw $t0, 4($sp)
15168#sw $s2, 4($sp)
15172#move $s2, $t0
15176#beq $s2, $0, nullPtrException
15180#lw $t0, -12($s2)
15184#lw $t0, 24($t0)
15188#jalr $t0
15192#addu $sp, $sp, 4
15196#lw $s2, ($sp)
15200#addu $sp, $sp, 4
15204#subu $sp, $sp, 4
15208#sw $t0, ($sp)
# end: Call at 491.11; stackHeight = 4
15212#lw $t0, ($sp)
15216#addu $sp, $sp, 4
# end: CallStatement at 491.11; stackHeight = 0
15220#addu $sp, $sp, 0
# end: Block at 490.8; stackHeight = 0
15224:if_done_1017:
# end: If at 487.3; stackHeight = 0
15224#addu $sp, $sp, 0
# end: Block at 485.27; stackHeight = 0
15228#j if_done_1024
15232:if_else_1024:
# begin: Block at 494.11; stackHeight = 0
# begin: CallStatement at 495.7; stackHeight = 0
# begin: Call at 495.7; stackHeight = 0
# begin: IdentifierExp at 495.3; stackHeight = 0
15232#lw $t0, 4($sp) #**LocalVar
15236#subu $sp, $sp, 4
15240#sw $t0, ($sp)
# end: IdentifierExp at 495.3; stackHeight = 4
# begin: StringLiteral at 495.16; stackHeight = 4
15244#li $t0, strLit_1020
15248#subu $sp, $sp, 4
15252#sw $t0, ($sp)
# end: StringLiteral at 495.16; stackHeight = 8
15256#lw $t0, 4($sp)
15260#sw $s2, 4($sp)
15264#move $s2, $t0
15268#beq $s2, $0, nullPtrException
15272#lw $t0, -12($s2)
15276#lw $t0, 24($t0)
15280#jalr $t0
15284#addu $sp, $sp, 4
15288#lw $s2, ($sp)
15292#addu $sp, $sp, 4
15296#subu $sp, $sp, 4
15300#sw $t0, ($sp)
# end: Call at 495.7; stackHeight = 4
15304#lw $t0, ($sp)
15308#addu $sp, $sp, 4
# end: CallStatement at 495.7; stackHeight = 0
15312#addu $sp, $sp, 0
# end: Block at 494.11; stackHeight = 0
15316:if_done_1024:
# end: If at 485.6; stackHeight = 0
15316#addu $sp, $sp, 0
# end: Block at 484.18; stackHeight = 0
15320#j if_done_1027
15324:if_else_1027:
# begin: Block at 498.5; stackHeight = 0
15324#addu $sp, $sp, 0
# end: Block at 498.5; stackHeight = 0
15328:if_done_1027:
# end: If at 484.2; stackHeight = 0
15328#addu $sp, $sp, 0
15332#lw $ra, ($sp)
15336#addu $sp, $sp, 4
15340#jr $ra
# end: MethodDeclVoid at 483.17; stackHeight = -4
.globl mth_BooleanList_init
15344:mth_BooleanList_init:
15344#subu $sp, $sp, 4
15348#sw $ra, ($sp)
# begin: Assign at 506.11; stackHeight = 0
# begin: IdentifierExp at 506.13; stackHeight = 0
15352#lw $t0, 8($sp) #**LocalVar
15356#subu $sp, $sp, 4
15360#sw $t0, ($sp)
# end: IdentifierExp at 506.13; stackHeight = 4
15364#lw $t0, ($sp)
15368#addu $sp, $sp, 4
15372#sw $t0, -16($s2)
# end: Assign at 506.11; stackHeight = 0
# begin: Assign at 507.12; stackHeight = 0
# begin: IdentifierExp at 507.14; stackHeight = 0
15376#lw $t0, 4($sp) #**LocalVar
15380#subu $sp, $sp, 4
15384#sw $t0, ($sp)
# end: IdentifierExp at 507.14; stackHeight = 4
15388#lw $t0, ($sp)
15392#addu $sp, $sp, 4
15396#sw $t0, 4($s2)
# end: Assign at 507.12; stackHeight = 0
15400#subu $sp, $sp, 4
15404#sw $s2, ($sp)
15408#lw $t0, ($sp)
15412#addu $sp, $sp, 4
15416#addu $sp, $sp, 0
15420#lw $ra, ($sp)
15424#addu $sp, $sp, 4
15428#jr $ra
# end: Program at 8.1; stackHeight = -4
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15432:mth_Object_hashCode:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
15432#    lw $t0,-8($s2) # get word with hash bits from this
15436#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
15440#    addu $t0,$t1

15444#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15448:mth_Object_equals:
15448#    move $t0,$s2 # first pointer (this)
15452#    lw $t1,($sp) # second pointer
15456#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
15457##...subu $at,$t0,$t1
15461##...sltiu $t0,$at,1

15464#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15468:mth_String_hashCode:
15468#    move $t0,$s2 # put this pointer in t0

15472#    li $t2,0 # current hash value
15476#    lw $t1,-4($t0) # negative of number of characters in string
15480#    beq $t1,$zero,done_hashCode_String # if zero length => done
15484#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
15488#    and $t0,0xfffffffc # adjust for padding
15489##...lui $at,65535
15493##...ori $at,$at,0xfffc
15497##...and $t0,$t0,$at
15500#    subu $t1,$t0,$t1 # address at end of string +12
15504:loop_hashCode_String:    
15504#    sll $t4,$t2,5 # multiply by 32
15508#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
15512#    lbu $t3,-12($t0) # current character
15516#    addu $t2,$t3 # add in current character
15520#    addu $t0,1 # go to next character's address
15524#    bne $t0,$t1,loop_hashCode_String # loop back if more
15528:done_hashCode_String:    

    # push int on stack
15528#    move $t0, $t2 # put $t2 in return slot
15532#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
15536:mth_Object_toString:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
15536#    subu $sp,4
15540#    sw $ra,($sp)
    
    # get hash value
15544#    lw $t2,-12($s2) # vtable address
15548#    lw $t0,($t2) # method address
15552#    jalr $t0
15556#    subu $sp,8 # push result (int in $t0) on stack
15560#    sw $s5,4($sp)
15564#    sw $t0,($sp)

    # compute print-size of hash value
15568#    li $t0, 1
15572#    lw $t1, ($sp)
15576#    srl $t1,$t1,4
15580#    beq $t1,$zero,toString_skip_loop
15584:toString_loop_top:
15584#    addu $t0,1
15588#    srl $t1,$t1,4
15592#    bne $t1,$zero,toString_loop_top
15596:toString_skip_loop:
15596#    subu $sp,8
15600#    sw $s5,4($sp)
15604#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
15608#    lw $t2,-12($s2) # vtable address
15612#    move $t0,$t2
15616:toString_checkTagBit:
15616#    subu $t0,1
15620#    lb $t1,($t0)
15624#    and $t1,0x80
15625##...lui $at,0
15629##...ori $at,$at,0x80
15633##...and $t1,$t1,$at
15636#    beq $t1,$zero,toString_checkTagBit
15640#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
15644#    subu $sp,8
15648#    sw $t1,($sp)
15652#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
15656#    move $s7,$zero # -4 offset header word
15660#    lw $t4,8($sp) # bytes for hash value
15664#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
15668#    addu $t4,8
15672#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
15676#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

15680#    li $t0,CLASS_String # store string vtable address into ...
15684#    sw $t0,-12($s7) # ... -12 offset in object header
15688#    lw $t2,-12($s2) # our object's vtable address
15692#    lw $t5,4($sp) # number characters in prefix
15696#    lw $t1,12($sp) # number of characters in hashcode
15700#    addu $t3,$t1,$t5 # number of characters in string ...
15704#    addu $t3,1 # ... including the '@' character
15708#    subu $t0,$zero,$t3 # store negated length into ...
15712#    sw $t0,-4($s7) # ... -4 offset header word
15716#    lw $t0,-8($s7) # get -8 offset header-word
15720#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
15721##...slt $at,$t0,$zero
15725##...beq $at,$zero,15744
15728#    and $t0,0xff # mask off object's hash value ...
15729##...lui $at,0
15733##...ori $at,$at,0xff
15737##...and $t0,$t0,$at
15740#    sw $t0,-8($s7) # ... and store back into -8 header-word
15744:skipMask_toString:
15744#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
15748#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
15752#    subu $t4,$t2,$t5
15756:toString_copyLoop:    
15756#    lb $t3,($t4)
15760#    and $t3,0x7f # mask off sign bit (in case first word)
15761##...lui $at,0
15765##...ori $at,$at,0x7f
15769##...and $t3,$t3,$at
15772#    sb $t3,-8($t0)
15776#    addu $t4,1
15780#    addu $t0,1
15784#    blt $t4,$t2,toString_copyLoop
15785##...slt $at,$t4,$t2
15789##...bne $at,$zero,15756

    # copy the '@' sign
15792#    li $t3,'@'
15796#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
15800#    addu $t2,$t0,$t1 # address of last byte in string to store +8
15804#    lw $t3,20($sp) # hash code to print
15808:toString_hashCopyLoop:
15808#    and $t4,$t3,0xf
15812#    srl $t3,4
15816#    lb $t4,hexChars($t4)
15820#    sb $t4,-8($t2)
15824#    subu $t2,$t2,1
15828#    bgt $t2,$t0,toString_hashCopyLoop
15829##...slt $at,$t0,$t2
15833##...bne $at,$zero,15808

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
15836#    addu $sp,28
15840#    lw $ra,($sp)
15844#    addu $sp,4
15848#    move $t0, $s7 # return string we created
15852#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
15856:mth_String_equals:
    
    # quick test for obvious false
15856#    lw $t0,($sp) # second parameter
15860#    beq $t0,$zero,goEsFalse # go return false if null
15864#    lw $t1,-12($t0) # vtable pointer
15868#    la $t2,CLASS_String # string vtable pointer
15872#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
15876#    subu $sp,12
15880#    sw $ra,8($sp)
15884#    sw $s2,4($sp)
15888#    sw $t0,($sp)
15892#    jal mth_String_compareTo
15896#    lw $s2, 4($sp) #restore this pointer and pop parameters
15900#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
15904#    seq $t0,$t0,$zero
15905##...subu $at,$t0,$zero
15909##...sltiu $t0,$at,1

    # pop return address and return $t0
15912#    lw $ra,($sp)
15916#    addu $sp,4

15920#    jr $ra # return
    
15924:goEsFalse:
    # put 0 in $t0 and return
15924#    li $t0, 0
15928#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
15932:mth_String_toString:
    #we are a string, so return this.
15932#    move $t0, $s2
15936#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
15940:mth_Lib_readLine:
    
15940#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
15944#    sw $ra, 4($sp) # save $ra
15948#    move $t1,$sp # save "original" sp

15952:  doRead:

    # read the character
15952#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
15956#    subu $t2,$v0,13
15960#    bne $t2,$zero,notReturnRL
15964#    jal readLogicalChar
15968#    subu $t2,$v0,10 # check for newline
15972#    beq $t2,$zero,foundNewLine
15976#    sw $v0,lastCharRead # push back character into queue
15980#    j foundNewLine # go process the line

15984:  notReturnRL:

    # at this point, $v0 has our character

15984#    subu $t0,$v0,10
15988#    beq $t0,$zero,foundNewLine
15992#    blt $v0,$zero,foundEof
15993##...slt $at,$v0,$zero
15997##...bne $at,$zero,16012

    # we have a character, so push it onto stack
16000#    subu $sp,$sp,4
16004#    sw $v0,($sp)

    # loop back up to get next character
16008#    j doRead

16012:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
16012#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
16016#    li $s7, 0 # return-value: null
16020#    j rlReturn # return

16024:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
16024#    subu $t0,$t1,$sp # number of chars we read (times 4)
16028#    srl $s6,$t0,2 # number of words on stack with chars
16032#    subu $sp,$sp,4 # push char-count ...
16036#    sw $s6,($sp) # ... onto stack
16040#    addu $t2,$t0,5 # GC tag, incl. for count-word
16044#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
16048#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
16052#    srl $s6,$s6,2  # data words in object
16056#    move $s7,$zero # object words in object
16060#    jal newObject  # allocate space
    
    # store header words
16064#    la $t0,CLASS_String
16068#    sw $t0,-12($s7)# store class tag (String) into object
16072#    lw $t2,4($sp) # char-count
16076#    sll $t1,$t2,2 # 4 times number of chars
16080#    subu $t2,$zero,$t2 # negative of char-count
16084#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
16088#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
16092#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
16093##...slt $at,$t0,$zero
16097##...beq $at,$zero,16116
16100#    and $t0,0xff # mask off object's hash value ...
16101##...lui $at,0
16105##...ori $at,$at,0xff
16109##...and $t0,$t0,$at
16112#    sw $t0,-8($s7) # ... and store back into -8 header-word
16116:  skipMask_readLine:

16116#    sll $t0,$t0,2 # data bytes in object
16120#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
16124#    subu $t0,$t0,$t2 # place to store last character (plus 9)
16128#    addu $sp,$sp,8 # pop redundant object-pointer and count
16132#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

16136#    beq $sp,$t1,rlReturn
16140:  charCopyLoop:
16140#    lw $t2,($sp)
16144#    sb $t2,-9($t0)
16148#    addu $sp,$sp,4
16152#    subu $t0,$t0,1
16156#    bne $sp,$t1,charCopyLoop
16160:  rlReturn:

16160#    lw $ra, 4($sp)
16164#    addu $sp, 8   # pop $ra and pointless word off stack
16168#    move $t0, $s7 # return string we allocated in $s7
16172#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
16176:mth_Lib_readInt:

    # save $ra by pushing onto stack
16176#    subu $sp,$sp,4
16180#    sw $ra,($sp)

16184:  riSkipWhiteLoop:
    # read a character
16184#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
16188#    subu $t0,$v0,32
16192#    bgt $t0,$zero,nonWhite
16193##...slt $at,$zero,$t0
16197##...bne $at,$zero,16240
16200#    beq $t0,$zero,riSkipWhiteLoop # start over if space
16204#    subu $t0,$v0,10
16208#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
16212#    subu $t0,$v0,9
16216#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
16220#    subu $t0,$v0,13
16224#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
16228#    subu $t0,$v0,12
16232#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
16236#    j badIntegerFormat # illegal integer char: abort program

16240:  nonWhite:
16240#    subu $t0,$v0,'-'
16244#    li $t4,1 # final multiplier
16248#    bne $t0,$zero,helpReadInt # go read
16252#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
16256#    jal readLogicalChar

16260:  helpReadInt:
16260#    li $t2,10
16264#    subu $t1,$v0,'0' # convert digit to 0-9 value
16268#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
16269##...sltu $at,$t1,$t2
16273##...beq $at,$zero,18556
16276#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

16280:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

16280#    jal readLogicalChar # read next character
16284#    subu $t1,$v0,'0' # convert digit to 0-9 value
16288#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
16289##...sltu $at,$t1,$t2
16293##...beq $at,$zero,16312

16296#    mul $t3,$t3,$t2 # multiply old value by 10
16297##...mult $t3,$t2
16301##...mflo $t3
16304#    addu $t3,$t3,$t1 # add in value of new digit
16308#    j digitLoop

16312:  doneDigitLoop:

    # "push back" unused character into queue
16312#    sw $v0,lastCharRead

    # restore return address
16316#    lw $ra,($sp)
16320#    addu $sp, 4

    # multiply by sign and put return value in $t0
16324#    mult $t3,$t4 # multiply to account for poss. minus sign
16328#    mflo $t3
16332#    move $t0, $t3
    
    # return
16336#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
16340:mth_Lib_readChar:

    # save $ra by pushing onto stack
16340#    subu $sp,$sp,4
16344#    sw $ra,($sp)

      # read the character
16348#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
16352#    lw $ra,($sp)
16356#    addu $sp, 4
16360#    move $t0, $v0

    # return
16364#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
16368:mth_Lib_printStr:
    # check for null, printing "(null)", if so
16368#    lw $t0,($sp)
16372#    bne $t0,$zero,psNotNull

    # print "(null)"
16376#    la $a0,nullStr
16380#    li $v0,4
16384#    syscall
16388#    j donePrintStr
    
16392:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
16392#    subu $t0,$t0,8
16396#    lw $t1,($t0) # number of data words, but needs modification
16400#    blt $t1,$zero,skipPrintStr1
16401##...slt $at,$t1,$zero
16405##...bne $at,$zero,16424
16408#    and $t1,0xff # mask out all but low byte
16409##...lui $at,0
16413##...ori $at,$at,0xff
16417##...and $t1,$t1,$at
16420#    b skipPrintStr2
16424:skipPrintStr1:
16424#    and $t1,0x7ffffff
16425##...lui $at,2047
16429##...ori $at,$at,0xffff
16433##...and $t1,$t1,$at
16436:skipPrintStr2:    
16436#    sll $t1,$t1,2
16440#    subu $t1,$t0,$t1 # first word in string
16444#    lw $t0,4($t0) # negative of string-length
16448#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
16452#    beq $t0,$t1,donePrintStr
16456:  psLoop:
16456#    lb $a0,($t1) # next byte
16460#    li $v0,11 # code for printing char
16464#        syscall # print the char
16468#    addu $t1,$t1,1 # go to next char
16472#    blt $t1,$t0,psLoop
16473##...slt $at,$t1,$t0
16477##...bne $at,$zero,16456

16480:  donePrintStr:
16480#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
16484:mth_Lib_printInt:
16484#    lw $a0,($sp)

    # print it
16488#    li $v0,1 # code for print-int
16492#    syscall

    # return
16496#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
16500:mth_Lib_printBool:
    # pop value off stack, along with 'this'
16500#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
16504#    la $a0,falseString
16508#    beq $t0,$zero,skipPB
16512#    la $a0,trueString
16516:  skipPB:
16516#    li $v0,4 # code for print-string
16520#    syscall

    # return
16524#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
16528:mth_String_substring:

    # save $ra by pushing onto stack
16528#    subu $sp,$sp,4
16532#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
16536#    move $t0,$s2
16540#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
16544#    lw $t0,-4($t0) # negative of string length
16548#    subu $t0,$zero,$t0 # string length
16552#    lw $t1,4($sp) # k
16556#    lw $t2,12($sp) # n
16560#    bgt $zero,$t2,strIndexOutOfBounds
16561##...slt $at,$t2,$zero
16565##...bne $at,$zero,18524
16568#    bgt $t2,$t1,strIndexOutOfBounds
16569##...slt $at,$t1,$t2
16573##...bne $at,$zero,18524
16576#    bgt $t1,$t0,strIndexOutOfBounds
16577##...slt $at,$t0,$t1
16581##...bne $at,$zero,18524

    # allocate memory
16584#    subu $s6,$t1,$t2 # # chars in target-string
16588#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
16592#    srl $s6,$s6,2 # convert bytes-count to word-count
16596#    move $s7,$zero # (no object-bytes in string)
16600#    jal newObject

    # store "String" tag in object-type field
16604#    la $t0,CLASS_String
16608#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
16612#    lw $t4,-8($s7) # data words in source string
16616#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
16617##...slt $at,$t4,$zero
16621##...beq $at,$zero,16640
16624#    and $t4,0xff # mask off object's hash value ...
16625##...lui $at,0
16629##...ori $at,$at,0xff
16633##...and $t4,$t4,$at
16636#    sw $t4,-8($s7) # ... and store back into -8 header-word
16640:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
16640#    lw $t1,8($sp) # k
16644#    lw $t2,16($sp) # n
16648#    subu $t0,$t2,$t1 # value to store
16652#    sw $t0,-4($s7) # store value
    
16656#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
16660#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
16664#    lw $t4,-8($t3) # data words in source string
16668#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
16672#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
16676#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
16680#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
16684#    lw $t2,-8($s7)   # data words in target string
16688#    sll $t2,$t2,2    # data bytes in target string
16692#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
16696:  subCopyLoopzz:
16696#    lb $t4,-8($t3)
16700#    sb $t4,-8($t2)
16704#    addu $t2,$t2,1
16708#    addu $t3,$t3,1
16712#    blt $t3,$t1,subCopyLoopzz
16713##...slt $at,$t3,$t1
16717##...bne $at,$zero,16696
    
16720:  doneSubCopyzz:
    # restore return address, store return value, pop stack
16720#    lw $ra,4($sp) # restore $ra
16724#    addu $sp,$sp,8 # pop ra, and allocated newObject
16728#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
16732#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
16736:mth_String_length:

    # the length is the negative of 4($s2)
16736#    lw $t0,-4($s2) # -length
16740#    subu $t0,$zero,$t0

    # return
16744#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
16748:mth_String_concat:
    # save $ra by pushing onto stack
16748#    subu $sp,$sp,4
16752#    sw $ra, ($sp)

    # get string pointers and check parameter for null
16756#    lw $t0,4($sp)
16760#    beq $t0,$zero,nullPtrException
16764#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
16768#    lw $t0,-4($t0) # negative size of second object
16772#    lw $t1,-4($t1) # negative size of first object
16776#    addu $s6,$t0,$t1 # sum of negative sizes
16780#    sra $s6,$s6,2 # negative word-size of char part
16784#    subu $s6,$zero,$s6 # word size of char part
16788#    addu $s6,$s6,1 # data word size, including v-table word
16792#    move $s7,$zero
16796#    jal newObject

    # store String vtable address in vtable address field
16800#    la $t0,CLASS_String
16804#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
16808#    lw $t4,-8($s7) # # data words in source string
16812#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
16813##...slt $at,$t4,$zero
16817##...beq $at,$zero,16836
16820#    and $t4,0xff # mask off object's hash value ...
16821##...lui $at,0
16825##...ori $at,$at,0xff
16829##...and $t4,$t4,$at
16832#    sw $t4,-8($s7) # ... and store back into -8 header-word
16836:skipMask_concat:

16836#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
16840#    move $t1,$s2   # first object
16844#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
16848#    lw $t2,-4($t0) # negative length of second object
16852#    lw $t3,-4($t1) # negative length of first object
16856#    addu $t4,$t2,$t3 # sum of negative lengths
16860#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
16864#    lw $t4,-8($t1) # # data words in first string
16868#    sll $t4,$t4,2 # # data bytes in first string
16872#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
16876#    lw $t4,-8($s7) # # data words in new string
16880#    sll $t4,$t4,2 # # data bytes in new string
16884#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
16888#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
16892#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
16896:  concatLoop1zz:
16896#    lb $t4,-8($t1)
16900#    sb $t4,-8($s7)
16904#    addu $s7,$s7,1
16908#    addu $t1,$t1,1
16912#    blt $t1,$t3,concatLoop1zz
16913##...slt $at,$t1,$t3
16917##...bne $at,$zero,16896
16920:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
16920#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
16924#    lw $t4,-8($t0) # # data words in second string
16928#    sll $t4,$t4,2 # # data bytes in second string
16932#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
16936#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
16940:  concatLoop2zz:
16940#    lb $t4,-8($t1)
16944#    sb $t4,-8($s7)
16948#    addu $s7,$s7,1
16952#    addu $t1,$t1,1
16956#    blt $t1,$t3,concatLoop2zz
16957##...slt $at,$t1,$t3
16961##...bne $at,$zero,16940
16964:  doneConcatLoop2zz:
 
16964:  concatRtnzz:
    # return
16964#    move $t0, $t9 # put saved return string in $t0
16968#    lw $ra, 4($sp)
16972#    addu $sp, 8 # pop ra and allocated newObject
16976#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
16980:mth_String_charAt:
    # get string
16980#    move $t0,$s2

    # check that index is in bounds
16984#    lw $t1,-4($t0) # negative of # data words in string
16988#    subu $t3,$zero,$t1 # # chars in string
16992#    lw $t2,($sp) # index
16996#    bgeu $t2,$t3,strIndexOutOfBounds
16997##...sltu $at,$t2,$t3
17001##...beq $at,$zero,18524

    # access element
17004#    lw $t1,-8($t0) # # data words in object
17008#    sll $t1,$t1,2 # - byte-offset from end of chars
17012#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
17016#    addu $t0,$t0,$t1 # - address of our char, offset by 8
17020#    lb $t0,-8($t0) # our char

    # return
17024#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
17028:mth_Lib_intToString:

    # save return address on stack; allocate space for dummy GC tag
17028#    subu $sp,$sp,8
17032#    sw $ra,4($sp)

    # save current sp
17036#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
17040#    li $t3,10

    # get argument, negate if negative
17044#    lw $t1,8($sp)
17048#    bge $t1,$zero,itsNonNegLoop
17049##...slt $at,$t1,$zero
17053##...beq $at,$zero,17060
17056#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
17060:  itsNonNegLoop:
17060#    divu $t1,$t3
17064#    mflo $t1 # quotient
17068#    mfhi $t4 # remainder
17072#    addu $t4,$t4,'0' # turn remainder into digit
17076#    subu $sp,$sp,4
17080#    sw $t4,($sp) # push digit onto stack
17084#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
17088#    lw $t4,8($t0)
17092#    bge $t4,$zero,itsSkipNeg
17093##...slt $at,$t4,$zero
17097##...beq $at,$zero,17112
17100#    li $t4,'-'
17104#    subu $sp,$sp,4
17108#    sw $t4,($sp)
17112:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
17112#    subu $s6,$t0,$sp
17116#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
17120#    sw $t3,($t0)
17124#    srl $s6,$s6,2
17128#    subu $sp,$sp,4
17132#    sw $s6,($sp)
    
    # allocate memory
17136#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
17140#    srl $s6,$s6,2
17144#    move $s7,$zero # no "object" words in object
17148#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
17152#    lw $t0,4($sp)
17156#    addu $sp,$sp,8

    # store "String" tag into class field
17160#    subu $s7,$s7,8 # address of header-1 word
17164#    la $t1,CLASS_String
17168#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
17172#    lw $t4,($s7) # # data words in source string
17176#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
17177##...slt $at,$t4,$zero
17181##...beq $at,$zero,17200
17184#    and $t4,0xff # mask off object's hash value ...
17185##...lui $at,0
17189##...ori $at,$at,0xff
17193##...and $t4,$t4,$at
17196#    sw $t4,($s7) # ... and store back into -8 header-word
17200:skipMask_intToString:
    
    # store negative of char-count into header-2 word
17200#    subu $t0,$zero,$t0
17204#    sw $t0,4($s7)

17208#    lw $t1,($s7) # number of data words in string
17212#    sll $t1,$t1,2 # number data bytes in string
17216#    subu $t1,$s7,$t1 # first location to store chars in string
17220#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
17224:  itsLoop:
17224#    lw $t2,($sp)
17228#    addu $sp,$sp,4
17232#    sb $t2,($t1)
17236#    addu $t1,$t1,1
17240#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
17244#    lw $ra,4($sp)
17248#    addu $sp,$sp,8
17252#    addu $t0,$t0,15
17256#    and $t0,$t0,0xfffffffc
17257##...lui $at,65535
17261##...ori $at,$at,0xfffc
17265##...and $t0,$t0,$at
17268#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
17272:mth_Lib_intToChar:
    # save return address
17272#    subu $sp,$sp,4
17276#    sw $ra,($sp)

    # allocate object
17280#    li $s6,2
17284#    move $s7,$zero
17288#    jal newObject

    # get n from string.
17292#    lw $t1,8($sp)

    # store "String" tag into class field
17296#    la $t0,CLASS_String
17300#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
17304#    lw $t4,-8($s7) # # data words in source string
17308#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
17309##...slt $at,$t4,$zero
17313##...beq $at,$zero,17332
17316#    and $t4,0xff # mask off object's hash value ...
17317##...lui $at,0
17321##...ori $at,$at,0xff
17325##...and $t4,$t4,$at
17328#    sw $t4,-8($s7) # ... and store back into -8 header-word
17332:  skipMask_intToChar:

    # store data in string
17332#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
17336#    li $t0,-1
17340#    sw $t0,-4($s7)

    # we're returning $s7
17344#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
17348#    lw $ra,4($sp)
17352#    addu $sp,$sp,8

    # return
17356#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
17360:mth_String_compareTo:
    # get string pointers and check parameter for null
17360#    lw $t0,($sp) # second string
17364#    beq $t0,$zero,nullPtrException
17368#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
17372#    lw $t2,-4($t0) # negative length of second string
17376#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
17380#    slt $t4,$t3,$t2
17384#    slt $t5,$t2,$t3
17388#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
17392#    lw $t2,-8($t0) # # data words in second string
17396#    lw $t3,-8($t1) # # data words in first string
17400#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
17404#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
17408#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
17412#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
17416#    beq $zero,$t5,skipStrCmpLenzz
17420#    move $t2,$t3
17424:  skipStrCmpLenzz:
17424#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
17428:  cmpLoopzz:
17428#    lw $t3,-8($t1) # word from str2
17432#    lw $t4,-8($t0) # word from str1
17436#    bne $t3,$t4,cmpNotEqualzz
17440#    addu $t1,$t1,4
17444#    addu $t0,$t0,4
17448#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
17452#    j cmpHitLimitzz

17456:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
17456#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
17460#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
17464#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
17468:  cmpHitLimitzz:
17468#    move $t0, $t5 # store return value
17472#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
17476:readLogicalChar:

    # check if we already have a character
17476#    lw $v0,lastCharRead
17480#    li $t0,-2
17484#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
17488#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
17492#    jr $ra # return
    
17496:  doReadCh:
    # we need to actually read a character: read and return
17496#    li $v0,12 # use system call to read a character
17500#    syscall
17504#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
17508:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
17508#    blt $s7,$zero arraySizeOutOfBounds
17509##...slt $at,$s7,$zero
17513##...bne $at,$zero,18540

    # mark the fact that we have not yet GC'd for this allocation
17516#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

17520:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
17520#    addu $t0,$s6,$s7
17524#    sll $t0,$t0,2
17528#    addu $t0,$t0,8 # amount of memory needed
17532#    addu $t1,$t0,$s3
17536#    bgtu $t1,$s4,doGC
17537##...sltu $at,$s4,$t1
17541##...bne $at,$zero,17664

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
17544#    move $t2,$s3
17548:  zeroObjLoop:
17548#    sw $zero,($s3)
17552#    lw $zero,($s3)

17556#    addu $s3,4
17560#    bltu $s3,$t1,zeroObjLoop
17561##...sltu $at,$s3,$t1
17565##...bne $at,$zero,17548

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
17568#    sll $t0,$s7,2    # number of post-header bytes
17572#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
17576#    li $t2,255
17580#    bgeu $s6,$t2 firstHeaderLarge
17581##...sltu $at,$s6,$t2
17585##...beq $at,$zero,17632
17588#    lw $t1,prevHashConstant
17592#    addu $t1,0x12b68fd2
17593##...lui $at,4791
17597##...addiu $at,$at,-28718
17601##...addu $t1,$at,$t1
17604#    sw $t1,prevHashConstant # update hash constant
17608#    or $t1,0x80000000 # set top bit
17609##...lui $at,32768
17613##...or $t1,$at,$t1
17616#    and $t1,0xffffff00 # clear low bit
17617##...lui $at,65535
17621##...ori $at,$at,0xff00
17625##...and $t1,$t1,$at
17628#    or $s6,$t1
17632:firstHeaderLarge:
17632#    sw $s6,-8($t0) # store header-1 value
17636#    lw $zero,-8($t0)

    # store second header-value
17640#    sw $s7,-4($t0)   # second header-word
17644#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
17648#    move $s7,$t0
17652#    subu $sp,$sp,4
17656#    sw $t0,($sp)

17660#    jr $ra
    
17664:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
17664#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
17668#    lw $t5,gcCount
17672#    addu $t5,1
17676#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
17680#    subu $sp,$sp,4
17684#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
17688#    lw $t0,cur_seg
17692#    move $t7,$s4
17696#    la $t6,seg1_start
17697##...lui $t6,16
17701##...addiu $t6,$t6,19748
17704#    la $s3,seg0_start
17708#    la $s4,seg0_end
17709##...lui $s4,16
17713##...addiu $s4,$s4,19748
17716#    sw $zero,cur_seg
17720#    bne $t0,$zero,skipGc1
17724#    la $t6,seg0_start
17728#    la $s3,seg1_start
17729##...lui $s3,16
17733##...addiu $s3,$s3,19748
17736#    la $s4,seg1_end
17737##...lui $s4,32
17741##...addiu $s4,$s4,19748
17744#    sw $s5,cur_seg
17748:  skipGc1:
17748#    li $t5,0x80000000
17752#    lw $t0,stack_bottom
17756#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

17760:  gcStackCopyLoop:
17760#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
17764#    sll $t2,$t1,31 # zero iff low bit was zero
17768#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
17772#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
17776#    bleu $t1,$t6,gcTestIterDone1
17777##...sltu $at,$t6,$t1
17781##...beq $at,$zero,17944
17784#    bgtu $t1,$t7,gcTestIterDone1
17785##...sltu $at,$t7,$t1
17789##...bne $at,$zero,17944

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
17792#    lw $t2,-8($t1) # possible forwarding tag
17796#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
17800#    lw $t2,-4($t1) # forwarding pointer: object's new address
17804#    sw $t2,4($t0) # update stack value
17808#    j gcTestIterDone1 # do next iteration

17812:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
17812#    bge $t2,$zero,gcSkip2
17813##...slt $at,$t2,$zero
17817##...beq $at,$zero,17832
17820#    and $t2,0xff #### mask off hash value
17821##...lui $at,0
17825##...ori $at,$at,0xff
17829##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

17832:  gcSkip2:
17832#    sll $t2,$t2,2
17836#    addu $t2,$t2,8
17840#    subu $t4,$t1,$t2 # address of first word of source
17844#    lw $t3,-4($t1) # number of object words (negative means zero)
17848#    bge $t3,$zero,gcH2Neg1
17849##...slt $at,$t3,$zero
17853##...beq $at,$zero,17860
17856#    move $t3,$zero
17860:  gcH2Neg1:
17860#    sll $t3,$t3,2
17864#    addu $t3,$t3,$t1 # address one word past last word of source

17868#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
17872#    lw $s0,($t4)
17876#    lw $s1,-8($t1)
17880#    sw $s1,($t4)
17884#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
17888:  gCinnerCopy1:
17888#    lw $s0,($t4)
17892#    sw $s0,($s3)
17896#    addu $t4,$t4,4
17900#    addu $s3,$s3,4
17904#    bltu $t4,$t3,gCinnerCopy1
17905##...sltu $at,$t4,$t3
17909##...bne $at,$zero,17888

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
17912#    sw $zero,-8($t1) # 0 in first header-slot
17916#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
17920#    sw $t2,4($t0)
17924#    lw $zero,-8($t2)
17928#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
17932#    j gcTestIterDone1

17936:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
17936#    subu $t0,$t0,$t1
17940#    subu $t0,$t0,3

17944:  gcTestIterDone1:
17944#    bgeu $t0,$sp,gcStackCopyLoop
17945##...sltu $at,$t0,$sp
17949##...beq $at,$zero,17760

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
17952#    lw $t1,cur_seg
17956#    la $t0,seg0_start
17960#    beq $t1,$zero,gcSkip4
17964#    la $t0,seg1_start
17965##...lui $t0,16
17969##...addiu $t0,$t0,19748


17972:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
17972#    bgeu $t0,$s3,gcFinishUp
17973##...sltu $at,$t0,$s3
17977##...beq $at,$zero,18268

    ###### begin outer loop to copy all non-stack-direct objects ######

17980:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
17980#    lw $t1,($t0) # (what will be) first header word for current object
17984#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
17988#    bge $t2,$zero,gcSkip4a # are there hash bits?
17989##...slt $at,$t2,$zero
17993##...beq $at,$zero,18008
17996#    and $t2,0xff # mask off hash bits
17997##...lui $at,0
18001##...ori $at,$at,0xff
18005##...and $t2,$t2,$at
18008:gcSkip4a:    
18008#    sll $t2,$t2,2 # # data bytes
18012#    addu $t2,$t2,8 # to skip header words
18016#    addu $t2,$t0,$t2 # pointer to new object
18020#    lw $t3,-8($t2) # word to swap
18024#    sw $t1,-8($t2) # store header word
18028#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
18032#    lw $t1,-12($t2) # vtable pointer
18036#    li $t0,dataArrayVTableStart # address of vtable for first data array
18040#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
18041##...slt $at,$t1,$t0
18045##...bne $at,$zero,18064

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
18048:  skipToNextObj:
18048#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
18052#    sll $t1,$t1,2 # convert to byte-count
18056#    addu $t0,$t2,$t1 # skip over object
18060#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
18064:  gcNotDataArray:
18064#    lw $t3,-4($t2) # # object words (negative treated as zero)
18068#    bge $t3,$zero,gcH2Neg2
18069##...slt $at,$t3,$zero
18073##...beq $at,$zero,18080
18076#    move $t3,$zero
18080:  gcH2Neg2:
18080#    sll $t3,$t3,2 # # object bytes
18084#    move $t0,$t2 # address of first pointer in object
18088#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
18092#    beq $t0,$s1,gcTestIterDone2
    
18096:  gcNextPointerInObject:
    # get pointer from object
18096#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
18100#    bleu $t1,$t6,gcGoNextPointerSlot
18101##...sltu $at,$t6,$t1
18105##...beq $at,$zero,18248
18108#    bgtu $t1,$t7,gcGoNextPointerSlot
18109##...sltu $at,$t7,$t1
18113##...bne $at,$zero,18248

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
18116#    lw $t8,-8($t1) # possible forwarding tag
18120#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
18124#    lw $t8,-4($t1) # forwarding pointer: object's new address
18128#    sw $t8,($t0) # update pointer in object
18132#    j gcGoNextPointerSlot # do next iteration

18136:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
18136#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
18137##...slt $at,$t8,$zero
18141##...beq $at,$zero,18156
18144#    and $t8,0xff # mask off hash bits
18145##...lui $at,0
18149##...ori $at,$at,0xff
18153##...and $t8,$t8,$at

18156:  gcSkip5:
18156#    sll $t8,$t8,2 # bytes in negative-offset portion ...
18160#    addu $t8,$t8,8 # ... add in bytes for header-words
18164#    subu $t4,$t1,$t8 # address of first word of source object
18168#    lw $t3,-4($t1) # # words in positive-offset portion
18172#    bge $t3,$zero,gcNoNeg
18173##...slt $at,$t3,$zero
18177##...beq $at,$zero,18184
18180#    move $t3,$zero # negative treated as zero
18184:  gcNoNeg:
18184#    sll $t3,$t3,2 # bytes in negative-offset portion
18188#    addu $t3,$t3,$t1 # address one word past last word of source

18192#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
18196#    lw $s0,($t4)
18200#    lw $t9,-8($t1)
18204#    sw $t9,($t4)
18208#    sw $s0,-8($t1)

    # copy all source bytes to the target
18212:  gCinnerCopy2:
18212#    lw $s0,($t4)
18216#    sw $s0,($s3)
18220#    addu $t4,$t4,4
18224#    addu $s3,$s3,4
18228#    bltu $t4,$t3,gCinnerCopy2
18229##...sltu $at,$t4,$t3
18233##...bne $at,$zero,18212

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
18236#    sw $zero,-8($t1) # 0 in first header-slot
18240#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
18244#    sw $t8,($t0)

18248:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
18248#    addu $t0,$t0,4
18252#    bltu $t0,$s1,gcNextPointerInObject
18253##...sltu $at,$t0,$s1
18257##...bne $at,$zero,18096

18260:  gcTestIterDone2:
18260#    bltu $t0,$s3,gcHeapCopyLoop
18261##...sltu $at,$t0,$s3
18265##...bne $at,$zero,17980

    ###### end outer loop to copy all non-stack-direct objects ######

18268:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
18268#    lw $s2,($sp)
18272#    addu $sp,$sp,4

    # mark us as having already GC'd
18276#    move $t5,$s5

    # go try and allocate again
18280#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
18284:vm_init:

    # mark bottom of stack
18284#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
18288#    move $s2,$zero

    #set up the "five" register
18292#    li $s5,5

18296#    la $s3,seg0_start
18300#    la $s4,seg0_end
18301##...lui $s4,16
18305##...addiu $s4,$s4,19748
    
    # return
18308#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
18312:divide:
    # get parameters; abort if divisor zero
18312#    lw $t0,($sp)
18316#    lw $t1,8($sp)
18320#    beq $t0,$zero,divByZeroError
    
    # perform division
18324#    div $t1,$t0
18328#    mflo $t0

    # store result, adjust stack and return
18332#    addu $sp,$sp,8 # adjust stack
18336#    sw $t0,($sp) # store result
18340#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
18344:remainder:
    # get parameters; abort if divisor zero
18344#    lw $t0,($sp)
18348#    lw $t1,8($sp)
18352#    beq $t0,$zero,divByZeroError
    
    # perform division
18356#    div $t1,$t0
18360#    mfhi $t0

    # store result, adjust stack and return
18364#    addu $sp,$sp,8 # adjust stack
18368#    sw $t0,($sp) # store result
18372#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
18376:checkCast:
    # get object, allow immediately if null
18376#    lw $t2,($sp)
18380#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
18384#    lw $t2,-12($t2) # vtable address
18388#    bge $t2,$t1,castException
18389##...slt $at,$t2,$t1
18393##...beq $at,$zero,18564
18396#    blt $t2,$t0,castException
18397##...slt $at,$t2,$t0
18401##...bne $at,$zero,18564
    
    # return, leaving object unchanged on stack
18404:  checkCastReturn:    
18404#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
18408:instanceOf:
    # get object, go return false if null
18408#    lw $t2,($sp)
18412#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
18416#    lw $t2,-12($t2) # vtable address
18420#    sge $t0,$t2,$t0 # are we >= the lower limit?
18421##...slt $t0,$t2,$t0
18425##...xori $t0,$t0,0x1
18428#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
18432#    and $t2,$t0,$t1
18436#    sw $t2,($sp)
18440:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
18440#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

18444:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
18444#    li $v0,4 # syscall-code for print-string
18448#    syscall
18452:exit:
    # print termination message
18452#    li $v0,4 # syscall-code for print-string
18456#    la $a0,exitString
18460#    syscall

    # print number of garbage collections
18464#    li $v0,4 # syscall-code for print-string
18468#    la $a0,gcCountMsg
18472#    syscall # print "Number of ..."
18476#    lw $a0,gcCount # number of GC's
18480#    li $v0,1 # code for print-int
18484#    syscall
18488#    li $v0,4 # syscall-code for print-string
18492#    la $a0,newlineString
18496#    syscall # print newline

    # terminate execution
18500#    li $v0,10 #syscall-code for "exit"
18504#    syscall

18508:outOfHeapMemory:
18508#    la $a0,heapMemoryMsg
18512#    j exitError
18516:divByZeroError:
18516#    la $a0,divByZeroMsg
18520#    j exitError
18524:strIndexOutOfBounds:
18524#    la $a0,strIndexOutOfBoundsMsg
18528#    j exitError
18532:arrayIndexOutOfBounds:
18532#    la $a0,arrayIndexOutOfBoundsMsg
18536#    j exitError
18540:arraySizeOutOfBounds:
18540#    la $a0,arraySizeOutOfBoundsMsg
18544#    j exitError
18548:nullPtrException:
18548#    la $a0,nullPtrExceptionMsg
18552#    j exitError
18556:badIntegerFormat:
18556#    la $a0,badIntegerFormatMsg
18560#    j exitError
18564:castException:
18564#    la $a0,castExceptionMsg
18568#    j exitError
############## data section ################
    .data
19376:hexChars:
    .ascii "0123456789abcdef"
    .align 2
19392:cur_seg:
    .word 0

19396:lastCharRead:
    .word -2 # -2 => no buffered character
19400:prevHashConstant:
    .word 0x2785173c
19404:gcCount:
    .word 0

19408:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
19435:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
19458:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
19493:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
19527:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
19560:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
19591:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
19639:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
19660:gcMsg: 
      .asciiz "\nGC!\n"
19666:gcCountMsg: 
      .asciiz "Number of garbage collections: "

19698:nullStr:
    .asciiz "null"
19703:trueString:
    .asciiz "true"
19708:falseString:
    .asciiz "false"
19714:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
19742:newlineString:
    .asciiz "\n"
    
    .align 2
19744:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

19748:seg0_start:
    .space 0x100000
1068324:seg0_end:
1068324:seg1_start:
    .space 0x100000
2116900:seg1_end:
