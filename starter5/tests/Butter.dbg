 .data # Program at 3.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
4580:CLASS_Object: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
4600:CLASS_String: # ClassDecl at 0.0
  .word mth_String_hashCode # MethodDeclNonVoid at 0.0
  .word mth_String_equals # MethodDeclNonVoid at 0.0
  .word mth_String_toString # MethodDeclNonVoid at 0.0
  .word mth_String_concat # MethodDeclNonVoid at 0.0
  .word mth_String_substring # MethodDeclNonVoid at 0.0
  .word mth_String_length # MethodDeclNonVoid at 0.0
  .word mth_String_charAt # MethodDeclNonVoid at 0.0
  .word mth_String_compareTo # MethodDeclNonVoid at 0.0
4632:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
4636:CLASS_Lib: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
# ****** class Toast ****** # ClassDecl at 28.7
  .byte 0 # ClassDecl at 28.7
  .byte 0 # ClassDecl at 28.7
  .byte 0 # ClassDecl at 28.7
  .byte 212 # 'T' with high bit set # ClassDecl at 28.7
  .byte 111 # 'o' # ClassDecl at 28.7
  .byte 97 # 'a' # ClassDecl at 28.7
  .byte 115 # 's' # ClassDecl at 28.7
  .byte 116 # 't' # ClassDecl at 28.7
4688:CLASS_Toast: # ClassDecl at 28.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
  .word mth_Toast_run # MethodDeclVoid at 30.17
# ****** class Jam ****** # ClassDecl at 9.7
  .byte 0 # ClassDecl at 9.7
  .byte 202 # 'J' with high bit set # ClassDecl at 9.7
  .byte 97 # 'a' # ClassDecl at 9.7
  .byte 109 # 'm' # ClassDecl at 9.7
4740:CLASS_Jam: # ClassDecl at 9.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
  .word mth_Toast_run # MethodDeclVoid at 30.17
  .word mth_Jam_test # MethodDeclVoid at 12.17
4792:END_CLASS_Jam: # ClassDecl at 9.7
4792:END_CLASS_Toast: # ClassDecl at 28.7
4792:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
4800:CLASS_RunMain: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
4812:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class Main ****** # ClassDecl at 3.7
  .byte 205 # 'M' with high bit set # ClassDecl at 3.7
  .byte 97 # 'a' # ClassDecl at 3.7
  .byte 105 # 'i' # ClassDecl at 3.7
  .byte 110 # 'n' # ClassDecl at 3.7
4816:CLASS_Main: # ClassDecl at 3.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Main_main # MethodDeclVoid at 4.17
4832:END_CLASS_Main: # ClassDecl at 3.7
4832:dataArrayVTableStart: # IntegerType at 0.0
4832:END_CLASS_Object: # ClassDecl at 0.0
  .byte 102 # StringLiteral at 14.13
  .byte 117 # StringLiteral at 14.13
  .byte 110 # StringLiteral at 14.13
  .byte 0 # StringLiteral at 14.13
  .word CLASS_String # StringLiteral at 14.13
  .word 2 # StringLiteral at 14.13
  .word -3 # StringLiteral at 14.13
4848:strLit_16: # StringLiteral at 14.13
  .byte 32 # StringLiteral at 20.22
  .byte 0 # StringLiteral at 20.22
  .byte 0 # StringLiteral at 20.22
  .byte 0 # StringLiteral at 20.22
  .word CLASS_String # StringLiteral at 20.22
  .word 2 # StringLiteral at 20.22
  .word -1 # StringLiteral at 20.22
4864:strLit_51: # StringLiteral at 20.22
  .byte 10 # StringLiteral at 22.18
  .byte 0 # StringLiteral at 22.18
  .byte 0 # StringLiteral at 22.18
  .byte 0 # StringLiteral at 22.18
  .word CLASS_String # StringLiteral at 22.18
  .word 2 # StringLiteral at 22.18
  .word -1 # StringLiteral at 22.18
4880:strLit_59: # StringLiteral at 22.18
  .byte 10 # StringLiteral at 36.23
  .byte 0 # StringLiteral at 36.23
  .byte 0 # StringLiteral at 36.23
  .byte 0 # StringLiteral at 36.23
  .word CLASS_String # StringLiteral at 36.23
  .word 2 # StringLiteral at 36.23
  .word -1 # StringLiteral at 36.23
4896:strLit_100: # StringLiteral at 36.23
# begin: Program at 3.1; stackHeight = 0
.text
.globl main
0:main:
0#  jal vm_init
# begin: CallStatement at 0.0; stackHeight = 0
# begin: Call at 0.0; stackHeight = 0
# begin: NewObject at 0.0; stackHeight = 0
4#li $s6, 2
8#li $s7, 1
12#jal newObject
16#la $t0, CLASS_Main
20#sw $t0, -12($s7)
# end: NewObject at 0.0; stackHeight = 4
24#lw $t0, 0($sp)
28#sw $s2, 0($sp)
32#move $s2, $t0
36#beq $s2, $0, nullPtrException
40#lw $t0, -12($s2)
44#lw $t0, 12($t0)
48#jalr $t0
52#addu $sp, $sp, 0
56#lw $s2, ($sp)
60#addu $sp, $sp, 4
64#subu $sp, $sp, 4
68#sw $t0, ($sp)
# end: Call at 0.0; stackHeight = 4
72#lw $t0, ($sp)
76#addu $sp, $sp, 4
# end: CallStatement at 0.0; stackHeight = 0
80#  li $v0, 10
84#  syscall
# begin: MethodDeclVoid at 4.17; stackHeight = 0
.globl mth_Main_main
88:mth_Main_main:
88#subu $sp, $sp, 4
92#sw $ra, ($sp)
# begin: CallStatement at 5.19; stackHeight = 0
# begin: Call at 5.19; stackHeight = 0
# begin: NewObject at 5.9; stackHeight = 0
96#li $s6, 4
100#li $s7, 2
104#jal newObject
108#la $t0, CLASS_Jam
112#sw $t0, -12($s7)
# end: NewObject at 5.9; stackHeight = 4
116#lw $t0, 0($sp)
120#sw $s2, 0($sp)
124#move $s2, $t0
128#beq $s2, $0, nullPtrException
132#lw $t0, -12($s2)
136#lw $t0, 44($t0)
140#jalr $t0
144#addu $sp, $sp, 0
148#lw $s2, ($sp)
152#addu $sp, $sp, 4
156#subu $sp, $sp, 4
160#sw $t0, ($sp)
# end: Call at 5.19; stackHeight = 4
164#lw $t0, ($sp)
168#addu $sp, $sp, 4
# end: CallStatement at 5.19; stackHeight = 0
172#addu $sp, $sp, 0
176#lw $ra, ($sp)
180#addu $sp, $sp, 4
184#jr $ra
# end: MethodDeclVoid at 4.17; stackHeight = -4
# begin: MethodDeclVoid at 12.17; stackHeight = -4
.globl mth_Jam_test
188:mth_Jam_test:
188#subu $sp, $sp, 4
192#sw $ra, ($sp)
# begin: Assign at 13.11; stackHeight = 0
# begin: IntegerLiteral at 13.13; stackHeight = 0
196#li $t0, 3
200#subu $sp, $sp, 8
204#sw $s5, 4($sp)
208#sw $t0, ($sp)
# end: IntegerLiteral at 13.13; stackHeight = 8
212#lw $t0, ($sp)
216#addu $sp, $sp, 8
220#sw $t0, -20($sp)
# end: Assign at 13.11; stackHeight = 0
# begin: Assign at 14.11; stackHeight = 0
# begin: StringLiteral at 14.13; stackHeight = 0
224#li $t0, strLit_16
228#subu $sp, $sp, 4
232#sw $t0, ($sp)
# end: StringLiteral at 14.13; stackHeight = 4
236#lw $t0, ($sp)
240#addu $sp, $sp, 4
244#sw $t0, 4($sp)
# end: Assign at 14.11; stackHeight = 0
# begin: Block at 15.9; stackHeight = 0
# begin: LocalVarDecl at 15.18; stackHeight = 0
# begin: IntegerLiteral at 15.22; stackHeight = 0
248#li $t0, 0
252#subu $sp, $sp, 8
256#sw $s5, 4($sp)
260#sw $t0, ($sp)
# end: IntegerLiteral at 15.22; stackHeight = 8
264#lw $0, ($sp) #**i
# end: LocalVarDecl at 15.18; stackHeight = 8
# begin: BreakTarget at 15.9; stackHeight = 8
268:while_cond_57:
# begin: LessThan at 15.27; stackHeight = 8
# begin: IdentifierExp at 15.25; stackHeight = 8
268#lw $t0, 0($sp) #**LocalVar
272#subu $sp, $sp, 8
276#sw $s5, 4($sp)
280#sw $t0, ($sp)
# end: IdentifierExp at 15.25; stackHeight = 16
# begin: IdentifierExp at 15.29; stackHeight = 16
284#lw $t0, 20($sp) #**LocalVar
288#subu $sp, $sp, 8
292#sw $s5, 4($sp)
296#sw $t0, ($sp)
# end: IdentifierExp at 15.29; stackHeight = 24
300#lw $t2, ($sp)
304#addu $sp, $sp, 8
308#lw $t1, ($sp)
312#addu $sp, $sp, 8
316#slt $t0, $t1, $t2
320#subu $sp, $sp, 4
324#sw $t0, ($sp)
# end: LessThan at 15.27; stackHeight = 12
328#lw $t0, ($sp)
332#addu $sp, $sp, 4
336#beq $t0, $0, break_target_57
# begin: Block at 15.9; stackHeight = 8
# begin: Block at 15.37; stackHeight = 8
# begin: LocalVarDecl at 16.21; stackHeight = 8
# begin: True at 16.25; stackHeight = 8
340#li $t0, 1
344#subu $sp, $sp, 4
348#sw $t0, ($sp)
# end: True at 16.25; stackHeight = 12
352#lw $0, ($sp) #**x
# end: LocalVarDecl at 16.21; stackHeight = 12
# begin: LocalVarDecl at 17.17; stackHeight = 12
# begin: IntegerLiteral at 17.21; stackHeight = 12
356#li $t0, 78
360#subu $sp, $sp, 8
364#sw $s5, 4($sp)
368#sw $t0, ($sp)
# end: IntegerLiteral at 17.21; stackHeight = 20
372#lw $0, ($sp) #**y
# end: LocalVarDecl at 17.17; stackHeight = 20
# begin: Assign at 18.15; stackHeight = 20
# begin: And at 18.23; stackHeight = 20
# begin: GreaterThan at 18.19; stackHeight = 20
# begin: IdentifierExp at 18.17; stackHeight = 20
376#lw $t0, 0($sp) #**LocalVar
380#subu $sp, $sp, 8
384#sw $s5, 4($sp)
388#sw $t0, ($sp)
# end: IdentifierExp at 18.17; stackHeight = 28
# begin: IntegerLiteral at 18.21; stackHeight = 28
392#li $t0, 0
396#subu $sp, $sp, 8
400#sw $s5, 4($sp)
404#sw $t0, ($sp)
# end: IntegerLiteral at 18.21; stackHeight = 36
408#lw $t2, ($sp)
412#addu $sp, $sp, 8
416#lw $t1, ($sp)
420#addu $sp, $sp, 8
424#sgt $t0, $t1, $t2
428#subu $sp, $sp, 4
432#sw $t0, ($sp)
# end: GreaterThan at 18.19; stackHeight = 24
436#lw $t0, ($sp)
440#beq $t0, $0, skip_43
444#lw $t0, ($sp)
448#addu $sp, $sp, 4
# begin: IdentifierExp at 18.26; stackHeight = 20
452#lw $t0, 8($sp) #**LocalVar
456#subu $sp, $sp, 4
460#sw $t0, ($sp)
# end: IdentifierExp at 18.26; stackHeight = 24
464:skip_43:
# end: And at 18.23; stackHeight = 24
464#lw $t0, ($sp)
468#addu $sp, $sp, 4
472#sw $t0, 8($sp)
# end: Assign at 18.15; stackHeight = 20
# begin: CallStatement at 19.13; stackHeight = 20
# begin: Call at 19.13; stackHeight = 20
476#subu $sp, $sp, 4
480#sw $s2, ($sp)
# begin: Plus at 19.23; stackHeight = 24
# begin: IdentifierExp at 19.22; stackHeight = 24
484#lw $t0, 16($sp) #**LocalVar
488#subu $sp, $sp, 8
492#sw $s5, 4($sp)
496#sw $t0, ($sp)
# end: IdentifierExp at 19.22; stackHeight = 32
# begin: IdentifierExp at 19.24; stackHeight = 32
500#lw $t0, 12($sp) #**LocalVar
504#subu $sp, $sp, 8
508#sw $s5, 4($sp)
512#sw $t0, ($sp)
# end: IdentifierExp at 19.24; stackHeight = 40
516#lw $t2, ($sp)
520#addu $sp, $sp, 8
524#lw $t1, ($sp)
528#addu $sp, $sp, 8
532#addu $t0, $t1, $t2
536#subu $sp, $sp, 8
540#sw $s5, 4($sp)
544#sw $t0, ($sp)
# end: Plus at 19.23; stackHeight = 32
548#lw $t0, 8($sp)
552#sw $s2, 8($sp)
556#move $s2, $t0
560#beq $s2, $0, nullPtrException
564#lw $t0, -12($s2)
568#lw $t0, 32($t0)
572#jalr $t0
576#addu $sp, $sp, 8
580#lw $s2, ($sp)
584#addu $sp, $sp, 4
588#subu $sp, $sp, 4
592#sw $t0, ($sp)
# end: Call at 19.13; stackHeight = 24
596#lw $t0, ($sp)
600#addu $sp, $sp, 4
# end: CallStatement at 19.13; stackHeight = 20
# begin: CallStatement at 20.13; stackHeight = 20
# begin: Call at 20.13; stackHeight = 20
604#subu $sp, $sp, 4
608#sw $s2, ($sp)
# begin: StringLiteral at 20.22; stackHeight = 24
612#li $t0, strLit_51
616#subu $sp, $sp, 4
620#sw $t0, ($sp)
# end: StringLiteral at 20.22; stackHeight = 28
624#lw $t0, 4($sp)
628#sw $s2, 4($sp)
632#move $s2, $t0
636#beq $s2, $0, nullPtrException
640#lw $t0, -12($s2)
644#lw $t0, 24($t0)
648#jalr $t0
652#addu $sp, $sp, 4
656#lw $s2, ($sp)
660#addu $sp, $sp, 4
664#subu $sp, $sp, 4
668#sw $t0, ($sp)
# end: Call at 20.13; stackHeight = 24
672#lw $t0, ($sp)
676#addu $sp, $sp, 4
# end: CallStatement at 20.13; stackHeight = 20
680#addu $sp, $sp, 12
# end: Block at 15.37; stackHeight = 8
# begin: Assign at 15.32; stackHeight = 8
# begin: Plus at 15.33; stackHeight = 8
# begin: IdentifierExp at 15.32; stackHeight = 8
684#lw $t0, 0($sp) #**LocalVar
688#subu $sp, $sp, 8
692#sw $s5, 4($sp)
696#sw $t0, ($sp)
# end: IdentifierExp at 15.32; stackHeight = 16
# begin: IntegerLiteral at 15.33; stackHeight = 16
700#li $t0, 1
704#subu $sp, $sp, 8
708#sw $s5, 4($sp)
712#sw $t0, ($sp)
# end: IntegerLiteral at 15.33; stackHeight = 24
716#lw $t2, ($sp)
720#addu $sp, $sp, 8
724#lw $t1, ($sp)
728#addu $sp, $sp, 8
732#addu $t0, $t1, $t2
736#subu $sp, $sp, 8
740#sw $s5, 4($sp)
744#sw $t0, ($sp)
# end: Plus at 15.33; stackHeight = 16
748#lw $t0, ($sp)
752#addu $sp, $sp, 8
756#sw $t0, 0($sp)
# end: Assign at 15.32; stackHeight = 8
760#addu $sp, $sp, 0
# end: Block at 15.9; stackHeight = 8
764#j while_cond_57
768:break_target_57:
# end: BreakTarget at 15.9; stackHeight = 8
768#addu $sp, $sp, 8
# end: Block at 15.9; stackHeight = 0
# begin: CallStatement at 22.9; stackHeight = 0
# begin: Call at 22.9; stackHeight = 0
772#subu $sp, $sp, 4
776#sw $s2, ($sp)
# begin: StringLiteral at 22.18; stackHeight = 4
780#li $t0, strLit_59
784#subu $sp, $sp, 4
788#sw $t0, ($sp)
# end: StringLiteral at 22.18; stackHeight = 8
792#lw $t0, 4($sp)
796#sw $s2, 4($sp)
800#move $s2, $t0
804#beq $s2, $0, nullPtrException
808#lw $t0, -12($s2)
812#lw $t0, 24($t0)
816#jalr $t0
820#addu $sp, $sp, 4
824#lw $s2, ($sp)
828#addu $sp, $sp, 4
832#subu $sp, $sp, 4
836#sw $t0, ($sp)
# end: Call at 22.9; stackHeight = 4
840#lw $t0, ($sp)
844#addu $sp, $sp, 4
# end: CallStatement at 22.9; stackHeight = 0
# begin: Assign at 23.9; stackHeight = 0
# begin: Plus at 23.10; stackHeight = 0
# begin: IdentifierExp at 23.9; stackHeight = 0
848#lw $t0, -20($s2) #**InstVar
852#subu $sp, $sp, 8
856#sw $s5, 4($sp)
860#sw $t0, ($sp)
# end: IdentifierExp at 23.9; stackHeight = 8
# begin: IntegerLiteral at 23.10; stackHeight = 8
864#li $t0, 1
868#subu $sp, $sp, 8
872#sw $s5, 4($sp)
876#sw $t0, ($sp)
# end: IntegerLiteral at 23.10; stackHeight = 16
880#lw $t2, ($sp)
884#addu $sp, $sp, 8
888#lw $t1, ($sp)
892#addu $sp, $sp, 8
896#addu $t0, $t1, $t2
900#subu $sp, $sp, 8
904#sw $s5, 4($sp)
908#sw $t0, ($sp)
# end: Plus at 23.10; stackHeight = 8
912#lw $t0, ($sp)
916#addu $sp, $sp, 8
920#sw $t0, -20($sp)
# end: Assign at 23.9; stackHeight = 0
# begin: Assign at 24.9; stackHeight = 0
# begin: Plus at 24.10; stackHeight = 0
# begin: IdentifierExp at 24.9; stackHeight = 0
924#lw $t0, -16($s2) #**InstVar
928#subu $sp, $sp, 8
932#sw $s5, 4($sp)
936#sw $t0, ($sp)
# end: IdentifierExp at 24.9; stackHeight = 8
# begin: IntegerLiteral at 24.10; stackHeight = 8
940#li $t0, 1
944#subu $sp, $sp, 8
948#sw $s5, 4($sp)
952#sw $t0, ($sp)
# end: IntegerLiteral at 24.10; stackHeight = 16
956#lw $t2, ($sp)
960#addu $sp, $sp, 8
964#lw $t1, ($sp)
968#addu $sp, $sp, 8
972#addu $t0, $t1, $t2
976#subu $sp, $sp, 8
980#sw $s5, 4($sp)
984#sw $t0, ($sp)
# end: Plus at 24.10; stackHeight = 8
988#lw $t0, ($sp)
992#addu $sp, $sp, 8
996#sw $t0, -16($sp)
# end: Assign at 24.9; stackHeight = 0
1000#addu $sp, $sp, 0
1004#lw $ra, ($sp)
1008#addu $sp, $sp, 4
1012#jr $ra
# end: MethodDeclVoid at 12.17; stackHeight = -4
# begin: MethodDeclVoid at 30.17; stackHeight = -4
.globl mth_Toast_run
1016:mth_Toast_run:
1016#subu $sp, $sp, 4
1020#sw $ra, ($sp)
# begin: LocalVarDecl at 31.13; stackHeight = 0
# begin: NewObject at 31.17; stackHeight = 0
1024#li $s6, 4
1028#li $s7, 2
1032#jal newObject
1036#la $t0, CLASS_Jam
1040#sw $t0, -12($s7)
# end: NewObject at 31.17; stackHeight = 4
1044#lw $0, ($sp) #**j
# end: LocalVarDecl at 31.13; stackHeight = 4
# begin: CallStatement at 32.11; stackHeight = 4
# begin: Call at 32.11; stackHeight = 4
# begin: IdentifierExp at 32.9; stackHeight = 4
1048#lw $t0, 0($sp) #**LocalVar
1052#subu $sp, $sp, 4
1056#sw $t0, ($sp)
# end: IdentifierExp at 32.9; stackHeight = 8
# begin: IntegerLiteral at 32.16; stackHeight = 8
1060#li $t0, 33
1064#subu $sp, $sp, 8
1068#sw $s5, 4($sp)
1072#sw $t0, ($sp)
# end: IntegerLiteral at 32.16; stackHeight = 16
1076#lw $t0, 8($sp)
1080#sw $s2, 8($sp)
1084#move $s2, $t0
1088#beq $s2, $0, nullPtrException
1092#lw $t0, -12($s2)
1096#lw $t0, 48($t0)
1100#jalr $t0
1104#addu $sp, $sp, 8
1108#lw $s2, ($sp)
1112#addu $sp, $sp, 4
1116#subu $sp, $sp, 4
1120#sw $t0, ($sp)
# end: Call at 32.11; stackHeight = 8
1124#lw $t0, ($sp)
1128#addu $sp, $sp, 4
# end: CallStatement at 32.11; stackHeight = 4
# begin: Assign at 33.11; stackHeight = 4
# begin: InstVarAccess at 33.14; stackHeight = 4
# begin: IdentifierExp at 33.13; stackHeight = 4
1132#lw $t0, 0($sp) #**LocalVar
1136#subu $sp, $sp, 4
1140#sw $t0, ($sp)
# end: IdentifierExp at 33.13; stackHeight = 8
1144#lw $t0, ($sp)
1148#addu $sp, $sp, 4
1152#beq $t0, $0, nullPtrException
1156#lw $t0, -64($t0)
1160#subu $sp, $sp, 8
1164#sw $s5, 4($sp)
1168#sw $t0, ($sp)
# end: InstVarAccess at 33.14; stackHeight = 12
1172#lw $t0, ($sp)
1176#addu $sp, $sp, 8
1180#sw $t0, -12($sp)
# end: Assign at 33.11; stackHeight = 4
# begin: Assign at 34.9; stackHeight = 4
# begin: Plus at 34.10; stackHeight = 4
# begin: IdentifierExp at 34.9; stackHeight = 4
1184#lw $t0, -16($s2) #**InstVar
1188#subu $sp, $sp, 8
1192#sw $s5, 4($sp)
1196#sw $t0, ($sp)
# end: IdentifierExp at 34.9; stackHeight = 12
# begin: IntegerLiteral at 34.10; stackHeight = 12
1200#li $t0, 1
1204#subu $sp, $sp, 8
1208#sw $s5, 4($sp)
1212#sw $t0, ($sp)
# end: IntegerLiteral at 34.10; stackHeight = 20
1216#lw $t2, ($sp)
1220#addu $sp, $sp, 8
1224#lw $t1, ($sp)
1228#addu $sp, $sp, 8
1232#addu $t0, $t1, $t2
1236#subu $sp, $sp, 8
1240#sw $s5, 4($sp)
1244#sw $t0, ($sp)
# end: Plus at 34.10; stackHeight = 12
1248#lw $t0, ($sp)
1252#addu $sp, $sp, 8
1256#sw $t0, -12($sp)
# end: Assign at 34.9; stackHeight = 4
# begin: CallStatement at 35.14; stackHeight = 4
# begin: Call at 35.14; stackHeight = 4
1260#subu $sp, $sp, 4
1264#sw $s2, ($sp)
# begin: IdentifierExp at 35.23; stackHeight = 8
1268#lw $t0, -16($s2) #**InstVar
1272#subu $sp, $sp, 8
1276#sw $s5, 4($sp)
1280#sw $t0, ($sp)
# end: IdentifierExp at 35.23; stackHeight = 16
1284#lw $t0, 8($sp)
1288#sw $s2, 8($sp)
1292#move $s2, $t0
1296#beq $s2, $0, nullPtrException
1300#lw $t0, -12($s2)
1304#lw $t0, 32($t0)
1308#jalr $t0
1312#addu $sp, $sp, 8
1316#lw $s2, ($sp)
1320#addu $sp, $sp, 4
1324#subu $sp, $sp, 4
1328#sw $t0, ($sp)
# end: Call at 35.14; stackHeight = 8
1332#lw $t0, ($sp)
1336#addu $sp, $sp, 4
# end: CallStatement at 35.14; stackHeight = 4
# begin: CallStatement at 36.14; stackHeight = 4
# begin: Call at 36.14; stackHeight = 4
1340#subu $sp, $sp, 4
1344#sw $s2, ($sp)
# begin: StringLiteral at 36.23; stackHeight = 8
1348#li $t0, strLit_100
1352#subu $sp, $sp, 4
1356#sw $t0, ($sp)
# end: StringLiteral at 36.23; stackHeight = 12
1360#lw $t0, 4($sp)
1364#sw $s2, 4($sp)
1368#move $s2, $t0
1372#beq $s2, $0, nullPtrException
1376#lw $t0, -12($s2)
1380#lw $t0, 24($t0)
1384#jalr $t0
1388#addu $sp, $sp, 4
1392#lw $s2, ($sp)
1396#addu $sp, $sp, 4
1400#subu $sp, $sp, 4
1404#sw $t0, ($sp)
# end: Call at 36.14; stackHeight = 8
1408#lw $t0, ($sp)
1412#addu $sp, $sp, 4
# end: CallStatement at 36.14; stackHeight = 4
1416#addu $sp, $sp, 4
1420#lw $ra, ($sp)
1424#addu $sp, $sp, 4
1428#jr $ra
# end: MethodDeclVoid at 30.17; stackHeight = -4
# end: Program at 3.1; stackHeight = -4
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1432:mth_Object_hashCode:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
1432#    lw $t0,-8($s2) # get word with hash bits from this
1436#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
1440#    addu $t0,$t1

1444#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1448:mth_Object_equals:
1448#    move $t0,$s2 # first pointer (this)
1452#    lw $t1,($sp) # second pointer
1456#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
1457##...subu $at,$t0,$t1
1461##...sltiu $t0,$at,1

1464#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
1468:mth_String_hashCode:
1468#    move $t0,$s2 # put this pointer in t0

1472#    li $t2,0 # current hash value
1476#    lw $t1,-4($t0) # negative of number of characters in string
1480#    beq $t1,$zero,done_hashCode_String # if zero length => done
1484#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
1488#    and $t0,0xfffffffc # adjust for padding
1489##...lui $at,65535
1493##...ori $at,$at,0xfffc
1497##...and $t0,$t0,$at
1500#    subu $t1,$t0,$t1 # address at end of string +12
1504:loop_hashCode_String:    
1504#    sll $t4,$t2,5 # multiply by 32
1508#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
1512#    lbu $t3,-12($t0) # current character
1516#    addu $t2,$t3 # add in current character
1520#    addu $t0,1 # go to next character's address
1524#    bne $t0,$t1,loop_hashCode_String # loop back if more
1528:done_hashCode_String:    

    # push int on stack
1528#    move $t0, $t2 # put $t2 in return slot
1532#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
1536:mth_Object_toString:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
1536#    subu $sp,4
1540#    sw $ra,($sp)
    
    # get hash value
1544#    lw $t2,-12($s2) # vtable address
1548#    lw $t0,($t2) # method address
1552#    jalr $t0
1556#    subu $sp,8 # push result (int in $t0) on stack
1560#    sw $s5,4($sp)
1564#    sw $t0,($sp)

    # compute print-size of hash value
1568#    li $t0, 1
1572#    lw $t1, ($sp)
1576#    srl $t1,$t1,4
1580#    beq $t1,$zero,toString_skip_loop
1584:toString_loop_top:
1584#    addu $t0,1
1588#    srl $t1,$t1,4
1592#    bne $t1,$zero,toString_loop_top
1596:toString_skip_loop:
1596#    subu $sp,8
1600#    sw $s5,4($sp)
1604#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
1608#    lw $t2,-12($s2) # vtable address
1612#    move $t0,$t2
1616:toString_checkTagBit:
1616#    subu $t0,1
1620#    lb $t1,($t0)
1624#    and $t1,0x80
1625##...lui $at,0
1629##...ori $at,$at,0x80
1633##...and $t1,$t1,$at
1636#    beq $t1,$zero,toString_checkTagBit
1640#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
1644#    subu $sp,8
1648#    sw $t1,($sp)
1652#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
1656#    move $s7,$zero # -4 offset header word
1660#    lw $t4,8($sp) # bytes for hash value
1664#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
1668#    addu $t4,8
1672#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
1676#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

1680#    li $t0,CLASS_String # store string vtable address into ...
1684#    sw $t0,-12($s7) # ... -12 offset in object header
1688#    lw $t2,-12($s2) # our object's vtable address
1692#    lw $t5,4($sp) # number characters in prefix
1696#    lw $t1,12($sp) # number of characters in hashcode
1700#    addu $t3,$t1,$t5 # number of characters in string ...
1704#    addu $t3,1 # ... including the '@' character
1708#    subu $t0,$zero,$t3 # store negated length into ...
1712#    sw $t0,-4($s7) # ... -4 offset header word
1716#    lw $t0,-8($s7) # get -8 offset header-word
1720#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
1721##...slt $at,$t0,$zero
1725##...beq $at,$zero,1744
1728#    and $t0,0xff # mask off object's hash value ...
1729##...lui $at,0
1733##...ori $at,$at,0xff
1737##...and $t0,$t0,$at
1740#    sw $t0,-8($s7) # ... and store back into -8 header-word
1744:skipMask_toString:
1744#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
1748#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
1752#    subu $t4,$t2,$t5
1756:toString_copyLoop:    
1756#    lb $t3,($t4)
1760#    and $t3,0x7f # mask off sign bit (in case first word)
1761##...lui $at,0
1765##...ori $at,$at,0x7f
1769##...and $t3,$t3,$at
1772#    sb $t3,-8($t0)
1776#    addu $t4,1
1780#    addu $t0,1
1784#    blt $t4,$t2,toString_copyLoop
1785##...slt $at,$t4,$t2
1789##...bne $at,$zero,1756

    # copy the '@' sign
1792#    li $t3,'@'
1796#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
1800#    addu $t2,$t0,$t1 # address of last byte in string to store +8
1804#    lw $t3,20($sp) # hash code to print
1808:toString_hashCopyLoop:
1808#    and $t4,$t3,0xf
1812#    srl $t3,4
1816#    lb $t4,hexChars($t4)
1820#    sb $t4,-8($t2)
1824#    subu $t2,$t2,1
1828#    bgt $t2,$t0,toString_hashCopyLoop
1829##...slt $at,$t0,$t2
1833##...bne $at,$zero,1808

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
1836#    addu $sp,28
1840#    lw $ra,($sp)
1844#    addu $sp,4
1848#    move $t0, $s7 # return string we created
1852#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
1856:mth_String_equals:
    
    # quick test for obvious false
1856#    lw $t0,($sp) # second parameter
1860#    beq $t0,$zero,goEsFalse # go return false if null
1864#    lw $t1,-12($t0) # vtable pointer
1868#    la $t2,CLASS_String # string vtable pointer
1872#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
1876#    subu $sp,12
1880#    sw $ra,8($sp)
1884#    sw $s2,4($sp)
1888#    sw $t0,($sp)
1892#    jal mth_String_compareTo
1896#    lw $s2, 4($sp) #restore this pointer and pop parameters
1900#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
1904#    seq $t0,$t0,$zero
1905##...subu $at,$t0,$zero
1909##...sltiu $t0,$at,1

    # pop return address and return $t0
1912#    lw $ra,($sp)
1916#    addu $sp,4

1920#    jr $ra # return
    
1924:goEsFalse:
    # put 0 in $t0 and return
1924#    li $t0, 0
1928#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
1932:mth_String_toString:
    #we are a string, so return this.
1932#    move $t0, $s2
1936#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1940:mth_Lib_readLine:
    
1940#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
1944#    sw $ra, 4($sp) # save $ra
1948#    move $t1,$sp # save "original" sp

1952:  doRead:

    # read the character
1952#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
1956#    subu $t2,$v0,13
1960#    bne $t2,$zero,notReturnRL
1964#    jal readLogicalChar
1968#    subu $t2,$v0,10 # check for newline
1972#    beq $t2,$zero,foundNewLine
1976#    sw $v0,lastCharRead # push back character into queue
1980#    j foundNewLine # go process the line

1984:  notReturnRL:

    # at this point, $v0 has our character

1984#    subu $t0,$v0,10
1988#    beq $t0,$zero,foundNewLine
1992#    blt $v0,$zero,foundEof
1993##...slt $at,$v0,$zero
1997##...bne $at,$zero,2012

    # we have a character, so push it onto stack
2000#    subu $sp,$sp,4
2004#    sw $v0,($sp)

    # loop back up to get next character
2008#    j doRead

2012:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
2012#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
2016#    li $s7, 0 # return-value: null
2020#    j rlReturn # return

2024:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
2024#    subu $t0,$t1,$sp # number of chars we read (times 4)
2028#    srl $s6,$t0,2 # number of words on stack with chars
2032#    subu $sp,$sp,4 # push char-count ...
2036#    sw $s6,($sp) # ... onto stack
2040#    addu $t2,$t0,5 # GC tag, incl. for count-word
2044#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
2048#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
2052#    srl $s6,$s6,2  # data words in object
2056#    move $s7,$zero # object words in object
2060#    jal newObject  # allocate space
    
    # store header words
2064#    la $t0,CLASS_String
2068#    sw $t0,-12($s7)# store class tag (String) into object
2072#    lw $t2,4($sp) # char-count
2076#    sll $t1,$t2,2 # 4 times number of chars
2080#    subu $t2,$zero,$t2 # negative of char-count
2084#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
2088#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
2092#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
2093##...slt $at,$t0,$zero
2097##...beq $at,$zero,2116
2100#    and $t0,0xff # mask off object's hash value ...
2101##...lui $at,0
2105##...ori $at,$at,0xff
2109##...and $t0,$t0,$at
2112#    sw $t0,-8($s7) # ... and store back into -8 header-word
2116:  skipMask_readLine:

2116#    sll $t0,$t0,2 # data bytes in object
2120#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
2124#    subu $t0,$t0,$t2 # place to store last character (plus 9)
2128#    addu $sp,$sp,8 # pop redundant object-pointer and count
2132#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

2136#    beq $sp,$t1,rlReturn
2140:  charCopyLoop:
2140#    lw $t2,($sp)
2144#    sb $t2,-9($t0)
2148#    addu $sp,$sp,4
2152#    subu $t0,$t0,1
2156#    bne $sp,$t1,charCopyLoop
2160:  rlReturn:

2160#    lw $ra, 4($sp)
2164#    addu $sp, 8   # pop $ra and pointless word off stack
2168#    move $t0, $s7 # return string we allocated in $s7
2172#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
2176:mth_Lib_readInt:

    # save $ra by pushing onto stack
2176#    subu $sp,$sp,4
2180#    sw $ra,($sp)

2184:  riSkipWhiteLoop:
    # read a character
2184#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
2188#    subu $t0,$v0,32
2192#    bgt $t0,$zero,nonWhite
2193##...slt $at,$zero,$t0
2197##...bne $at,$zero,2240
2200#    beq $t0,$zero,riSkipWhiteLoop # start over if space
2204#    subu $t0,$v0,10
2208#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
2212#    subu $t0,$v0,9
2216#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
2220#    subu $t0,$v0,13
2224#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
2228#    subu $t0,$v0,12
2232#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
2236#    j badIntegerFormat # illegal integer char: abort program

2240:  nonWhite:
2240#    subu $t0,$v0,'-'
2244#    li $t4,1 # final multiplier
2248#    bne $t0,$zero,helpReadInt # go read
2252#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
2256#    jal readLogicalChar

2260:  helpReadInt:
2260#    li $t2,10
2264#    subu $t1,$v0,'0' # convert digit to 0-9 value
2268#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
2269##...sltu $at,$t1,$t2
2273##...beq $at,$zero,4556
2276#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

2280:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

2280#    jal readLogicalChar # read next character
2284#    subu $t1,$v0,'0' # convert digit to 0-9 value
2288#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
2289##...sltu $at,$t1,$t2
2293##...beq $at,$zero,2312

2296#    mul $t3,$t3,$t2 # multiply old value by 10
2297##...mult $t3,$t2
2301##...mflo $t3
2304#    addu $t3,$t3,$t1 # add in value of new digit
2308#    j digitLoop

2312:  doneDigitLoop:

    # "push back" unused character into queue
2312#    sw $v0,lastCharRead

    # restore return address
2316#    lw $ra,($sp)
2320#    addu $sp, 4

    # multiply by sign and put return value in $t0
2324#    mult $t3,$t4 # multiply to account for poss. minus sign
2328#    mflo $t3
2332#    move $t0, $t3
    
    # return
2336#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
2340:mth_Lib_readChar:

    # save $ra by pushing onto stack
2340#    subu $sp,$sp,4
2344#    sw $ra,($sp)

      # read the character
2348#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
2352#    lw $ra,($sp)
2356#    addu $sp, 4
2360#    move $t0, $v0

    # return
2364#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
2368:mth_Lib_printStr:
    # check for null, printing "(null)", if so
2368#    lw $t0,($sp)
2372#    bne $t0,$zero,psNotNull

    # print "(null)"
2376#    la $a0,nullStr
2380#    li $v0,4
2384#    syscall
2388#    j donePrintStr
    
2392:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
2392#    subu $t0,$t0,8
2396#    lw $t1,($t0) # number of data words, but needs modification
2400#    blt $t1,$zero,skipPrintStr1
2401##...slt $at,$t1,$zero
2405##...bne $at,$zero,2424
2408#    and $t1,0xff # mask out all but low byte
2409##...lui $at,0
2413##...ori $at,$at,0xff
2417##...and $t1,$t1,$at
2420#    b skipPrintStr2
2424:skipPrintStr1:
2424#    and $t1,0x7ffffff
2425##...lui $at,2047
2429##...ori $at,$at,0xffff
2433##...and $t1,$t1,$at
2436:skipPrintStr2:    
2436#    sll $t1,$t1,2
2440#    subu $t1,$t0,$t1 # first word in string
2444#    lw $t0,4($t0) # negative of string-length
2448#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
2452#    beq $t0,$t1,donePrintStr
2456:  psLoop:
2456#    lb $a0,($t1) # next byte
2460#    li $v0,11 # code for printing char
2464#        syscall # print the char
2468#    addu $t1,$t1,1 # go to next char
2472#    blt $t1,$t0,psLoop
2473##...slt $at,$t1,$t0
2477##...bne $at,$zero,2456

2480:  donePrintStr:
2480#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
2484:mth_Lib_printInt:
2484#    lw $a0,($sp)

    # print it
2488#    li $v0,1 # code for print-int
2492#    syscall

    # return
2496#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
2500:mth_Lib_printBool:
    # pop value off stack, along with 'this'
2500#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
2504#    la $a0,falseString
2508#    beq $t0,$zero,skipPB
2512#    la $a0,trueString
2516:  skipPB:
2516#    li $v0,4 # code for print-string
2520#    syscall

    # return
2524#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
2528:mth_String_substring:

    # save $ra by pushing onto stack
2528#    subu $sp,$sp,4
2532#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
2536#    move $t0,$s2
2540#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
2544#    lw $t0,-4($t0) # negative of string length
2548#    subu $t0,$zero,$t0 # string length
2552#    lw $t1,4($sp) # k
2556#    lw $t2,12($sp) # n
2560#    bgt $zero,$t2,strIndexOutOfBounds
2561##...slt $at,$t2,$zero
2565##...bne $at,$zero,4524
2568#    bgt $t2,$t1,strIndexOutOfBounds
2569##...slt $at,$t1,$t2
2573##...bne $at,$zero,4524
2576#    bgt $t1,$t0,strIndexOutOfBounds
2577##...slt $at,$t0,$t1
2581##...bne $at,$zero,4524

    # allocate memory
2584#    subu $s6,$t1,$t2 # # chars in target-string
2588#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
2592#    srl $s6,$s6,2 # convert bytes-count to word-count
2596#    move $s7,$zero # (no object-bytes in string)
2600#    jal newObject

    # store "String" tag in object-type field
2604#    la $t0,CLASS_String
2608#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
2612#    lw $t4,-8($s7) # data words in source string
2616#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
2617##...slt $at,$t4,$zero
2621##...beq $at,$zero,2640
2624#    and $t4,0xff # mask off object's hash value ...
2625##...lui $at,0
2629##...ori $at,$at,0xff
2633##...and $t4,$t4,$at
2636#    sw $t4,-8($s7) # ... and store back into -8 header-word
2640:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
2640#    lw $t1,8($sp) # k
2644#    lw $t2,16($sp) # n
2648#    subu $t0,$t2,$t1 # value to store
2652#    sw $t0,-4($s7) # store value
    
2656#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
2660#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
2664#    lw $t4,-8($t3) # data words in source string
2668#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
2672#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
2676#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
2680#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
2684#    lw $t2,-8($s7)   # data words in target string
2688#    sll $t2,$t2,2    # data bytes in target string
2692#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
2696:  subCopyLoopzz:
2696#    lb $t4,-8($t3)
2700#    sb $t4,-8($t2)
2704#    addu $t2,$t2,1
2708#    addu $t3,$t3,1
2712#    blt $t3,$t1,subCopyLoopzz
2713##...slt $at,$t3,$t1
2717##...bne $at,$zero,2696
    
2720:  doneSubCopyzz:
    # restore return address, store return value, pop stack
2720#    lw $ra,4($sp) # restore $ra
2724#    addu $sp,$sp,8 # pop ra, and allocated newObject
2728#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
2732#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
2736:mth_String_length:

    # the length is the negative of 4($s2)
2736#    lw $t0,-4($s2) # -length
2740#    subu $t0,$zero,$t0

    # return
2744#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
2748:mth_String_concat:
    # save $ra by pushing onto stack
2748#    subu $sp,$sp,4
2752#    sw $ra, ($sp)

    # get string pointers and check parameter for null
2756#    lw $t0,4($sp)
2760#    beq $t0,$zero,nullPtrException
2764#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
2768#    lw $t0,-4($t0) # negative size of second object
2772#    lw $t1,-4($t1) # negative size of first object
2776#    addu $s6,$t0,$t1 # sum of negative sizes
2780#    sra $s6,$s6,2 # negative word-size of char part
2784#    subu $s6,$zero,$s6 # word size of char part
2788#    addu $s6,$s6,1 # data word size, including v-table word
2792#    move $s7,$zero
2796#    jal newObject

    # store String vtable address in vtable address field
2800#    la $t0,CLASS_String
2804#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2808#    lw $t4,-8($s7) # # data words in source string
2812#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
2813##...slt $at,$t4,$zero
2817##...beq $at,$zero,2836
2820#    and $t4,0xff # mask off object's hash value ...
2821##...lui $at,0
2825##...ori $at,$at,0xff
2829##...and $t4,$t4,$at
2832#    sw $t4,-8($s7) # ... and store back into -8 header-word
2836:skipMask_concat:

2836#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
2840#    move $t1,$s2   # first object
2844#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
2848#    lw $t2,-4($t0) # negative length of second object
2852#    lw $t3,-4($t1) # negative length of first object
2856#    addu $t4,$t2,$t3 # sum of negative lengths
2860#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
2864#    lw $t4,-8($t1) # # data words in first string
2868#    sll $t4,$t4,2 # # data bytes in first string
2872#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2876#    lw $t4,-8($s7) # # data words in new string
2880#    sll $t4,$t4,2 # # data bytes in new string
2884#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2888#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2892#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
2896:  concatLoop1zz:
2896#    lb $t4,-8($t1)
2900#    sb $t4,-8($s7)
2904#    addu $s7,$s7,1
2908#    addu $t1,$t1,1
2912#    blt $t1,$t3,concatLoop1zz
2913##...slt $at,$t1,$t3
2917##...bne $at,$zero,2896
2920:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2920#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
2924#    lw $t4,-8($t0) # # data words in second string
2928#    sll $t4,$t4,2 # # data bytes in second string
2932#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2936#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
2940:  concatLoop2zz:
2940#    lb $t4,-8($t1)
2944#    sb $t4,-8($s7)
2948#    addu $s7,$s7,1
2952#    addu $t1,$t1,1
2956#    blt $t1,$t3,concatLoop2zz
2957##...slt $at,$t1,$t3
2961##...bne $at,$zero,2940
2964:  doneConcatLoop2zz:
 
2964:  concatRtnzz:
    # return
2964#    move $t0, $t9 # put saved return string in $t0
2968#    lw $ra, 4($sp)
2972#    addu $sp, 8 # pop ra and allocated newObject
2976#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
2980:mth_String_charAt:
    # get string
2980#    move $t0,$s2

    # check that index is in bounds
2984#    lw $t1,-4($t0) # negative of # data words in string
2988#    subu $t3,$zero,$t1 # # chars in string
2992#    lw $t2,($sp) # index
2996#    bgeu $t2,$t3,strIndexOutOfBounds
2997##...sltu $at,$t2,$t3
3001##...beq $at,$zero,4524

    # access element
3004#    lw $t1,-8($t0) # # data words in object
3008#    sll $t1,$t1,2 # - byte-offset from end of chars
3012#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
3016#    addu $t0,$t0,$t1 # - address of our char, offset by 8
3020#    lb $t0,-8($t0) # our char

    # return
3024#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
3028:mth_Lib_intToString:

    # save return address on stack; allocate space for dummy GC tag
3028#    subu $sp,$sp,8
3032#    sw $ra,4($sp)

    # save current sp
3036#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
3040#    li $t3,10

    # get argument, negate if negative
3044#    lw $t1,8($sp)
3048#    bge $t1,$zero,itsNonNegLoop
3049##...slt $at,$t1,$zero
3053##...beq $at,$zero,3060
3056#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
3060:  itsNonNegLoop:
3060#    divu $t1,$t3
3064#    mflo $t1 # quotient
3068#    mfhi $t4 # remainder
3072#    addu $t4,$t4,'0' # turn remainder into digit
3076#    subu $sp,$sp,4
3080#    sw $t4,($sp) # push digit onto stack
3084#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
3088#    lw $t4,8($t0)
3092#    bge $t4,$zero,itsSkipNeg
3093##...slt $at,$t4,$zero
3097##...beq $at,$zero,3112
3100#    li $t4,'-'
3104#    subu $sp,$sp,4
3108#    sw $t4,($sp)
3112:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
3112#    subu $s6,$t0,$sp
3116#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
3120#    sw $t3,($t0)
3124#    srl $s6,$s6,2
3128#    subu $sp,$sp,4
3132#    sw $s6,($sp)
    
    # allocate memory
3136#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
3140#    srl $s6,$s6,2
3144#    move $s7,$zero # no "object" words in object
3148#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
3152#    lw $t0,4($sp)
3156#    addu $sp,$sp,8

    # store "String" tag into class field
3160#    subu $s7,$s7,8 # address of header-1 word
3164#    la $t1,CLASS_String
3168#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
3172#    lw $t4,($s7) # # data words in source string
3176#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
3177##...slt $at,$t4,$zero
3181##...beq $at,$zero,3200
3184#    and $t4,0xff # mask off object's hash value ...
3185##...lui $at,0
3189##...ori $at,$at,0xff
3193##...and $t4,$t4,$at
3196#    sw $t4,($s7) # ... and store back into -8 header-word
3200:skipMask_intToString:
    
    # store negative of char-count into header-2 word
3200#    subu $t0,$zero,$t0
3204#    sw $t0,4($s7)

3208#    lw $t1,($s7) # number of data words in string
3212#    sll $t1,$t1,2 # number data bytes in string
3216#    subu $t1,$s7,$t1 # first location to store chars in string
3220#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
3224:  itsLoop:
3224#    lw $t2,($sp)
3228#    addu $sp,$sp,4
3232#    sb $t2,($t1)
3236#    addu $t1,$t1,1
3240#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
3244#    lw $ra,4($sp)
3248#    addu $sp,$sp,8
3252#    addu $t0,$t0,15
3256#    and $t0,$t0,0xfffffffc
3257##...lui $at,65535
3261##...ori $at,$at,0xfffc
3265##...and $t0,$t0,$at
3268#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
3272:mth_Lib_intToChar:
    # save return address
3272#    subu $sp,$sp,4
3276#    sw $ra,($sp)

    # allocate object
3280#    li $s6,2
3284#    move $s7,$zero
3288#    jal newObject

    # get n from string.
3292#    lw $t1,8($sp)

    # store "String" tag into class field
3296#    la $t0,CLASS_String
3300#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
3304#    lw $t4,-8($s7) # # data words in source string
3308#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
3309##...slt $at,$t4,$zero
3313##...beq $at,$zero,3332
3316#    and $t4,0xff # mask off object's hash value ...
3317##...lui $at,0
3321##...ori $at,$at,0xff
3325##...and $t4,$t4,$at
3328#    sw $t4,-8($s7) # ... and store back into -8 header-word
3332:  skipMask_intToChar:

    # store data in string
3332#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
3336#    li $t0,-1
3340#    sw $t0,-4($s7)

    # we're returning $s7
3344#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
3348#    lw $ra,4($sp)
3352#    addu $sp,$sp,8

    # return
3356#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
3360:mth_String_compareTo:
    # get string pointers and check parameter for null
3360#    lw $t0,($sp) # second string
3364#    beq $t0,$zero,nullPtrException
3368#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
3372#    lw $t2,-4($t0) # negative length of second string
3376#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
3380#    slt $t4,$t3,$t2
3384#    slt $t5,$t2,$t3
3388#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
3392#    lw $t2,-8($t0) # # data words in second string
3396#    lw $t3,-8($t1) # # data words in first string
3400#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
3404#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
3408#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
3412#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
3416#    beq $zero,$t5,skipStrCmpLenzz
3420#    move $t2,$t3
3424:  skipStrCmpLenzz:
3424#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
3428:  cmpLoopzz:
3428#    lw $t3,-8($t1) # word from str2
3432#    lw $t4,-8($t0) # word from str1
3436#    bne $t3,$t4,cmpNotEqualzz
3440#    addu $t1,$t1,4
3444#    addu $t0,$t0,4
3448#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
3452#    j cmpHitLimitzz

3456:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
3456#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
3460#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
3464#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
3468:  cmpHitLimitzz:
3468#    move $t0, $t5 # store return value
3472#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
3476:readLogicalChar:

    # check if we already have a character
3476#    lw $v0,lastCharRead
3480#    li $t0,-2
3484#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
3488#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
3492#    jr $ra # return
    
3496:  doReadCh:
    # we need to actually read a character: read and return
3496#    li $v0,12 # use system call to read a character
3500#    syscall
3504#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
3508:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
3508#    blt $s7,$zero arraySizeOutOfBounds
3509##...slt $at,$s7,$zero
3513##...bne $at,$zero,4540

    # mark the fact that we have not yet GC'd for this allocation
3516#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

3520:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
3520#    addu $t0,$s6,$s7
3524#    sll $t0,$t0,2
3528#    addu $t0,$t0,8 # amount of memory needed
3532#    addu $t1,$t0,$s3
3536#    bgtu $t1,$s4,doGC
3537##...sltu $at,$s4,$t1
3541##...bne $at,$zero,3664

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
3544#    move $t2,$s3
3548:  zeroObjLoop:
3548#    sw $zero,($s3)
3552#    lw $zero,($s3)

3556#    addu $s3,4
3560#    bltu $s3,$t1,zeroObjLoop
3561##...sltu $at,$s3,$t1
3565##...bne $at,$zero,3548

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
3568#    sll $t0,$s7,2    # number of post-header bytes
3572#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
3576#    li $t2,255
3580#    bgeu $s6,$t2 firstHeaderLarge
3581##...sltu $at,$s6,$t2
3585##...beq $at,$zero,3632
3588#    lw $t1,prevHashConstant
3592#    addu $t1,0x12b68fd2
3593##...lui $at,4791
3597##...addiu $at,$at,-28718
3601##...addu $t1,$at,$t1
3604#    sw $t1,prevHashConstant # update hash constant
3608#    or $t1,0x80000000 # set top bit
3609##...lui $at,32768
3613##...or $t1,$at,$t1
3616#    and $t1,0xffffff00 # clear low bit
3617##...lui $at,65535
3621##...ori $at,$at,0xff00
3625##...and $t1,$t1,$at
3628#    or $s6,$t1
3632:firstHeaderLarge:
3632#    sw $s6,-8($t0) # store header-1 value
3636#    lw $zero,-8($t0)

    # store second header-value
3640#    sw $s7,-4($t0)   # second header-word
3644#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
3648#    move $s7,$t0
3652#    subu $sp,$sp,4
3656#    sw $t0,($sp)

3660#    jr $ra
    
3664:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
3664#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
3668#    lw $t5,gcCount
3672#    addu $t5,1
3676#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
3680#    subu $sp,$sp,4
3684#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
3688#    lw $t0,cur_seg
3692#    move $t7,$s4
3696#    la $t6,seg1_start
3697##...lui $t6,16
3701##...addiu $t6,$t6,5268
3704#    la $s3,seg0_start
3708#    la $s4,seg0_end
3709##...lui $s4,16
3713##...addiu $s4,$s4,5268
3716#    sw $zero,cur_seg
3720#    bne $t0,$zero,skipGc1
3724#    la $t6,seg0_start
3728#    la $s3,seg1_start
3729##...lui $s3,16
3733##...addiu $s3,$s3,5268
3736#    la $s4,seg1_end
3737##...lui $s4,32
3741##...addiu $s4,$s4,5268
3744#    sw $s5,cur_seg
3748:  skipGc1:
3748#    li $t5,0x80000000
3752#    lw $t0,stack_bottom
3756#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

3760:  gcStackCopyLoop:
3760#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
3764#    sll $t2,$t1,31 # zero iff low bit was zero
3768#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
3772#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
3776#    bleu $t1,$t6,gcTestIterDone1
3777##...sltu $at,$t6,$t1
3781##...beq $at,$zero,3944
3784#    bgtu $t1,$t7,gcTestIterDone1
3785##...sltu $at,$t7,$t1
3789##...bne $at,$zero,3944

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
3792#    lw $t2,-8($t1) # possible forwarding tag
3796#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
3800#    lw $t2,-4($t1) # forwarding pointer: object's new address
3804#    sw $t2,4($t0) # update stack value
3808#    j gcTestIterDone1 # do next iteration

3812:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
3812#    bge $t2,$zero,gcSkip2
3813##...slt $at,$t2,$zero
3817##...beq $at,$zero,3832
3820#    and $t2,0xff #### mask off hash value
3821##...lui $at,0
3825##...ori $at,$at,0xff
3829##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

3832:  gcSkip2:
3832#    sll $t2,$t2,2
3836#    addu $t2,$t2,8
3840#    subu $t4,$t1,$t2 # address of first word of source
3844#    lw $t3,-4($t1) # number of object words (negative means zero)
3848#    bge $t3,$zero,gcH2Neg1
3849##...slt $at,$t3,$zero
3853##...beq $at,$zero,3860
3856#    move $t3,$zero
3860:  gcH2Neg1:
3860#    sll $t3,$t3,2
3864#    addu $t3,$t3,$t1 # address one word past last word of source

3868#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
3872#    lw $s0,($t4)
3876#    lw $s1,-8($t1)
3880#    sw $s1,($t4)
3884#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
3888:  gCinnerCopy1:
3888#    lw $s0,($t4)
3892#    sw $s0,($s3)
3896#    addu $t4,$t4,4
3900#    addu $s3,$s3,4
3904#    bltu $t4,$t3,gCinnerCopy1
3905##...sltu $at,$t4,$t3
3909##...bne $at,$zero,3888

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3912#    sw $zero,-8($t1) # 0 in first header-slot
3916#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
3920#    sw $t2,4($t0)
3924#    lw $zero,-8($t2)
3928#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
3932#    j gcTestIterDone1

3936:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
3936#    subu $t0,$t0,$t1
3940#    subu $t0,$t0,3

3944:  gcTestIterDone1:
3944#    bgeu $t0,$sp,gcStackCopyLoop
3945##...sltu $at,$t0,$sp
3949##...beq $at,$zero,3760

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
3952#    lw $t1,cur_seg
3956#    la $t0,seg0_start
3960#    beq $t1,$zero,gcSkip4
3964#    la $t0,seg1_start
3965##...lui $t0,16
3969##...addiu $t0,$t0,5268


3972:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
3972#    bgeu $t0,$s3,gcFinishUp
3973##...sltu $at,$t0,$s3
3977##...beq $at,$zero,4268

    ###### begin outer loop to copy all non-stack-direct objects ######

3980:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
3980#    lw $t1,($t0) # (what will be) first header word for current object
3984#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
3988#    bge $t2,$zero,gcSkip4a # are there hash bits?
3989##...slt $at,$t2,$zero
3993##...beq $at,$zero,4008
3996#    and $t2,0xff # mask off hash bits
3997##...lui $at,0
4001##...ori $at,$at,0xff
4005##...and $t2,$t2,$at
4008:gcSkip4a:    
4008#    sll $t2,$t2,2 # # data bytes
4012#    addu $t2,$t2,8 # to skip header words
4016#    addu $t2,$t0,$t2 # pointer to new object
4020#    lw $t3,-8($t2) # word to swap
4024#    sw $t1,-8($t2) # store header word
4028#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
4032#    lw $t1,-12($t2) # vtable pointer
4036#    li $t0,dataArrayVTableStart # address of vtable for first data array
4040#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
4041##...slt $at,$t1,$t0
4045##...bne $at,$zero,4064

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
4048:  skipToNextObj:
4048#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
4052#    sll $t1,$t1,2 # convert to byte-count
4056#    addu $t0,$t2,$t1 # skip over object
4060#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
4064:  gcNotDataArray:
4064#    lw $t3,-4($t2) # # object words (negative treated as zero)
4068#    bge $t3,$zero,gcH2Neg2
4069##...slt $at,$t3,$zero
4073##...beq $at,$zero,4080
4076#    move $t3,$zero
4080:  gcH2Neg2:
4080#    sll $t3,$t3,2 # # object bytes
4084#    move $t0,$t2 # address of first pointer in object
4088#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
4092#    beq $t0,$s1,gcTestIterDone2
    
4096:  gcNextPointerInObject:
    # get pointer from object
4096#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
4100#    bleu $t1,$t6,gcGoNextPointerSlot
4101##...sltu $at,$t6,$t1
4105##...beq $at,$zero,4248
4108#    bgtu $t1,$t7,gcGoNextPointerSlot
4109##...sltu $at,$t7,$t1
4113##...bne $at,$zero,4248

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
4116#    lw $t8,-8($t1) # possible forwarding tag
4120#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
4124#    lw $t8,-4($t1) # forwarding pointer: object's new address
4128#    sw $t8,($t0) # update pointer in object
4132#    j gcGoNextPointerSlot # do next iteration

4136:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
4136#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
4137##...slt $at,$t8,$zero
4141##...beq $at,$zero,4156
4144#    and $t8,0xff # mask off hash bits
4145##...lui $at,0
4149##...ori $at,$at,0xff
4153##...and $t8,$t8,$at

4156:  gcSkip5:
4156#    sll $t8,$t8,2 # bytes in negative-offset portion ...
4160#    addu $t8,$t8,8 # ... add in bytes for header-words
4164#    subu $t4,$t1,$t8 # address of first word of source object
4168#    lw $t3,-4($t1) # # words in positive-offset portion
4172#    bge $t3,$zero,gcNoNeg
4173##...slt $at,$t3,$zero
4177##...beq $at,$zero,4184
4180#    move $t3,$zero # negative treated as zero
4184:  gcNoNeg:
4184#    sll $t3,$t3,2 # bytes in negative-offset portion
4188#    addu $t3,$t3,$t1 # address one word past last word of source

4192#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
4196#    lw $s0,($t4)
4200#    lw $t9,-8($t1)
4204#    sw $t9,($t4)
4208#    sw $s0,-8($t1)

    # copy all source bytes to the target
4212:  gCinnerCopy2:
4212#    lw $s0,($t4)
4216#    sw $s0,($s3)
4220#    addu $t4,$t4,4
4224#    addu $s3,$s3,4
4228#    bltu $t4,$t3,gCinnerCopy2
4229##...sltu $at,$t4,$t3
4233##...bne $at,$zero,4212

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
4236#    sw $zero,-8($t1) # 0 in first header-slot
4240#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
4244#    sw $t8,($t0)

4248:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
4248#    addu $t0,$t0,4
4252#    bltu $t0,$s1,gcNextPointerInObject
4253##...sltu $at,$t0,$s1
4257##...bne $at,$zero,4096

4260:  gcTestIterDone2:
4260#    bltu $t0,$s3,gcHeapCopyLoop
4261##...sltu $at,$t0,$s3
4265##...bne $at,$zero,3980

    ###### end outer loop to copy all non-stack-direct objects ######

4268:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
4268#    lw $s2,($sp)
4272#    addu $sp,$sp,4

    # mark us as having already GC'd
4276#    move $t5,$s5

    # go try and allocate again
4280#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
4284:vm_init:

    # mark bottom of stack
4284#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
4288#    move $s2,$zero

    #set up the "five" register
4292#    li $s5,5

4296#    la $s3,seg0_start
4300#    la $s4,seg0_end
4301##...lui $s4,16
4305##...addiu $s4,$s4,5268
    
    # return
4308#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4312:divide:
    # get parameters; abort if divisor zero
4312#    lw $t0,($sp)
4316#    lw $t1,8($sp)
4320#    beq $t0,$zero,divByZeroError
    
    # perform division
4324#    div $t1,$t0
4328#    mflo $t0

    # store result, adjust stack and return
4332#    addu $sp,$sp,8 # adjust stack
4336#    sw $t0,($sp) # store result
4340#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
4344:remainder:
    # get parameters; abort if divisor zero
4344#    lw $t0,($sp)
4348#    lw $t1,8($sp)
4352#    beq $t0,$zero,divByZeroError
    
    # perform division
4356#    div $t1,$t0
4360#    mfhi $t0

    # store result, adjust stack and return
4364#    addu $sp,$sp,8 # adjust stack
4368#    sw $t0,($sp) # store result
4372#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
4376:checkCast:
    # get object, allow immediately if null
4376#    lw $t2,($sp)
4380#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
4384#    lw $t2,-12($t2) # vtable address
4388#    bge $t2,$t1,castException
4389##...slt $at,$t2,$t1
4393##...beq $at,$zero,4564
4396#    blt $t2,$t0,castException
4397##...slt $at,$t2,$t0
4401##...bne $at,$zero,4564
    
    # return, leaving object unchanged on stack
4404:  checkCastReturn:    
4404#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
4408:instanceOf:
    # get object, go return false if null
4408#    lw $t2,($sp)
4412#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
4416#    lw $t2,-12($t2) # vtable address
4420#    sge $t0,$t2,$t0 # are we >= the lower limit?
4421##...slt $t0,$t2,$t0
4425##...xori $t0,$t0,0x1
4428#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
4432#    and $t2,$t0,$t1
4436#    sw $t2,($sp)
4440:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
4440#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

4444:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
4444#    li $v0,4 # syscall-code for print-string
4448#    syscall
4452:exit:
    # print termination message
4452#    li $v0,4 # syscall-code for print-string
4456#    la $a0,exitString
4460#    syscall

    # print number of garbage collections
4464#    li $v0,4 # syscall-code for print-string
4468#    la $a0,gcCountMsg
4472#    syscall # print "Number of ..."
4476#    lw $a0,gcCount # number of GC's
4480#    li $v0,1 # code for print-int
4484#    syscall
4488#    li $v0,4 # syscall-code for print-string
4492#    la $a0,newlineString
4496#    syscall # print newline

    # terminate execution
4500#    li $v0,10 #syscall-code for "exit"
4504#    syscall

4508:outOfHeapMemory:
4508#    la $a0,heapMemoryMsg
4512#    j exitError
4516:divByZeroError:
4516#    la $a0,divByZeroMsg
4520#    j exitError
4524:strIndexOutOfBounds:
4524#    la $a0,strIndexOutOfBoundsMsg
4528#    j exitError
4532:arrayIndexOutOfBounds:
4532#    la $a0,arrayIndexOutOfBoundsMsg
4536#    j exitError
4540:arraySizeOutOfBounds:
4540#    la $a0,arraySizeOutOfBoundsMsg
4544#    j exitError
4548:nullPtrException:
4548#    la $a0,nullPtrExceptionMsg
4552#    j exitError
4556:badIntegerFormat:
4556#    la $a0,badIntegerFormatMsg
4560#    j exitError
4564:castException:
4564#    la $a0,castExceptionMsg
4568#    j exitError
############## data section ################
    .data
4896:hexChars:
    .ascii "0123456789abcdef"
    .align 2
4912:cur_seg:
    .word 0

4916:lastCharRead:
    .word -2 # -2 => no buffered character
4920:prevHashConstant:
    .word 0x2785173c
4924:gcCount:
    .word 0

4928:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
4955:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
4978:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
5013:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
5047:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
5080:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
5111:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
5159:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
5180:gcMsg: 
      .asciiz "\nGC!\n"
5186:gcCountMsg: 
      .asciiz "Number of garbage collections: "

5218:nullStr:
    .asciiz "null"
5223:trueString:
    .asciiz "true"
5228:falseString:
    .asciiz "false"
5234:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
5262:newlineString:
    .asciiz "\n"
    
    .align 2
5264:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

5268:seg0_start:
    .space 0x100000
1053844:seg0_end:
1053844:seg1_start:
    .space 0x100000
2102420:seg1_end:
