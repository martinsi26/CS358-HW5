 .data # Program at 6.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
3764:CLASS_Object: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
3784:CLASS_String: # ClassDecl at 0.0
  .word mth_String_hashCode # MethodDeclNonVoid at 0.0
  .word mth_String_equals # MethodDeclNonVoid at 0.0
  .word mth_String_toString # MethodDeclNonVoid at 0.0
  .word mth_String_concat # MethodDeclNonVoid at 0.0
  .word mth_String_substring # MethodDeclNonVoid at 0.0
  .word mth_String_length # MethodDeclNonVoid at 0.0
  .word mth_String_charAt # MethodDeclNonVoid at 0.0
  .word mth_String_compareTo # MethodDeclNonVoid at 0.0
3816:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
3820:CLASS_Lib: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
# ****** class Main ****** # ClassDecl at 6.7
  .byte 205 # 'M' with high bit set # ClassDecl at 6.7
  .byte 97 # 'a' # ClassDecl at 6.7
  .byte 105 # 'i' # ClassDecl at 6.7
  .byte 110 # 'n' # ClassDecl at 6.7
3868:CLASS_Main: # ClassDecl at 6.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
  .word mth_Main_main # MethodDeclVoid at 7.14
3916:END_CLASS_Main: # ClassDecl at 6.7
3916:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
3924:CLASS_RunMain: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
3936:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class Vehicle ****** # ClassDecl at 24.7
  .byte 0 # ClassDecl at 24.7
  .byte 214 # 'V' with high bit set # ClassDecl at 24.7
  .byte 101 # 'e' # ClassDecl at 24.7
  .byte 104 # 'h' # ClassDecl at 24.7
  .byte 105 # 'i' # ClassDecl at 24.7
  .byte 99 # 'c' # ClassDecl at 24.7
  .byte 108 # 'l' # ClassDecl at 24.7
  .byte 101 # 'e' # ClassDecl at 24.7
3944:CLASS_Vehicle: # ClassDecl at 24.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Vehicle_price # MethodDeclNonVoid at 25.13
# ****** class Car ****** # ClassDecl at 30.7
  .byte 0 # ClassDecl at 30.7
  .byte 195 # 'C' with high bit set # ClassDecl at 30.7
  .byte 97 # 'a' # ClassDecl at 30.7
  .byte 114 # 'r' # ClassDecl at 30.7
3964:CLASS_Car: # ClassDecl at 30.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Car_price # MethodDeclNonVoid at 31.13
3980:END_CLASS_Car: # ClassDecl at 30.7
3980:END_CLASS_Vehicle: # ClassDecl at 24.7
3980:dataArrayVTableStart: # IntegerType at 0.0
3980:END_CLASS_Object: # ClassDecl at 0.0
  .byte 32 # StringLiteral at 18.18
  .byte 0 # StringLiteral at 18.18
  .byte 0 # StringLiteral at 18.18
  .byte 0 # StringLiteral at 18.18
  .word CLASS_String # StringLiteral at 18.18
  .word 2 # StringLiteral at 18.18
  .word -1 # StringLiteral at 18.18
3996:strLit_15: # StringLiteral at 18.18
  .byte 10 # StringLiteral at 20.18
  .byte 0 # StringLiteral at 20.18
  .byte 0 # StringLiteral at 20.18
  .byte 0 # StringLiteral at 20.18
  .word CLASS_String # StringLiteral at 20.18
  .word 2 # StringLiteral at 20.18
  .word -1 # StringLiteral at 20.18
4012:strLit_24: # StringLiteral at 20.18
# begin: Program at 6.1; stackHeight = 0
.text
.globl main
0:main:
0#  jal vm_init
# begin: CallStatement at 0.0; stackHeight = 0
# begin: Call at 0.0; stackHeight = 0
# begin: NewObject at 0.0; stackHeight = 0
4#li $s6, 2
8#li $s7, 1
12#jal newObject
16#la $t0, CLASS_Main
20#sw $t0, -12($s7)
# end: NewObject at 0.0; stackHeight = 4
24#lw $t0, 0($sp)
28#sw $s2, 0($sp)
32#move $s2, $t0
36#beq $s2, $0, nullPtrException
40#lw $t0, -12($s2)
44#lw $t0, 44($t0)
48#jalr $t0
52#addu $sp, $sp, 0
56#lw $s2, ($sp)
60#addu $sp, $sp, 4
64#subu $sp, $sp, 4
68#sw $t0, ($sp)
# end: Call at 0.0; stackHeight = 4
72#lw $t0, ($sp)
76#addu $sp, $sp, 4
# end: CallStatement at 0.0; stackHeight = 0
80#  li $v0, 10
84#  syscall
# begin: MethodDeclVoid at 7.14; stackHeight = 0
.globl mth_Main_main
88:mth_Main_main:
88#subu $sp, $sp, 4
92#sw $ra, ($sp)
# begin: LocalVarDecl at 8.11; stackHeight = 0
# begin: NewObject at 8.16; stackHeight = 0
96#li $s6, 2
100#li $s7, 1
104#jal newObject
108#la $t0, CLASS_Car
112#sw $t0, -12($s7)
# end: NewObject at 8.16; stackHeight = 4
116#lw $0, ($sp) #**v1
# end: LocalVarDecl at 8.11; stackHeight = 4
# begin: LocalVarDecl at 9.11; stackHeight = 4
# begin: NewObject at 9.16; stackHeight = 4
120#li $s6, 2
124#li $s7, 1
128#jal newObject
132#la $t0, CLASS_Vehicle
136#sw $t0, -12($s7)
# end: NewObject at 9.16; stackHeight = 8
140#lw $0, ($sp) #**v2
# end: LocalVarDecl at 9.11; stackHeight = 8
# begin: CallStatement at 10.9; stackHeight = 8
# begin: Call at 10.9; stackHeight = 8
144#subu $sp, $sp, 4
148#sw $s2, ($sp)
# begin: Call at 10.21; stackHeight = 12
# begin: IdentifierExp at 10.18; stackHeight = 12
152#lw $t0, 8($sp) #**LocalVar
156#subu $sp, $sp, 4
160#sw $t0, ($sp)
# end: IdentifierExp at 10.18; stackHeight = 16
164#lw $t0, 0($sp)
168#sw $s2, 0($sp)
172#move $s2, $t0
176#beq $s2, $0, nullPtrException
180#lw $t0, -12($s2)
184#lw $t0, 12($t0)
188#jalr $t0
192#addu $sp, $sp, 0
196#lw $s2, ($sp)
200#addu $sp, $sp, 4
204#subu $sp, $sp, 8
208#sw $s5, 4($sp)
212#sw $t0, ($sp)
# end: Call at 10.21; stackHeight = 20
216#lw $t0, 8($sp)
220#sw $s2, 8($sp)
224#move $s2, $t0
228#jal mth_Lib_printInt
232#addu $sp, $sp, 8
236#lw $s2, ($sp)
240#addu $sp, $sp, 4
244#subu $sp, $sp, 4
248#sw $t0, ($sp)
# end: Call at 10.9; stackHeight = 12
252#lw $t0, ($sp)
256#addu $sp, $sp, 4
# end: CallStatement at 10.9; stackHeight = 8
# begin: CallStatement at 18.9; stackHeight = 8
# begin: Call at 18.9; stackHeight = 8
260#subu $sp, $sp, 4
264#sw $s2, ($sp)
# begin: StringLiteral at 18.18; stackHeight = 12
268#li $t0, strLit_15
272#subu $sp, $sp, 4
276#sw $t0, ($sp)
# end: StringLiteral at 18.18; stackHeight = 16
280#lw $t0, 4($sp)
284#sw $s2, 4($sp)
288#move $s2, $t0
292#jal mth_Lib_printStr
296#addu $sp, $sp, 4
300#lw $s2, ($sp)
304#addu $sp, $sp, 4
308#subu $sp, $sp, 4
312#sw $t0, ($sp)
# end: Call at 18.9; stackHeight = 12
316#lw $t0, ($sp)
320#addu $sp, $sp, 4
# end: CallStatement at 18.9; stackHeight = 8
# begin: CallStatement at 19.9; stackHeight = 8
# begin: Call at 19.9; stackHeight = 8
324#subu $sp, $sp, 4
328#sw $s2, ($sp)
# begin: Call at 19.21; stackHeight = 12
# begin: IdentifierExp at 19.18; stackHeight = 12
332#lw $t0, 4($sp) #**LocalVar
336#subu $sp, $sp, 4
340#sw $t0, ($sp)
# end: IdentifierExp at 19.18; stackHeight = 16
344#lw $t0, 0($sp)
348#sw $s2, 0($sp)
352#move $s2, $t0
356#beq $s2, $0, nullPtrException
360#lw $t0, -12($s2)
364#lw $t0, 12($t0)
368#jalr $t0
372#addu $sp, $sp, 0
376#lw $s2, ($sp)
380#addu $sp, $sp, 4
384#subu $sp, $sp, 8
388#sw $s5, 4($sp)
392#sw $t0, ($sp)
# end: Call at 19.21; stackHeight = 20
396#lw $t0, 8($sp)
400#sw $s2, 8($sp)
404#move $s2, $t0
408#jal mth_Lib_printInt
412#addu $sp, $sp, 8
416#lw $s2, ($sp)
420#addu $sp, $sp, 4
424#subu $sp, $sp, 4
428#sw $t0, ($sp)
# end: Call at 19.9; stackHeight = 12
432#lw $t0, ($sp)
436#addu $sp, $sp, 4
# end: CallStatement at 19.9; stackHeight = 8
# begin: CallStatement at 20.9; stackHeight = 8
# begin: Call at 20.9; stackHeight = 8
440#subu $sp, $sp, 4
444#sw $s2, ($sp)
# begin: StringLiteral at 20.18; stackHeight = 12
448#li $t0, strLit_24
452#subu $sp, $sp, 4
456#sw $t0, ($sp)
# end: StringLiteral at 20.18; stackHeight = 16
460#lw $t0, 4($sp)
464#sw $s2, 4($sp)
468#move $s2, $t0
472#jal mth_Lib_printStr
476#addu $sp, $sp, 4
480#lw $s2, ($sp)
484#addu $sp, $sp, 4
488#subu $sp, $sp, 4
492#sw $t0, ($sp)
# end: Call at 20.9; stackHeight = 12
496#lw $t0, ($sp)
500#addu $sp, $sp, 4
# end: CallStatement at 20.9; stackHeight = 8
504#addu $sp, $sp, 8
508#lw $ra, ($sp)
512#addu $sp, $sp, 4
516#jr $ra
# end: MethodDeclVoid at 7.14; stackHeight = -4
.globl mth_Vehicle_price
520:mth_Vehicle_price:
520#subu $sp, $sp, 4
524#sw $ra, ($sp)
# begin: IntegerLiteral at 26.10; stackHeight = 0
528#li $t0, 100
532#subu $sp, $sp, 8
536#sw $s5, 4($sp)
540#sw $t0, ($sp)
# end: IntegerLiteral at 26.10; stackHeight = 8
544#lw $t0, ($sp)
548#addu $sp, $sp, 8
552#addu $sp, $sp, 0
556#lw $ra, ($sp)
560#addu $sp, $sp, 4
564#jr $ra
.globl mth_Car_price
568:mth_Car_price:
568#subu $sp, $sp, 4
572#sw $ra, ($sp)
# begin: IntegerLiteral at 32.10; stackHeight = 0
576#li $t0, 200
580#subu $sp, $sp, 8
584#sw $s5, 4($sp)
588#sw $t0, ($sp)
# end: IntegerLiteral at 32.10; stackHeight = 8
592#lw $t0, ($sp)
596#addu $sp, $sp, 8
600#addu $sp, $sp, 0
604#lw $ra, ($sp)
608#addu $sp, $sp, 4
612#jr $ra
# end: Program at 6.1; stackHeight = -4
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
616:mth_Object_hashCode:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
616#    lw $t0,-8($s2) # get word with hash bits from this
620#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
624#    addu $t0,$t1

628#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
632:mth_Object_equals:
632#    move $t0,$s2 # first pointer (this)
636#    lw $t1,($sp) # second pointer
640#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
641##...subu $at,$t0,$t1
645##...sltiu $t0,$at,1

648#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
652:mth_String_hashCode:
652#    move $t0,$s2 # put this pointer in t0

656#    li $t2,0 # current hash value
660#    lw $t1,-4($t0) # negative of number of characters in string
664#    beq $t1,$zero,done_hashCode_String # if zero length => done
668#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
672#    and $t0,0xfffffffc # adjust for padding
673##...lui $at,65535
677##...ori $at,$at,0xfffc
681##...and $t0,$t0,$at
684#    subu $t1,$t0,$t1 # address at end of string +12
688:loop_hashCode_String:    
688#    sll $t4,$t2,5 # multiply by 32
692#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
696#    lbu $t3,-12($t0) # current character
700#    addu $t2,$t3 # add in current character
704#    addu $t0,1 # go to next character's address
708#    bne $t0,$t1,loop_hashCode_String # loop back if more
712:done_hashCode_String:    

    # push int on stack
712#    move $t0, $t2 # put $t2 in return slot
716#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
720:mth_Object_toString:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
720#    subu $sp,4
724#    sw $ra,($sp)
    
    # get hash value
728#    lw $t2,-12($s2) # vtable address
732#    lw $t0,($t2) # method address
736#    jalr $t0
740#    subu $sp,8 # push result (int in $t0) on stack
744#    sw $s5,4($sp)
748#    sw $t0,($sp)

    # compute print-size of hash value
752#    li $t0, 1
756#    lw $t1, ($sp)
760#    srl $t1,$t1,4
764#    beq $t1,$zero,toString_skip_loop
768:toString_loop_top:
768#    addu $t0,1
772#    srl $t1,$t1,4
776#    bne $t1,$zero,toString_loop_top
780:toString_skip_loop:
780#    subu $sp,8
784#    sw $s5,4($sp)
788#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
792#    lw $t2,-12($s2) # vtable address
796#    move $t0,$t2
800:toString_checkTagBit:
800#    subu $t0,1
804#    lb $t1,($t0)
808#    and $t1,0x80
809##...lui $at,0
813##...ori $at,$at,0x80
817##...and $t1,$t1,$at
820#    beq $t1,$zero,toString_checkTagBit
824#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
828#    subu $sp,8
832#    sw $t1,($sp)
836#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
840#    move $s7,$zero # -4 offset header word
844#    lw $t4,8($sp) # bytes for hash value
848#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
852#    addu $t4,8
856#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
860#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

864#    li $t0,CLASS_String # store string vtable address into ...
868#    sw $t0,-12($s7) # ... -12 offset in object header
872#    lw $t2,-12($s2) # our object's vtable address
876#    lw $t5,4($sp) # number characters in prefix
880#    lw $t1,12($sp) # number of characters in hashcode
884#    addu $t3,$t1,$t5 # number of characters in string ...
888#    addu $t3,1 # ... including the '@' character
892#    subu $t0,$zero,$t3 # store negated length into ...
896#    sw $t0,-4($s7) # ... -4 offset header word
900#    lw $t0,-8($s7) # get -8 offset header-word
904#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
905##...slt $at,$t0,$zero
909##...beq $at,$zero,928
912#    and $t0,0xff # mask off object's hash value ...
913##...lui $at,0
917##...ori $at,$at,0xff
921##...and $t0,$t0,$at
924#    sw $t0,-8($s7) # ... and store back into -8 header-word
928:skipMask_toString:
928#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
932#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
936#    subu $t4,$t2,$t5
940:toString_copyLoop:    
940#    lb $t3,($t4)
944#    and $t3,0x7f # mask off sign bit (in case first word)
945##...lui $at,0
949##...ori $at,$at,0x7f
953##...and $t3,$t3,$at
956#    sb $t3,-8($t0)
960#    addu $t4,1
964#    addu $t0,1
968#    blt $t4,$t2,toString_copyLoop
969##...slt $at,$t4,$t2
973##...bne $at,$zero,940

    # copy the '@' sign
976#    li $t3,'@'
980#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
984#    addu $t2,$t0,$t1 # address of last byte in string to store +8
988#    lw $t3,20($sp) # hash code to print
992:toString_hashCopyLoop:
992#    and $t4,$t3,0xf
996#    srl $t3,4
1000#    lb $t4,hexChars($t4)
1004#    sb $t4,-8($t2)
1008#    subu $t2,$t2,1
1012#    bgt $t2,$t0,toString_hashCopyLoop
1013##...slt $at,$t0,$t2
1017##...bne $at,$zero,992

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
1020#    addu $sp,28
1024#    lw $ra,($sp)
1028#    addu $sp,4
1032#    move $t0, $s7 # return string we created
1036#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
1040:mth_String_equals:
    
    # quick test for obvious false
1040#    lw $t0,($sp) # second parameter
1044#    beq $t0,$zero,goEsFalse # go return false if null
1048#    lw $t1,-12($t0) # vtable pointer
1052#    la $t2,CLASS_String # string vtable pointer
1056#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
1060#    subu $sp,12
1064#    sw $ra,8($sp)
1068#    sw $s2,4($sp)
1072#    sw $t0,($sp)
1076#    jal mth_String_compareTo
1080#    lw $s2, 4($sp) #restore this pointer and pop parameters
1084#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
1088#    seq $t0,$t0,$zero
1089##...subu $at,$t0,$zero
1093##...sltiu $t0,$at,1

    # pop return address and return $t0
1096#    lw $ra,($sp)
1100#    addu $sp,4

1104#    jr $ra # return
    
1108:goEsFalse:
    # put 0 in $t0 and return
1108#    li $t0, 0
1112#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
1116:mth_String_toString:
    #we are a string, so return this.
1116#    move $t0, $s2
1120#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
1124:mth_Lib_readLine:
    
1124#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
1128#    sw $ra, 4($sp) # save $ra
1132#    move $t1,$sp # save "original" sp

1136:  doRead:

    # read the character
1136#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
1140#    subu $t2,$v0,13
1144#    bne $t2,$zero,notReturnRL
1148#    jal readLogicalChar
1152#    subu $t2,$v0,10 # check for newline
1156#    beq $t2,$zero,foundNewLine
1160#    sw $v0,lastCharRead # push back character into queue
1164#    j foundNewLine # go process the line

1168:  notReturnRL:

    # at this point, $v0 has our character

1168#    subu $t0,$v0,10
1172#    beq $t0,$zero,foundNewLine
1176#    blt $v0,$zero,foundEof
1177##...slt $at,$v0,$zero
1181##...bne $at,$zero,1196

    # we have a character, so push it onto stack
1184#    subu $sp,$sp,4
1188#    sw $v0,($sp)

    # loop back up to get next character
1192#    j doRead

1196:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
1196#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
1200#    li $s7, 0 # return-value: null
1204#    j rlReturn # return

1208:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
1208#    subu $t0,$t1,$sp # number of chars we read (times 4)
1212#    srl $s6,$t0,2 # number of words on stack with chars
1216#    subu $sp,$sp,4 # push char-count ...
1220#    sw $s6,($sp) # ... onto stack
1224#    addu $t2,$t0,5 # GC tag, incl. for count-word
1228#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
1232#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
1236#    srl $s6,$s6,2  # data words in object
1240#    move $s7,$zero # object words in object
1244#    jal newObject  # allocate space
    
    # store header words
1248#    la $t0,CLASS_String
1252#    sw $t0,-12($s7)# store class tag (String) into object
1256#    lw $t2,4($sp) # char-count
1260#    sll $t1,$t2,2 # 4 times number of chars
1264#    subu $t2,$zero,$t2 # negative of char-count
1268#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
1272#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
1276#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
1277##...slt $at,$t0,$zero
1281##...beq $at,$zero,1300
1284#    and $t0,0xff # mask off object's hash value ...
1285##...lui $at,0
1289##...ori $at,$at,0xff
1293##...and $t0,$t0,$at
1296#    sw $t0,-8($s7) # ... and store back into -8 header-word
1300:  skipMask_readLine:

1300#    sll $t0,$t0,2 # data bytes in object
1304#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
1308#    subu $t0,$t0,$t2 # place to store last character (plus 9)
1312#    addu $sp,$sp,8 # pop redundant object-pointer and count
1316#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

1320#    beq $sp,$t1,rlReturn
1324:  charCopyLoop:
1324#    lw $t2,($sp)
1328#    sb $t2,-9($t0)
1332#    addu $sp,$sp,4
1336#    subu $t0,$t0,1
1340#    bne $sp,$t1,charCopyLoop
1344:  rlReturn:

1344#    lw $ra, 4($sp)
1348#    addu $sp, 8   # pop $ra and pointless word off stack
1352#    move $t0, $s7 # return string we allocated in $s7
1356#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1360:mth_Lib_readInt:

    # save $ra by pushing onto stack
1360#    subu $sp,$sp,4
1364#    sw $ra,($sp)

1368:  riSkipWhiteLoop:
    # read a character
1368#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
1372#    subu $t0,$v0,32
1376#    bgt $t0,$zero,nonWhite
1377##...slt $at,$zero,$t0
1381##...bne $at,$zero,1424
1384#    beq $t0,$zero,riSkipWhiteLoop # start over if space
1388#    subu $t0,$v0,10
1392#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
1396#    subu $t0,$v0,9
1400#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
1404#    subu $t0,$v0,13
1408#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
1412#    subu $t0,$v0,12
1416#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
1420#    j badIntegerFormat # illegal integer char: abort program

1424:  nonWhite:
1424#    subu $t0,$v0,'-'
1428#    li $t4,1 # final multiplier
1432#    bne $t0,$zero,helpReadInt # go read
1436#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
1440#    jal readLogicalChar

1444:  helpReadInt:
1444#    li $t2,10
1448#    subu $t1,$v0,'0' # convert digit to 0-9 value
1452#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
1453##...sltu $at,$t1,$t2
1457##...beq $at,$zero,3740
1460#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

1464:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

1464#    jal readLogicalChar # read next character
1468#    subu $t1,$v0,'0' # convert digit to 0-9 value
1472#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
1473##...sltu $at,$t1,$t2
1477##...beq $at,$zero,1496

1480#    mul $t3,$t3,$t2 # multiply old value by 10
1481##...mult $t3,$t2
1485##...mflo $t3
1488#    addu $t3,$t3,$t1 # add in value of new digit
1492#    j digitLoop

1496:  doneDigitLoop:

    # "push back" unused character into queue
1496#    sw $v0,lastCharRead

    # restore return address
1500#    lw $ra,($sp)
1504#    addu $sp, 4

    # multiply by sign and put return value in $t0
1508#    mult $t3,$t4 # multiply to account for poss. minus sign
1512#    mflo $t3
1516#    move $t0, $t3
    
    # return
1520#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
1524:mth_Lib_readChar:

    # save $ra by pushing onto stack
1524#    subu $sp,$sp,4
1528#    sw $ra,($sp)

      # read the character
1532#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
1536#    lw $ra,($sp)
1540#    addu $sp, 4
1544#    move $t0, $v0

    # return
1548#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
1552:mth_Lib_printStr:
    # check for null, printing "(null)", if so
1552#    lw $t0,($sp)
1556#    bne $t0,$zero,psNotNull

    # print "(null)"
1560#    la $a0,nullStr
1564#    li $v0,4
1568#    syscall
1572#    j donePrintStr
    
1576:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
1576#    subu $t0,$t0,8
1580#    lw $t1,($t0) # number of data words, but needs modification
1584#    blt $t1,$zero,skipPrintStr1
1585##...slt $at,$t1,$zero
1589##...bne $at,$zero,1608
1592#    and $t1,0xff # mask out all but low byte
1593##...lui $at,0
1597##...ori $at,$at,0xff
1601##...and $t1,$t1,$at
1604#    b skipPrintStr2
1608:skipPrintStr1:
1608#    and $t1,0x7ffffff
1609##...lui $at,2047
1613##...ori $at,$at,0xffff
1617##...and $t1,$t1,$at
1620:skipPrintStr2:    
1620#    sll $t1,$t1,2
1624#    subu $t1,$t0,$t1 # first word in string
1628#    lw $t0,4($t0) # negative of string-length
1632#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
1636#    beq $t0,$t1,donePrintStr
1640:  psLoop:
1640#    lb $a0,($t1) # next byte
1644#    li $v0,11 # code for printing char
1648#        syscall # print the char
1652#    addu $t1,$t1,1 # go to next char
1656#    blt $t1,$t0,psLoop
1657##...slt $at,$t1,$t0
1661##...bne $at,$zero,1640

1664:  donePrintStr:
1664#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
1668:mth_Lib_printInt:
1668#    lw $a0,($sp)

    # print it
1672#    li $v0,1 # code for print-int
1676#    syscall

    # return
1680#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
1684:mth_Lib_printBool:
    # pop value off stack, along with 'this'
1684#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
1688#    la $a0,falseString
1692#    beq $t0,$zero,skipPB
1696#    la $a0,trueString
1700:  skipPB:
1700#    li $v0,4 # code for print-string
1704#    syscall

    # return
1708#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
1712:mth_String_substring:

    # save $ra by pushing onto stack
1712#    subu $sp,$sp,4
1716#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
1720#    move $t0,$s2
1724#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
1728#    lw $t0,-4($t0) # negative of string length
1732#    subu $t0,$zero,$t0 # string length
1736#    lw $t1,4($sp) # k
1740#    lw $t2,12($sp) # n
1744#    bgt $zero,$t2,strIndexOutOfBounds
1745##...slt $at,$t2,$zero
1749##...bne $at,$zero,3708
1752#    bgt $t2,$t1,strIndexOutOfBounds
1753##...slt $at,$t1,$t2
1757##...bne $at,$zero,3708
1760#    bgt $t1,$t0,strIndexOutOfBounds
1761##...slt $at,$t0,$t1
1765##...bne $at,$zero,3708

    # allocate memory
1768#    subu $s6,$t1,$t2 # # chars in target-string
1772#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
1776#    srl $s6,$s6,2 # convert bytes-count to word-count
1780#    move $s7,$zero # (no object-bytes in string)
1784#    jal newObject

    # store "String" tag in object-type field
1788#    la $t0,CLASS_String
1792#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
1796#    lw $t4,-8($s7) # data words in source string
1800#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
1801##...slt $at,$t4,$zero
1805##...beq $at,$zero,1824
1808#    and $t4,0xff # mask off object's hash value ...
1809##...lui $at,0
1813##...ori $at,$at,0xff
1817##...and $t4,$t4,$at
1820#    sw $t4,-8($s7) # ... and store back into -8 header-word
1824:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
1824#    lw $t1,8($sp) # k
1828#    lw $t2,16($sp) # n
1832#    subu $t0,$t2,$t1 # value to store
1836#    sw $t0,-4($s7) # store value
    
1840#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
1844#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
1848#    lw $t4,-8($t3) # data words in source string
1852#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
1856#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
1860#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
1864#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
1868#    lw $t2,-8($s7)   # data words in target string
1872#    sll $t2,$t2,2    # data bytes in target string
1876#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
1880:  subCopyLoopzz:
1880#    lb $t4,-8($t3)
1884#    sb $t4,-8($t2)
1888#    addu $t2,$t2,1
1892#    addu $t3,$t3,1
1896#    blt $t3,$t1,subCopyLoopzz
1897##...slt $at,$t3,$t1
1901##...bne $at,$zero,1880
    
1904:  doneSubCopyzz:
    # restore return address, store return value, pop stack
1904#    lw $ra,4($sp) # restore $ra
1908#    addu $sp,$sp,8 # pop ra, and allocated newObject
1912#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
1916#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
1920:mth_String_length:

    # the length is the negative of 4($s2)
1920#    lw $t0,-4($s2) # -length
1924#    subu $t0,$zero,$t0

    # return
1928#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
1932:mth_String_concat:
    # save $ra by pushing onto stack
1932#    subu $sp,$sp,4
1936#    sw $ra, ($sp)

    # get string pointers and check parameter for null
1940#    lw $t0,4($sp)
1944#    beq $t0,$zero,nullPtrException
1948#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
1952#    lw $t0,-4($t0) # negative size of second object
1956#    lw $t1,-4($t1) # negative size of first object
1960#    addu $s6,$t0,$t1 # sum of negative sizes
1964#    sra $s6,$s6,2 # negative word-size of char part
1968#    subu $s6,$zero,$s6 # word size of char part
1972#    addu $s6,$s6,1 # data word size, including v-table word
1976#    move $s7,$zero
1980#    jal newObject

    # store String vtable address in vtable address field
1984#    la $t0,CLASS_String
1988#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
1992#    lw $t4,-8($s7) # # data words in source string
1996#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
1997##...slt $at,$t4,$zero
2001##...beq $at,$zero,2020
2004#    and $t4,0xff # mask off object's hash value ...
2005##...lui $at,0
2009##...ori $at,$at,0xff
2013##...and $t4,$t4,$at
2016#    sw $t4,-8($s7) # ... and store back into -8 header-word
2020:skipMask_concat:

2020#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
2024#    move $t1,$s2   # first object
2028#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
2032#    lw $t2,-4($t0) # negative length of second object
2036#    lw $t3,-4($t1) # negative length of first object
2040#    addu $t4,$t2,$t3 # sum of negative lengths
2044#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
2048#    lw $t4,-8($t1) # # data words in first string
2052#    sll $t4,$t4,2 # # data bytes in first string
2056#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
2060#    lw $t4,-8($s7) # # data words in new string
2064#    sll $t4,$t4,2 # # data bytes in new string
2068#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
2072#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
2076#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
2080:  concatLoop1zz:
2080#    lb $t4,-8($t1)
2084#    sb $t4,-8($s7)
2088#    addu $s7,$s7,1
2092#    addu $t1,$t1,1
2096#    blt $t1,$t3,concatLoop1zz
2097##...slt $at,$t1,$t3
2101##...bne $at,$zero,2080
2104:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
2104#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
2108#    lw $t4,-8($t0) # # data words in second string
2112#    sll $t4,$t4,2 # # data bytes in second string
2116#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
2120#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
2124:  concatLoop2zz:
2124#    lb $t4,-8($t1)
2128#    sb $t4,-8($s7)
2132#    addu $s7,$s7,1
2136#    addu $t1,$t1,1
2140#    blt $t1,$t3,concatLoop2zz
2141##...slt $at,$t1,$t3
2145##...bne $at,$zero,2124
2148:  doneConcatLoop2zz:
 
2148:  concatRtnzz:
    # return
2148#    move $t0, $t9 # put saved return string in $t0
2152#    lw $ra, 4($sp)
2156#    addu $sp, 8 # pop ra and allocated newObject
2160#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
2164:mth_String_charAt:
    # get string
2164#    move $t0,$s2

    # check that index is in bounds
2168#    lw $t1,-4($t0) # negative of # data words in string
2172#    subu $t3,$zero,$t1 # # chars in string
2176#    lw $t2,($sp) # index
2180#    bgeu $t2,$t3,strIndexOutOfBounds
2181##...sltu $at,$t2,$t3
2185##...beq $at,$zero,3708

    # access element
2188#    lw $t1,-8($t0) # # data words in object
2192#    sll $t1,$t1,2 # - byte-offset from end of chars
2196#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
2200#    addu $t0,$t0,$t1 # - address of our char, offset by 8
2204#    lb $t0,-8($t0) # our char

    # return
2208#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
2212:mth_Lib_intToString:

    # save return address on stack; allocate space for dummy GC tag
2212#    subu $sp,$sp,8
2216#    sw $ra,4($sp)

    # save current sp
2220#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
2224#    li $t3,10

    # get argument, negate if negative
2228#    lw $t1,8($sp)
2232#    bge $t1,$zero,itsNonNegLoop
2233##...slt $at,$t1,$zero
2237##...beq $at,$zero,2244
2240#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
2244:  itsNonNegLoop:
2244#    divu $t1,$t3
2248#    mflo $t1 # quotient
2252#    mfhi $t4 # remainder
2256#    addu $t4,$t4,'0' # turn remainder into digit
2260#    subu $sp,$sp,4
2264#    sw $t4,($sp) # push digit onto stack
2268#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
2272#    lw $t4,8($t0)
2276#    bge $t4,$zero,itsSkipNeg
2277##...slt $at,$t4,$zero
2281##...beq $at,$zero,2296
2284#    li $t4,'-'
2288#    subu $sp,$sp,4
2292#    sw $t4,($sp)
2296:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
2296#    subu $s6,$t0,$sp
2300#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
2304#    sw $t3,($t0)
2308#    srl $s6,$s6,2
2312#    subu $sp,$sp,4
2316#    sw $s6,($sp)
    
    # allocate memory
2320#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
2324#    srl $s6,$s6,2
2328#    move $s7,$zero # no "object" words in object
2332#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
2336#    lw $t0,4($sp)
2340#    addu $sp,$sp,8

    # store "String" tag into class field
2344#    subu $s7,$s7,8 # address of header-1 word
2348#    la $t1,CLASS_String
2352#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
2356#    lw $t4,($s7) # # data words in source string
2360#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
2361##...slt $at,$t4,$zero
2365##...beq $at,$zero,2384
2368#    and $t4,0xff # mask off object's hash value ...
2369##...lui $at,0
2373##...ori $at,$at,0xff
2377##...and $t4,$t4,$at
2380#    sw $t4,($s7) # ... and store back into -8 header-word
2384:skipMask_intToString:
    
    # store negative of char-count into header-2 word
2384#    subu $t0,$zero,$t0
2388#    sw $t0,4($s7)

2392#    lw $t1,($s7) # number of data words in string
2396#    sll $t1,$t1,2 # number data bytes in string
2400#    subu $t1,$s7,$t1 # first location to store chars in string
2404#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
2408:  itsLoop:
2408#    lw $t2,($sp)
2412#    addu $sp,$sp,4
2416#    sb $t2,($t1)
2420#    addu $t1,$t1,1
2424#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
2428#    lw $ra,4($sp)
2432#    addu $sp,$sp,8
2436#    addu $t0,$t0,15
2440#    and $t0,$t0,0xfffffffc
2441##...lui $at,65535
2445##...ori $at,$at,0xfffc
2449##...and $t0,$t0,$at
2452#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
2456:mth_Lib_intToChar:
    # save return address
2456#    subu $sp,$sp,4
2460#    sw $ra,($sp)

    # allocate object
2464#    li $s6,2
2468#    move $s7,$zero
2472#    jal newObject

    # get n from string.
2476#    lw $t1,8($sp)

    # store "String" tag into class field
2480#    la $t0,CLASS_String
2484#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
2488#    lw $t4,-8($s7) # # data words in source string
2492#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
2493##...slt $at,$t4,$zero
2497##...beq $at,$zero,2516
2500#    and $t4,0xff # mask off object's hash value ...
2501##...lui $at,0
2505##...ori $at,$at,0xff
2509##...and $t4,$t4,$at
2512#    sw $t4,-8($s7) # ... and store back into -8 header-word
2516:  skipMask_intToChar:

    # store data in string
2516#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
2520#    li $t0,-1
2524#    sw $t0,-4($s7)

    # we're returning $s7
2528#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
2532#    lw $ra,4($sp)
2536#    addu $sp,$sp,8

    # return
2540#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
2544:mth_String_compareTo:
    # get string pointers and check parameter for null
2544#    lw $t0,($sp) # second string
2548#    beq $t0,$zero,nullPtrException
2552#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
2556#    lw $t2,-4($t0) # negative length of second string
2560#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
2564#    slt $t4,$t3,$t2
2568#    slt $t5,$t2,$t3
2572#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
2576#    lw $t2,-8($t0) # # data words in second string
2580#    lw $t3,-8($t1) # # data words in first string
2584#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
2588#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
2592#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
2596#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
2600#    beq $zero,$t5,skipStrCmpLenzz
2604#    move $t2,$t3
2608:  skipStrCmpLenzz:
2608#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
2612:  cmpLoopzz:
2612#    lw $t3,-8($t1) # word from str2
2616#    lw $t4,-8($t0) # word from str1
2620#    bne $t3,$t4,cmpNotEqualzz
2624#    addu $t1,$t1,4
2628#    addu $t0,$t0,4
2632#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
2636#    j cmpHitLimitzz

2640:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
2640#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
2644#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
2648#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
2652:  cmpHitLimitzz:
2652#    move $t0, $t5 # store return value
2656#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
2660:readLogicalChar:

    # check if we already have a character
2660#    lw $v0,lastCharRead
2664#    li $t0,-2
2668#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
2672#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
2676#    jr $ra # return
    
2680:  doReadCh:
    # we need to actually read a character: read and return
2680#    li $v0,12 # use system call to read a character
2684#    syscall
2688#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
2692:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
2692#    blt $s7,$zero arraySizeOutOfBounds
2693##...slt $at,$s7,$zero
2697##...bne $at,$zero,3724

    # mark the fact that we have not yet GC'd for this allocation
2700#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

2704:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
2704#    addu $t0,$s6,$s7
2708#    sll $t0,$t0,2
2712#    addu $t0,$t0,8 # amount of memory needed
2716#    addu $t1,$t0,$s3
2720#    bgtu $t1,$s4,doGC
2721##...sltu $at,$s4,$t1
2725##...bne $at,$zero,2848

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
2728#    move $t2,$s3
2732:  zeroObjLoop:
2732#    sw $zero,($s3)
2736#    lw $zero,($s3)

2740#    addu $s3,4
2744#    bltu $s3,$t1,zeroObjLoop
2745##...sltu $at,$s3,$t1
2749##...bne $at,$zero,2732

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
2752#    sll $t0,$s7,2    # number of post-header bytes
2756#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
2760#    li $t2,255
2764#    bgeu $s6,$t2 firstHeaderLarge
2765##...sltu $at,$s6,$t2
2769##...beq $at,$zero,2816
2772#    lw $t1,prevHashConstant
2776#    addu $t1,0x12b68fd2
2777##...lui $at,4791
2781##...addiu $at,$at,-28718
2785##...addu $t1,$at,$t1
2788#    sw $t1,prevHashConstant # update hash constant
2792#    or $t1,0x80000000 # set top bit
2793##...lui $at,32768
2797##...or $t1,$at,$t1
2800#    and $t1,0xffffff00 # clear low bit
2801##...lui $at,65535
2805##...ori $at,$at,0xff00
2809##...and $t1,$t1,$at
2812#    or $s6,$t1
2816:firstHeaderLarge:
2816#    sw $s6,-8($t0) # store header-1 value
2820#    lw $zero,-8($t0)

    # store second header-value
2824#    sw $s7,-4($t0)   # second header-word
2828#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
2832#    move $s7,$t0
2836#    subu $sp,$sp,4
2840#    sw $t0,($sp)

2844#    jr $ra
    
2848:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
2848#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
2852#    lw $t5,gcCount
2856#    addu $t5,1
2860#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
2864#    subu $sp,$sp,4
2868#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
2872#    lw $t0,cur_seg
2876#    move $t7,$s4
2880#    la $t6,seg1_start
2881##...lui $t6,16
2885##...addiu $t6,$t6,4384
2888#    la $s3,seg0_start
2892#    la $s4,seg0_end
2893##...lui $s4,16
2897##...addiu $s4,$s4,4384
2900#    sw $zero,cur_seg
2904#    bne $t0,$zero,skipGc1
2908#    la $t6,seg0_start
2912#    la $s3,seg1_start
2913##...lui $s3,16
2917##...addiu $s3,$s3,4384
2920#    la $s4,seg1_end
2921##...lui $s4,32
2925##...addiu $s4,$s4,4384
2928#    sw $s5,cur_seg
2932:  skipGc1:
2932#    li $t5,0x80000000
2936#    lw $t0,stack_bottom
2940#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

2944:  gcStackCopyLoop:
2944#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
2948#    sll $t2,$t1,31 # zero iff low bit was zero
2952#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
2956#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
2960#    bleu $t1,$t6,gcTestIterDone1
2961##...sltu $at,$t6,$t1
2965##...beq $at,$zero,3128
2968#    bgtu $t1,$t7,gcTestIterDone1
2969##...sltu $at,$t7,$t1
2973##...bne $at,$zero,3128

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
2976#    lw $t2,-8($t1) # possible forwarding tag
2980#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
2984#    lw $t2,-4($t1) # forwarding pointer: object's new address
2988#    sw $t2,4($t0) # update stack value
2992#    j gcTestIterDone1 # do next iteration

2996:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
2996#    bge $t2,$zero,gcSkip2
2997##...slt $at,$t2,$zero
3001##...beq $at,$zero,3016
3004#    and $t2,0xff #### mask off hash value
3005##...lui $at,0
3009##...ori $at,$at,0xff
3013##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

3016:  gcSkip2:
3016#    sll $t2,$t2,2
3020#    addu $t2,$t2,8
3024#    subu $t4,$t1,$t2 # address of first word of source
3028#    lw $t3,-4($t1) # number of object words (negative means zero)
3032#    bge $t3,$zero,gcH2Neg1
3033##...slt $at,$t3,$zero
3037##...beq $at,$zero,3044
3040#    move $t3,$zero
3044:  gcH2Neg1:
3044#    sll $t3,$t3,2
3048#    addu $t3,$t3,$t1 # address one word past last word of source

3052#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
3056#    lw $s0,($t4)
3060#    lw $s1,-8($t1)
3064#    sw $s1,($t4)
3068#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
3072:  gCinnerCopy1:
3072#    lw $s0,($t4)
3076#    sw $s0,($s3)
3080#    addu $t4,$t4,4
3084#    addu $s3,$s3,4
3088#    bltu $t4,$t3,gCinnerCopy1
3089##...sltu $at,$t4,$t3
3093##...bne $at,$zero,3072

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3096#    sw $zero,-8($t1) # 0 in first header-slot
3100#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
3104#    sw $t2,4($t0)
3108#    lw $zero,-8($t2)
3112#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
3116#    j gcTestIterDone1

3120:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
3120#    subu $t0,$t0,$t1
3124#    subu $t0,$t0,3

3128:  gcTestIterDone1:
3128#    bgeu $t0,$sp,gcStackCopyLoop
3129##...sltu $at,$t0,$sp
3133##...beq $at,$zero,2944

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
3136#    lw $t1,cur_seg
3140#    la $t0,seg0_start
3144#    beq $t1,$zero,gcSkip4
3148#    la $t0,seg1_start
3149##...lui $t0,16
3153##...addiu $t0,$t0,4384


3156:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
3156#    bgeu $t0,$s3,gcFinishUp
3157##...sltu $at,$t0,$s3
3161##...beq $at,$zero,3452

    ###### begin outer loop to copy all non-stack-direct objects ######

3164:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
3164#    lw $t1,($t0) # (what will be) first header word for current object
3168#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
3172#    bge $t2,$zero,gcSkip4a # are there hash bits?
3173##...slt $at,$t2,$zero
3177##...beq $at,$zero,3192
3180#    and $t2,0xff # mask off hash bits
3181##...lui $at,0
3185##...ori $at,$at,0xff
3189##...and $t2,$t2,$at
3192:gcSkip4a:    
3192#    sll $t2,$t2,2 # # data bytes
3196#    addu $t2,$t2,8 # to skip header words
3200#    addu $t2,$t0,$t2 # pointer to new object
3204#    lw $t3,-8($t2) # word to swap
3208#    sw $t1,-8($t2) # store header word
3212#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
3216#    lw $t1,-12($t2) # vtable pointer
3220#    li $t0,dataArrayVTableStart # address of vtable for first data array
3224#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
3225##...slt $at,$t1,$t0
3229##...bne $at,$zero,3248

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
3232:  skipToNextObj:
3232#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
3236#    sll $t1,$t1,2 # convert to byte-count
3240#    addu $t0,$t2,$t1 # skip over object
3244#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
3248:  gcNotDataArray:
3248#    lw $t3,-4($t2) # # object words (negative treated as zero)
3252#    bge $t3,$zero,gcH2Neg2
3253##...slt $at,$t3,$zero
3257##...beq $at,$zero,3264
3260#    move $t3,$zero
3264:  gcH2Neg2:
3264#    sll $t3,$t3,2 # # object bytes
3268#    move $t0,$t2 # address of first pointer in object
3272#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
3276#    beq $t0,$s1,gcTestIterDone2
    
3280:  gcNextPointerInObject:
    # get pointer from object
3280#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
3284#    bleu $t1,$t6,gcGoNextPointerSlot
3285##...sltu $at,$t6,$t1
3289##...beq $at,$zero,3432
3292#    bgtu $t1,$t7,gcGoNextPointerSlot
3293##...sltu $at,$t7,$t1
3297##...bne $at,$zero,3432

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
3300#    lw $t8,-8($t1) # possible forwarding tag
3304#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
3308#    lw $t8,-4($t1) # forwarding pointer: object's new address
3312#    sw $t8,($t0) # update pointer in object
3316#    j gcGoNextPointerSlot # do next iteration

3320:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
3320#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
3321##...slt $at,$t8,$zero
3325##...beq $at,$zero,3340
3328#    and $t8,0xff # mask off hash bits
3329##...lui $at,0
3333##...ori $at,$at,0xff
3337##...and $t8,$t8,$at

3340:  gcSkip5:
3340#    sll $t8,$t8,2 # bytes in negative-offset portion ...
3344#    addu $t8,$t8,8 # ... add in bytes for header-words
3348#    subu $t4,$t1,$t8 # address of first word of source object
3352#    lw $t3,-4($t1) # # words in positive-offset portion
3356#    bge $t3,$zero,gcNoNeg
3357##...slt $at,$t3,$zero
3361##...beq $at,$zero,3368
3364#    move $t3,$zero # negative treated as zero
3368:  gcNoNeg:
3368#    sll $t3,$t3,2 # bytes in negative-offset portion
3372#    addu $t3,$t3,$t1 # address one word past last word of source

3376#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
3380#    lw $s0,($t4)
3384#    lw $t9,-8($t1)
3388#    sw $t9,($t4)
3392#    sw $s0,-8($t1)

    # copy all source bytes to the target
3396:  gCinnerCopy2:
3396#    lw $s0,($t4)
3400#    sw $s0,($s3)
3404#    addu $t4,$t4,4
3408#    addu $s3,$s3,4
3412#    bltu $t4,$t3,gCinnerCopy2
3413##...sltu $at,$t4,$t3
3417##...bne $at,$zero,3396

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
3420#    sw $zero,-8($t1) # 0 in first header-slot
3424#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
3428#    sw $t8,($t0)

3432:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
3432#    addu $t0,$t0,4
3436#    bltu $t0,$s1,gcNextPointerInObject
3437##...sltu $at,$t0,$s1
3441##...bne $at,$zero,3280

3444:  gcTestIterDone2:
3444#    bltu $t0,$s3,gcHeapCopyLoop
3445##...sltu $at,$t0,$s3
3449##...bne $at,$zero,3164

    ###### end outer loop to copy all non-stack-direct objects ######

3452:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
3452#    lw $s2,($sp)
3456#    addu $sp,$sp,4

    # mark us as having already GC'd
3460#    move $t5,$s5

    # go try and allocate again
3464#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
3468:vm_init:

    # mark bottom of stack
3468#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
3472#    move $s2,$zero

    #set up the "five" register
3476#    li $s5,5

3480#    la $s3,seg0_start
3484#    la $s4,seg0_end
3485##...lui $s4,16
3489##...addiu $s4,$s4,4384
    
    # return
3492#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3496:divide:
    # get parameters; abort if divisor zero
3496#    lw $t0,($sp)
3500#    lw $t1,8($sp)
3504#    beq $t0,$zero,divByZeroError
    
    # perform division
3508#    div $t1,$t0
3512#    mflo $t0

    # store result, adjust stack and return
3516#    addu $sp,$sp,8 # adjust stack
3520#    sw $t0,($sp) # store result
3524#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
3528:remainder:
    # get parameters; abort if divisor zero
3528#    lw $t0,($sp)
3532#    lw $t1,8($sp)
3536#    beq $t0,$zero,divByZeroError
    
    # perform division
3540#    div $t1,$t0
3544#    mfhi $t0

    # store result, adjust stack and return
3548#    addu $sp,$sp,8 # adjust stack
3552#    sw $t0,($sp) # store result
3556#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
3560:checkCast:
    # get object, allow immediately if null
3560#    lw $t2,($sp)
3564#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
3568#    lw $t2,-12($t2) # vtable address
3572#    bge $t2,$t1,castException
3573##...slt $at,$t2,$t1
3577##...beq $at,$zero,3748
3580#    blt $t2,$t0,castException
3581##...slt $at,$t2,$t0
3585##...bne $at,$zero,3748
    
    # return, leaving object unchanged on stack
3588:  checkCastReturn:    
3588#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
3592:instanceOf:
    # get object, go return false if null
3592#    lw $t2,($sp)
3596#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
3600#    lw $t2,-12($t2) # vtable address
3604#    sge $t0,$t2,$t0 # are we >= the lower limit?
3605##...slt $t0,$t2,$t0
3609##...xori $t0,$t0,0x1
3612#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
3616#    and $t2,$t0,$t1
3620#    sw $t2,($sp)
3624:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
3624#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

3628:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
3628#    li $v0,4 # syscall-code for print-string
3632#    syscall
3636:exit:
    # print termination message
3636#    li $v0,4 # syscall-code for print-string
3640#    la $a0,exitString
3644#    syscall

    # print number of garbage collections
3648#    li $v0,4 # syscall-code for print-string
3652#    la $a0,gcCountMsg
3656#    syscall # print "Number of ..."
3660#    lw $a0,gcCount # number of GC's
3664#    li $v0,1 # code for print-int
3668#    syscall
3672#    li $v0,4 # syscall-code for print-string
3676#    la $a0,newlineString
3680#    syscall # print newline

    # terminate execution
3684#    li $v0,10 #syscall-code for "exit"
3688#    syscall

3692:outOfHeapMemory:
3692#    la $a0,heapMemoryMsg
3696#    j exitError
3700:divByZeroError:
3700#    la $a0,divByZeroMsg
3704#    j exitError
3708:strIndexOutOfBounds:
3708#    la $a0,strIndexOutOfBoundsMsg
3712#    j exitError
3716:arrayIndexOutOfBounds:
3716#    la $a0,arrayIndexOutOfBoundsMsg
3720#    j exitError
3724:arraySizeOutOfBounds:
3724#    la $a0,arraySizeOutOfBoundsMsg
3728#    j exitError
3732:nullPtrException:
3732#    la $a0,nullPtrExceptionMsg
3736#    j exitError
3740:badIntegerFormat:
3740#    la $a0,badIntegerFormatMsg
3744#    j exitError
3748:castException:
3748#    la $a0,castExceptionMsg
3752#    j exitError
############## data section ################
    .data
4012:hexChars:
    .ascii "0123456789abcdef"
    .align 2
4028:cur_seg:
    .word 0

4032:lastCharRead:
    .word -2 # -2 => no buffered character
4036:prevHashConstant:
    .word 0x2785173c
4040:gcCount:
    .word 0

4044:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
4071:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
4094:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
4129:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
4163:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
4196:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
4227:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
4275:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
4296:gcMsg: 
      .asciiz "\nGC!\n"
4302:gcCountMsg: 
      .asciiz "Number of garbage collections: "

4334:nullStr:
    .asciiz "null"
4339:trueString:
    .asciiz "true"
4344:falseString:
    .asciiz "false"
4350:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
4378:newlineString:
    .asciiz "\n"
    
    .align 2
4380:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

4384:seg0_start:
    .space 0x100000
1052960:seg0_end:
1052960:seg1_start:
    .space 0x100000
2101536:seg1_end:
