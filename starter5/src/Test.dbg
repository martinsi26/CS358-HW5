 .data # Program at 8.1
# ****** class Object ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 207 # 'O' with high bit set # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
  .byte 106 # 'j' # ClassDecl at 0.0
  .byte 101 # 'e' # ClassDecl at 0.0
  .byte 99 # 'c' # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
18372:CLASS_Object: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
# ****** class String ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 211 # 'S' with high bit set # ClassDecl at 0.0
  .byte 116 # 't' # ClassDecl at 0.0
  .byte 114 # 'r' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 103 # 'g' # ClassDecl at 0.0
18392:CLASS_String: # ClassDecl at 0.0
  .word mth_String_hashCode # MethodDeclNonVoid at 0.0
  .word mth_String_equals # MethodDeclNonVoid at 0.0
  .word mth_String_toString # MethodDeclNonVoid at 0.0
  .word mth_String_concat # MethodDeclNonVoid at 0.0
  .word mth_String_substring # MethodDeclNonVoid at 0.0
  .word mth_String_length # MethodDeclNonVoid at 0.0
  .word mth_String_charAt # MethodDeclNonVoid at 0.0
  .word mth_String_compareTo # MethodDeclNonVoid at 0.0
18424:END_CLASS_String: # ClassDecl at 0.0
# ****** class Lib ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 204 # 'L' with high bit set # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 98 # 'b' # ClassDecl at 0.0
18428:CLASS_Lib: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
# ****** class Main ****** # ClassDecl at 8.7
  .byte 205 # 'M' with high bit set # ClassDecl at 8.7
  .byte 97 # 'a' # ClassDecl at 8.7
  .byte 105 # 'i' # ClassDecl at 8.7
  .byte 110 # 'n' # ClassDecl at 8.7
18476:CLASS_Main: # ClassDecl at 8.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_Lib_readLine # MethodDeclNonVoid at 0.0
  .word mth_Lib_readInt # MethodDeclNonVoid at 0.0
  .word mth_Lib_readChar # MethodDeclNonVoid at 0.0
  .word mth_Lib_printStr # MethodDeclVoid at 0.0
  .word mth_Lib_printBool # MethodDeclVoid at 0.0
  .word mth_Lib_printInt # MethodDeclVoid at 0.0
  .word mth_Lib_intToString # MethodDeclNonVoid at 0.0
  .word mth_Lib_intToChar # MethodDeclNonVoid at 0.0
  .word mth_Main_main # MethodDeclVoid at 11.17
18524:END_CLASS_Main: # ClassDecl at 8.7
18524:END_CLASS_Lib: # ClassDecl at 0.0
# ****** class RunMain ****** # ClassDecl at 0.0
  .byte 0 # ClassDecl at 0.0
  .byte 210 # 'R' with high bit set # ClassDecl at 0.0
  .byte 117 # 'u' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
  .byte 77 # 'M' # ClassDecl at 0.0
  .byte 97 # 'a' # ClassDecl at 0.0
  .byte 105 # 'i' # ClassDecl at 0.0
  .byte 110 # 'n' # ClassDecl at 0.0
18532:CLASS_RunMain: # ClassDecl at 0.0
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
18544:END_CLASS_RunMain: # ClassDecl at 0.0
# ****** class RedBlackTree ****** # ClassDecl at 43.7
  .byte 210 # 'R' with high bit set # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
  .byte 100 # 'd' # ClassDecl at 43.7
  .byte 66 # 'B' # ClassDecl at 43.7
  .byte 108 # 'l' # ClassDecl at 43.7
  .byte 97 # 'a' # ClassDecl at 43.7
  .byte 99 # 'c' # ClassDecl at 43.7
  .byte 107 # 'k' # ClassDecl at 43.7
  .byte 84 # 'T' # ClassDecl at 43.7
  .byte 114 # 'r' # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
  .byte 101 # 'e' # ClassDecl at 43.7
18556:CLASS_RedBlackTree: # ClassDecl at 43.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_RedBlackTree_isNull # MethodDeclNonVoid at 46.20
  .word mth_RedBlackTree_isBlack # MethodDeclNonVoid at 51.20
  .word mth_RedBlackTree_setBlack # MethodDeclVoid at 56.17
  .word mth_RedBlackTree_isRed # MethodDeclNonVoid at 60.20
  .word mth_RedBlackTree_helpInsert # MethodDeclNonVoid at 65.25
  .word mth_RedBlackTree_insert # MethodDeclNonVoid at 70.25
  .word mth_RedBlackTree_asNonNull # MethodDeclNonVoid at 79.32
  .word mth_RedBlackTree_print # MethodDeclVoid at 84.17
  .word mth_RedBlackTree_helpPrint # MethodDeclVoid at 90.17
  .word mth_RedBlackTree_lookup # MethodDeclNonVoid at 94.20
  .word mth_RedBlackTree_delete # MethodDeclNonVoid at 99.25
  .word mth_RedBlackTree_helpDelete # MethodDeclNonVoid at 106.25
# ****** class NullRedBlackTree ****** # ClassDecl at 112.7
  .byte 206 # 'N' with high bit set # ClassDecl at 112.7
  .byte 117 # 'u' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 82 # 'R' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
  .byte 100 # 'd' # ClassDecl at 112.7
  .byte 66 # 'B' # ClassDecl at 112.7
  .byte 108 # 'l' # ClassDecl at 112.7
  .byte 97 # 'a' # ClassDecl at 112.7
  .byte 99 # 'c' # ClassDecl at 112.7
  .byte 107 # 'k' # ClassDecl at 112.7
  .byte 84 # 'T' # ClassDecl at 112.7
  .byte 114 # 'r' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
  .byte 101 # 'e' # ClassDecl at 112.7
18632:CLASS_NullRedBlackTree: # ClassDecl at 112.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_NullRedBlackTree_isNull # MethodDeclNonVoid at 115.20
  .word mth_RedBlackTree_isBlack # MethodDeclNonVoid at 51.20
  .word mth_RedBlackTree_setBlack # MethodDeclVoid at 56.17
  .word mth_RedBlackTree_isRed # MethodDeclNonVoid at 60.20
  .word mth_NullRedBlackTree_helpInsert # MethodDeclNonVoid at 120.25
  .word mth_RedBlackTree_insert # MethodDeclNonVoid at 70.25
  .word mth_RedBlackTree_asNonNull # MethodDeclNonVoid at 79.32
  .word mth_RedBlackTree_print # MethodDeclVoid at 84.17
  .word mth_RedBlackTree_helpPrint # MethodDeclVoid at 90.17
  .word mth_RedBlackTree_lookup # MethodDeclNonVoid at 94.20
  .word mth_RedBlackTree_delete # MethodDeclNonVoid at 99.25
  .word mth_RedBlackTree_helpDelete # MethodDeclNonVoid at 106.25
18692:END_CLASS_NullRedBlackTree: # ClassDecl at 112.7
# ****** class NonNullRedBlackTree ****** # ClassDecl at 125.7
  .byte 0 # ClassDecl at 125.7
  .byte 206 # 'N' with high bit set # ClassDecl at 125.7
  .byte 111 # 'o' # ClassDecl at 125.7
  .byte 110 # 'n' # ClassDecl at 125.7
  .byte 78 # 'N' # ClassDecl at 125.7
  .byte 117 # 'u' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 82 # 'R' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
  .byte 100 # 'd' # ClassDecl at 125.7
  .byte 66 # 'B' # ClassDecl at 125.7
  .byte 108 # 'l' # ClassDecl at 125.7
  .byte 97 # 'a' # ClassDecl at 125.7
  .byte 99 # 'c' # ClassDecl at 125.7
  .byte 107 # 'k' # ClassDecl at 125.7
  .byte 84 # 'T' # ClassDecl at 125.7
  .byte 114 # 'r' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
  .byte 101 # 'e' # ClassDecl at 125.7
18712:CLASS_NonNullRedBlackTree: # ClassDecl at 125.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_RedBlackTree_isNull # MethodDeclNonVoid at 46.20
  .word mth_NonNullRedBlackTree_isBlack # MethodDeclNonVoid at 134.20
  .word mth_NonNullRedBlackTree_setBlack # MethodDeclVoid at 139.17
  .word mth_RedBlackTree_isRed # MethodDeclNonVoid at 60.20
  .word mth_NonNullRedBlackTree_helpInsert # MethodDeclNonVoid at 159.25
  .word mth_RedBlackTree_insert # MethodDeclNonVoid at 70.25
  .word mth_NonNullRedBlackTree_asNonNull # MethodDeclNonVoid at 374.32
  .word mth_RedBlackTree_print # MethodDeclVoid at 84.17
  .word mth_NonNullRedBlackTree_helpPrint # MethodDeclVoid at 460.17
  .word mth_NonNullRedBlackTree_lookup # MethodDeclNonVoid at 181.20
  .word mth_RedBlackTree_delete # MethodDeclNonVoid at 99.25
  .word mth_NonNullRedBlackTree_helpDelete # MethodDeclNonVoid at 195.25
  .word mth_NonNullRedBlackTree_setRed # MethodDeclVoid at 144.17
  .word mth_NonNullRedBlackTree_init # MethodDeclNonVoid at 149.32
  .word mth_NonNullRedBlackTree_adjustAfterDelete # MethodDeclNonVoid at 259.32
  .word mth_NonNullRedBlackTree_getRight # MethodDeclNonVoid at 379.25
  .word mth_NonNullRedBlackTree_getLeft # MethodDeclNonVoid at 388.25
  .word mth_NonNullRedBlackTree_setRight # MethodDeclVoid at 393.17
  .word mth_NonNullRedBlackTree_setLeft # MethodDeclVoid at 403.17
  .word mth_NonNullRedBlackTree_rebalanceAfterInsert # MethodDeclNonVoid at 410.25
  .word mth_NonNullRedBlackTree_helpPrintIndent # MethodDeclVoid at 483.17
18808:END_CLASS_NonNullRedBlackTree: # ClassDecl at 125.7
18808:END_CLASS_RedBlackTree: # ClassDecl at 43.7
# ****** class BooleanList ****** # ClassDecl at 501.7
  .byte 0 # ClassDecl at 501.7
  .byte 194 # 'B' with high bit set # ClassDecl at 501.7
  .byte 111 # 'o' # ClassDecl at 501.7
  .byte 111 # 'o' # ClassDecl at 501.7
  .byte 108 # 'l' # ClassDecl at 501.7
  .byte 101 # 'e' # ClassDecl at 501.7
  .byte 97 # 'a' # ClassDecl at 501.7
  .byte 110 # 'n' # ClassDecl at 501.7
  .byte 76 # 'L' # ClassDecl at 501.7
  .byte 105 # 'i' # ClassDecl at 501.7
  .byte 115 # 's' # ClassDecl at 501.7
  .byte 116 # 't' # ClassDecl at 501.7
18820:CLASS_BooleanList: # ClassDecl at 501.7
  .word mth_Object_hashCode # MethodDeclNonVoid at 0.0
  .word mth_Object_equals # MethodDeclNonVoid at 0.0
  .word mth_Object_toString # MethodDeclNonVoid at 0.0
  .word mth_BooleanList_init # MethodDeclNonVoid at 505.24
18836:END_CLASS_BooleanList: # ClassDecl at 501.7
18836:dataArrayVTableStart: # IntegerType at 0.0
  .byte 0 # ArrayType at 100.26
  .byte 0 # ArrayType at 100.26
  .byte 219 # '[' with high bit set # ArrayType at 100.26
  .byte 90 # 'Z' # ArrayType at 100.26
18840:CLASS_ARRAY_BOOLEAN: # ArrayType at 100.26
  .word mth_Object_hashCode # ArrayType at 100.26
  .word mth_Object_equals # ArrayType at 100.26
  .word mth_Object_toString # ArrayType at 100.26
18852:END_CLASS_ARRAY_BOOLEAN: # ArrayType at 100.26
18852:END_CLASS_Object: # ClassDecl at 0.0
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 61 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 105 # StringLiteral at 20.15
  .byte 110 # StringLiteral at 20.15
  .byte 115 # StringLiteral at 20.15
  .byte 101 # StringLiteral at 20.15
  .byte 114 # StringLiteral at 20.15
  .byte 116 # StringLiteral at 20.15
  .byte 32 # StringLiteral at 20.15
  .byte 0 # StringLiteral at 20.15
  .byte 0 # StringLiteral at 20.15
  .word CLASS_String # StringLiteral at 20.15
  .word 6 # StringLiteral at 20.15
  .word -18 # StringLiteral at 20.15
18884:strLit_21: # StringLiteral at 20.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 61 # StringLiteral at 22.15
  .byte 10 # StringLiteral at 22.15
  .word CLASS_String # StringLiteral at 22.15
  .word 4 # StringLiteral at 22.15
  .word -12 # StringLiteral at 22.15
18908:strLit_29: # StringLiteral at 22.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 100 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 108 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 116 # StringLiteral at 29.15
  .byte 101 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 114 # StringLiteral at 29.15
  .byte 111 # StringLiteral at 29.15
  .byte 111 # StringLiteral at 29.15
  .byte 116 # StringLiteral at 29.15
  .byte 32 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 61 # StringLiteral at 29.15
  .byte 10 # StringLiteral at 29.15
  .byte 0 # StringLiteral at 29.15
  .word CLASS_String # StringLiteral at 29.15
  .word 10 # StringLiteral at 29.15
  .word -35 # StringLiteral at 29.15
18956:strLit_57: # StringLiteral at 29.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 61 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 97 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 109 # StringLiteral at 32.15
  .byte 112 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 111 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 100 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 108 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 116 # StringLiteral at 32.15
  .byte 101 # StringLiteral at 32.15
  .byte 32 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .byte 0 # StringLiteral at 32.15
  .word CLASS_String # StringLiteral at 32.15
  .word 9 # StringLiteral at 32.15
  .word -29 # StringLiteral at 32.15
19000:strLit_71: # StringLiteral at 32.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 61 # StringLiteral at 34.15
  .byte 10 # StringLiteral at 34.15
  .word CLASS_String # StringLiteral at 34.15
  .word 4 # StringLiteral at 34.15
  .word -12 # StringLiteral at 34.15
19024:strLit_79: # StringLiteral at 34.15
  .byte 45 # StringLiteral at 464.19
  .byte 45 # StringLiteral at 464.19
  .byte 45 # StringLiteral at 464.19
  .byte 0 # StringLiteral at 464.19
  .word CLASS_String # StringLiteral at 464.19
  .word 2 # StringLiteral at 464.19
  .word -3 # StringLiteral at 464.19
19040:strLit_933: # StringLiteral at 464.19
  .byte 32 # StringLiteral at 467.19
  .byte 47 # StringLiteral at 467.19
  .byte 45 # StringLiteral at 467.19
  .byte 0 # StringLiteral at 467.19
  .word CLASS_String # StringLiteral at 467.19
  .word 2 # StringLiteral at 467.19
  .word -3 # StringLiteral at 467.19
19056:strLit_940: # StringLiteral at 467.19
  .byte 32 # StringLiteral at 470.19
  .byte 92 # StringLiteral at 470.19
  .byte 45 # StringLiteral at 470.19
  .byte 0 # StringLiteral at 470.19
  .word CLASS_String # StringLiteral at 470.19
  .word 2 # StringLiteral at 470.19
  .word -3 # StringLiteral at 470.19
19072:strLit_945: # StringLiteral at 470.19
  .byte 35 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .byte 0 # StringLiteral at 473.19
  .word CLASS_String # StringLiteral at 473.19
  .word 2 # StringLiteral at 473.19
  .word -1 # StringLiteral at 473.19
19088:strLit_954: # StringLiteral at 473.19
  .byte 42 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .byte 0 # StringLiteral at 476.19
  .word CLASS_String # StringLiteral at 476.19
  .word 2 # StringLiteral at 476.19
  .word -1 # StringLiteral at 476.19
19104:strLit_959: # StringLiteral at 476.19
  .byte 10 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .byte 0 # StringLiteral at 479.15
  .word CLASS_String # StringLiteral at 479.15
  .word 2 # StringLiteral at 479.15
  .word -1 # StringLiteral at 479.15
19120:strLit_969: # StringLiteral at 479.15
  .byte 32 # StringLiteral at 488.20
  .byte 32 # StringLiteral at 488.20
  .byte 32 # StringLiteral at 488.20
  .byte 0 # StringLiteral at 488.20
  .word CLASS_String # StringLiteral at 488.20
  .word 2 # StringLiteral at 488.20
  .word -3 # StringLiteral at 488.20
19136:strLit_1008: # StringLiteral at 488.20
  .byte 124 # StringLiteral at 491.20
  .byte 32 # StringLiteral at 491.20
  .byte 32 # StringLiteral at 491.20
  .byte 0 # StringLiteral at 491.20
  .word CLASS_String # StringLiteral at 491.20
  .word 2 # StringLiteral at 491.20
  .word -3 # StringLiteral at 491.20
19152:strLit_1013: # StringLiteral at 491.20
  .byte 32 # StringLiteral at 495.16
  .byte 32 # StringLiteral at 495.16
  .byte 32 # StringLiteral at 495.16
  .byte 0 # StringLiteral at 495.16
  .word CLASS_String # StringLiteral at 495.16
  .word 2 # StringLiteral at 495.16
  .word -3 # StringLiteral at 495.16
19168:strLit_1020: # StringLiteral at 495.16
.text
.globl main
0:main:
0#    jal vm_init
# begin: CallStatement at 0.0; stackHeight = 0
# begin: Call at 0.0; stackHeight = 0
# begin: NewObject at 0.0; stackHeight = 0
4#    li $s6, 1
8#    li $s7, 0
12#    jal newObject
16#    la $t0, CLASS_Main
20#    sw $t0, -12($s7)
# end: NewObject at 0.0; stackHeight = 4
24#    lw $t0, 0($sp)
28#    sw $s2, 0($sp)
32#    move $s2, $t0
36#    beq $s2, $zero, nullPtrException
40#    lw $t0, -12($s2)
44#    lw $t0, 44($t0)
48#    jalr $t0 # main
52#    addu $sp, $sp, 0
56#    lw $s2, ($sp)
60#    addu $sp, $sp, 4
64#    subu $sp, $sp, 4
68#    sw $t0, ($sp)
# end: Call at 0.0; stackHeight = 4
72#    lw $t0, ($sp)
76#    addu $sp, $sp, 4
# end: CallStatement at 0.0; stackHeight = 0
80#    li $v0, 10
84#    syscall
.globl mth_Main_main
88:mth_Main_main:
88#    subu $sp, $sp, 4
92#    sw $ra, ($sp)
# begin: LocalVarDecl at 13.15; stackHeight = 0
# begin: NewObject at 13.22; stackHeight = 0
96#    li $s6, 1
100#    li $s7, 0
104#    jal newObject
108#    la $t0, CLASS_NullRedBlackTree
112#    sw $t0, -12($s7)
# end: NewObject at 13.22; stackHeight = 4
116#"root"    lw $zero, ($sp) #**"root"
# end: LocalVarDecl at 13.15; stackHeight = 4
# begin: LocalVarDecl at 16.6; stackHeight = 4
# begin: IntegerLiteral at 16.20; stackHeight = 4
120#    li $t0, 20
124#    subu $sp, $sp, 8
128#    sw $s5, 4($sp)
132#    sw $t0, ($sp)
# end: IntegerLiteral at 16.20; stackHeight = 12
136#"numElements"    lw $zero, ($sp) #**"numElements"
# end: LocalVarDecl at 16.6; stackHeight = 12
# begin: Block at 19.2; stackHeight = 12
# begin: LocalVarDecl at 19.11; stackHeight = 12
# begin: IntegerLiteral at 19.15; stackHeight = 12
140#    li $t0, 0
144#    subu $sp, $sp, 8
148#    sw $s5, 4($sp)
152#    sw $t0, ($sp)
# end: IntegerLiteral at 19.15; stackHeight = 20
156#"i"    lw $zero, ($sp) #**"i"
# end: LocalVarDecl at 19.11; stackHeight = 20
# begin: BreakTarget at 19.2; stackHeight = 20
160#    j while_cond_43
164:  while_top_43:
# begin: Block at 19.2; stackHeight = 20
# begin: Block at 19.40; stackHeight = 20
# begin: CallStatement at 20.6; stackHeight = 20
# begin: Call at 20.6; stackHeight = 20
# begin: This at 20.6; stackHeight = 20
164#    subu $sp, $sp, 4
168#    sw $s2, ($sp)
# end: This at 20.6; stackHeight = 24
# begin: StringLiteral at 20.15; stackHeight = 24
172#    la $t0, strLit_21
176#    subu $sp, $sp, 4
180#    sw $t0, ($sp)
# end: StringLiteral at 20.15; stackHeight = 28
184#    lw $t0, 4($sp)
188#    sw $s2, 4($sp)
192#    move $s2, $t0
196#    beq $s2, $zero, nullPtrException
200#    lw $t0, -12($s2)
204#    lw $t0, 24($t0)
208#    jalr $t0 # printStr
212#    addu $sp, $sp, 4
216#    lw $s2, ($sp)
220#    addu $sp, $sp, 4
224#    subu $sp, $sp, 4
228#    sw $t0, ($sp)
# end: Call at 20.6; stackHeight = 24
232#    lw $t0, ($sp)
236#    addu $sp, $sp, 4
# end: CallStatement at 20.6; stackHeight = 20
# begin: CallStatement at 21.6; stackHeight = 20
# begin: Call at 21.6; stackHeight = 20
# begin: This at 21.6; stackHeight = 20
240#    subu $sp, $sp, 4
244#    sw $s2, ($sp)
# end: This at 21.6; stackHeight = 24
# begin: IdentifierExp at 21.15; stackHeight = 24
248#    lw $t0, 4($sp)
252#    subu $sp, $sp, 8
256#    sw $s5, 4($sp)
260#    sw $t0, ($sp)
# end: IdentifierExp at 21.15; stackHeight = 32
264#    lw $t0, 8($sp)
268#    sw $s2, 8($sp)
272#    move $s2, $t0
276#    beq $s2, $zero, nullPtrException
280#    lw $t0, -12($s2)
284#    lw $t0, 32($t0)
288#    jalr $t0 # printInt
292#    addu $sp, $sp, 8
296#    lw $s2, ($sp)
300#    addu $sp, $sp, 4
304#    subu $sp, $sp, 4
308#    sw $t0, ($sp)
# end: Call at 21.6; stackHeight = 24
312#    lw $t0, ($sp)
316#    addu $sp, $sp, 4
# end: CallStatement at 21.6; stackHeight = 20
# begin: CallStatement at 22.6; stackHeight = 20
# begin: Call at 22.6; stackHeight = 20
# begin: This at 22.6; stackHeight = 20
320#    subu $sp, $sp, 4
324#    sw $s2, ($sp)
# end: This at 22.6; stackHeight = 24
# begin: StringLiteral at 22.15; stackHeight = 24
328#    la $t0, strLit_29
332#    subu $sp, $sp, 4
336#    sw $t0, ($sp)
# end: StringLiteral at 22.15; stackHeight = 28
340#    lw $t0, 4($sp)
344#    sw $s2, 4($sp)
348#    move $s2, $t0
352#    beq $s2, $zero, nullPtrException
356#    lw $t0, -12($s2)
360#    lw $t0, 24($t0)
364#    jalr $t0 # printStr
368#    addu $sp, $sp, 4
372#    lw $s2, ($sp)
376#    addu $sp, $sp, 4
380#    subu $sp, $sp, 4
384#    sw $t0, ($sp)
# end: Call at 22.6; stackHeight = 24
388#    lw $t0, ($sp)
392#    addu $sp, $sp, 4
# end: CallStatement at 22.6; stackHeight = 20
# begin: Assign at 23.11; stackHeight = 20
# begin: Call at 23.18; stackHeight = 20
# begin: IdentifierExp at 23.13; stackHeight = 20
396#    lw $t0, 16($sp)
400#    subu $sp, $sp, 4
404#    sw $t0, ($sp)
# end: IdentifierExp at 23.13; stackHeight = 24
# begin: IdentifierExp at 23.25; stackHeight = 24
408#    lw $t0, 4($sp)
412#    subu $sp, $sp, 8
416#    sw $s5, 4($sp)
420#    sw $t0, ($sp)
# end: IdentifierExp at 23.25; stackHeight = 32
424#    lw $t0, 8($sp)
428#    sw $s2, 8($sp)
432#    move $s2, $t0
436#    beq $s2, $zero, nullPtrException
440#    lw $t0, -12($s2)
444#    lw $t0, 32($t0)
448#    jalr $t0 # insert
452#    addu $sp, $sp, 8
456#    lw $s2, ($sp)
460#    addu $sp, $sp, 4
464#    subu $sp, $sp, 4
468#    sw $t0, ($sp)
# end: Call at 23.18; stackHeight = 24
472#    lw $t0, ($sp)
476#    addu $sp, $sp, 4
480#    sw $t0, 16($sp)
# end: Assign at 23.11; stackHeight = 20
# begin: CallStatement at 24.11; stackHeight = 20
# begin: Call at 24.11; stackHeight = 20
# begin: IdentifierExp at 24.6; stackHeight = 20
484#    lw $t0, 16($sp)
488#    subu $sp, $sp, 4
492#    sw $t0, ($sp)
# end: IdentifierExp at 24.6; stackHeight = 24
496#    lw $t0, 0($sp)
500#    sw $s2, 0($sp)
504#    move $s2, $t0
508#    beq $s2, $zero, nullPtrException
512#    lw $t0, -12($s2)
516#    lw $t0, 40($t0)
520#    jalr $t0 # print
524#    addu $sp, $sp, 0
528#    lw $s2, ($sp)
532#    addu $sp, $sp, 4
536#    subu $sp, $sp, 4
540#    sw $t0, ($sp)
# end: Call at 24.11; stackHeight = 24
544#    lw $t0, ($sp)
548#    addu $sp, $sp, 4
# end: CallStatement at 24.11; stackHeight = 20
# end: Block at 19.40; stackHeight = 20
# begin: Assign at 19.35; stackHeight = 20
# begin: Plus at 19.36; stackHeight = 20
# begin: IdentifierExp at 19.35; stackHeight = 20
552#    lw $t0, 0($sp)
556#    subu $sp, $sp, 8
560#    sw $s5, 4($sp)
564#    sw $t0, ($sp)
# end: IdentifierExp at 19.35; stackHeight = 28
# begin: IntegerLiteral at 19.36; stackHeight = 28
568#    li $t0, 1
572#    subu $sp, $sp, 8
576#    sw $s5, 4($sp)
580#    sw $t0, ($sp)
# end: IntegerLiteral at 19.36; stackHeight = 36
584#    lw $t2, ($sp)
588#    addu $sp, $sp, 8
592#    lw $t1, ($sp)
596#    addu $sp, $sp, 8
600#    addu $t0, $t1, $t2
604#    subu $sp, $sp, 8
608#    sw $s5, 4($sp)
612#    sw $t0, ($sp)
# end: Plus at 19.36; stackHeight = 28
616#    lw $t0, ($sp)
620#    addu $sp, $sp, 8
624#    sw $t0, 0($sp)
# end: Assign at 19.35; stackHeight = 20
# end: Block at 19.2; stackHeight = 20
628:  while_cond_43:
# begin: LessThan at 19.20; stackHeight = 20
# begin: IdentifierExp at 19.18; stackHeight = 20
628#    lw $t0, 0($sp)
632#    subu $sp, $sp, 8
636#    sw $s5, 4($sp)
640#    sw $t0, ($sp)
# end: IdentifierExp at 19.18; stackHeight = 28
# begin: IdentifierExp at 19.22; stackHeight = 28
644#    lw $t0, 16($sp)
648#    subu $sp, $sp, 8
652#    sw $s5, 4($sp)
656#    sw $t0, ($sp)
# end: IdentifierExp at 19.22; stackHeight = 36
660#    lw $t2, ($sp)
664#    addu $sp, $sp, 8
668#    lw $t1, ($sp)
672#    addu $sp, $sp, 8
676#    slt $t0, $t1, $t2
680#    subu $sp, $sp, 4
684#    sw $t0, ($sp)
# end: LessThan at 19.20; stackHeight = 24
688#    lw $t0, ($sp)
692#    addu $sp, $sp, 4
696#    bne $t0, $zero, while_top_43
700:  break_target_43:
# end: BreakTarget at 19.2; stackHeight = 20
700#    addu $sp, $sp, 8
# end: Block at 19.2; stackHeight = 12
# begin: Block at 28.2; stackHeight = 12
# begin: LocalVarDecl at 28.11; stackHeight = 12
# begin: IntegerLiteral at 28.15; stackHeight = 12
704#    li $t0, 0
708#    subu $sp, $sp, 8
712#    sw $s5, 4($sp)
716#    sw $t0, ($sp)
# end: IntegerLiteral at 28.15; stackHeight = 20
720#"i"    lw $zero, ($sp) #**"i"
# end: LocalVarDecl at 28.11; stackHeight = 20
# begin: BreakTarget at 28.2; stackHeight = 20
724#    j while_cond_93
728:  while_top_93:
# begin: Block at 28.2; stackHeight = 20
# begin: Block at 28.39; stackHeight = 20
# begin: CallStatement at 29.6; stackHeight = 20
# begin: Call at 29.6; stackHeight = 20
# begin: This at 29.6; stackHeight = 20
728#    subu $sp, $sp, 4
732#    sw $s2, ($sp)
# end: This at 29.6; stackHeight = 24
# begin: StringLiteral at 29.15; stackHeight = 24
736#    la $t0, strLit_57
740#    subu $sp, $sp, 4
744#    sw $t0, ($sp)
# end: StringLiteral at 29.15; stackHeight = 28
748#    lw $t0, 4($sp)
752#    sw $s2, 4($sp)
756#    move $s2, $t0
760#    beq $s2, $zero, nullPtrException
764#    lw $t0, -12($s2)
768#    lw $t0, 24($t0)
772#    jalr $t0 # printStr
776#    addu $sp, $sp, 4
780#    lw $s2, ($sp)
784#    addu $sp, $sp, 4
788#    subu $sp, $sp, 4
792#    sw $t0, ($sp)
# end: Call at 29.6; stackHeight = 24
796#    lw $t0, ($sp)
800#    addu $sp, $sp, 4
# end: CallStatement at 29.6; stackHeight = 20
# begin: Assign at 30.11; stackHeight = 20
# begin: Call at 30.18; stackHeight = 20
# begin: IdentifierExp at 30.13; stackHeight = 20
804#    lw $t0, 16($sp)
808#    subu $sp, $sp, 4
812#    sw $t0, ($sp)
# end: IdentifierExp at 30.13; stackHeight = 24
# begin: InstVarAccess at 30.41; stackHeight = 24
# begin: Call at 30.30; stackHeight = 24
# begin: IdentifierExp at 30.25; stackHeight = 24
816#    lw $t0, 20($sp)
820#    subu $sp, $sp, 4
824#    sw $t0, ($sp)
# end: IdentifierExp at 30.25; stackHeight = 28
828#    lw $t0, 0($sp)
832#    sw $s2, 0($sp)
836#    move $s2, $t0
840#    beq $s2, $zero, nullPtrException
844#    lw $t0, -12($s2)
848#    lw $t0, 36($t0)
852#    jalr $t0 # asNonNull
856#    addu $sp, $sp, 0
860#    lw $s2, ($sp)
864#    addu $sp, $sp, 4
868#    subu $sp, $sp, 4
872#    sw $t0, ($sp)
# end: Call at 30.30; stackHeight = 28
876#    lw $t0, ($sp)
880#    addu $sp, $sp, 4
884#    beq $t0, $zero, nullPtrException
888#    lw $t0, -64($t0)
892#    subu $sp, $sp, 8
896#    sw $s5, 4($sp)
900#    sw $t0, ($sp)
# end: InstVarAccess at 30.41; stackHeight = 32
904#    lw $t0, 8($sp)
908#    sw $s2, 8($sp)
912#    move $s2, $t0
916#    beq $s2, $zero, nullPtrException
920#    lw $t0, -12($s2)
924#    lw $t0, 52($t0)
928#    jalr $t0 # delete
932#    addu $sp, $sp, 8
936#    lw $s2, ($sp)
940#    addu $sp, $sp, 4
944#    subu $sp, $sp, 4
948#    sw $t0, ($sp)
# end: Call at 30.18; stackHeight = 24
952#    lw $t0, ($sp)
956#    addu $sp, $sp, 4
960#    sw $t0, 16($sp)
# end: Assign at 30.11; stackHeight = 20
# begin: CallStatement at 31.11; stackHeight = 20
# begin: Call at 31.11; stackHeight = 20
# begin: IdentifierExp at 31.6; stackHeight = 20
964#    lw $t0, 16($sp)
968#    subu $sp, $sp, 4
972#    sw $t0, ($sp)
# end: IdentifierExp at 31.6; stackHeight = 24
976#    lw $t0, 0($sp)
980#    sw $s2, 0($sp)
984#    move $s2, $t0
988#    beq $s2, $zero, nullPtrException
992#    lw $t0, -12($s2)
996#    lw $t0, 40($t0)
1000#    jalr $t0 # print
1004#    addu $sp, $sp, 0
1008#    lw $s2, ($sp)
1012#    addu $sp, $sp, 4
1016#    subu $sp, $sp, 4
1020#    sw $t0, ($sp)
# end: Call at 31.11; stackHeight = 24
1024#    lw $t0, ($sp)
1028#    addu $sp, $sp, 4
# end: CallStatement at 31.11; stackHeight = 20
# begin: CallStatement at 32.6; stackHeight = 20
# begin: Call at 32.6; stackHeight = 20
# begin: This at 32.6; stackHeight = 20
1032#    subu $sp, $sp, 4
1036#    sw $s2, ($sp)
# end: This at 32.6; stackHeight = 24
# begin: StringLiteral at 32.15; stackHeight = 24
1040#    la $t0, strLit_71
1044#    subu $sp, $sp, 4
1048#    sw $t0, ($sp)
# end: StringLiteral at 32.15; stackHeight = 28
1052#    lw $t0, 4($sp)
1056#    sw $s2, 4($sp)
1060#    move $s2, $t0
1064#    beq $s2, $zero, nullPtrException
1068#    lw $t0, -12($s2)
1072#    lw $t0, 24($t0)
1076#    jalr $t0 # printStr
1080#    addu $sp, $sp, 4
1084#    lw $s2, ($sp)
1088#    addu $sp, $sp, 4
1092#    subu $sp, $sp, 4
1096#    sw $t0, ($sp)
# end: Call at 32.6; stackHeight = 24
1100#    lw $t0, ($sp)
1104#    addu $sp, $sp, 4
# end: CallStatement at 32.6; stackHeight = 20
# begin: CallStatement at 33.6; stackHeight = 20
# begin: Call at 33.6; stackHeight = 20
# begin: This at 33.6; stackHeight = 20
1108#    subu $sp, $sp, 4
1112#    sw $s2, ($sp)
# end: This at 33.6; stackHeight = 24
# begin: IdentifierExp at 33.15; stackHeight = 24
1116#    lw $t0, 4($sp)
1120#    subu $sp, $sp, 8
1124#    sw $s5, 4($sp)
1128#    sw $t0, ($sp)
# end: IdentifierExp at 33.15; stackHeight = 32
1132#    lw $t0, 8($sp)
1136#    sw $s2, 8($sp)
1140#    move $s2, $t0
1144#    beq $s2, $zero, nullPtrException
1148#    lw $t0, -12($s2)
1152#    lw $t0, 32($t0)
1156#    jalr $t0 # printInt
1160#    addu $sp, $sp, 8
1164#    lw $s2, ($sp)
1168#    addu $sp, $sp, 4
1172#    subu $sp, $sp, 4
1176#    sw $t0, ($sp)
# end: Call at 33.6; stackHeight = 24
1180#    lw $t0, ($sp)
1184#    addu $sp, $sp, 4
# end: CallStatement at 33.6; stackHeight = 20
# begin: CallStatement at 34.6; stackHeight = 20
# begin: Call at 34.6; stackHeight = 20
# begin: This at 34.6; stackHeight = 20
1188#    subu $sp, $sp, 4
1192#    sw $s2, ($sp)
# end: This at 34.6; stackHeight = 24
# begin: StringLiteral at 34.15; stackHeight = 24
1196#    la $t0, strLit_79
1200#    subu $sp, $sp, 4
1204#    sw $t0, ($sp)
# end: StringLiteral at 34.15; stackHeight = 28
1208#    lw $t0, 4($sp)
1212#    sw $s2, 4($sp)
1216#    move $s2, $t0
1220#    beq $s2, $zero, nullPtrException
1224#    lw $t0, -12($s2)
1228#    lw $t0, 24($t0)
1232#    jalr $t0 # printStr
1236#    addu $sp, $sp, 4
1240#    lw $s2, ($sp)
1244#    addu $sp, $sp, 4
1248#    subu $sp, $sp, 4
1252#    sw $t0, ($sp)
# end: Call at 34.6; stackHeight = 24
1256#    lw $t0, ($sp)
1260#    addu $sp, $sp, 4
# end: CallStatement at 34.6; stackHeight = 20
# begin: Assign at 35.11; stackHeight = 20
# begin: Call at 35.18; stackHeight = 20
# begin: IdentifierExp at 35.13; stackHeight = 20
1264#    lw $t0, 16($sp)
1268#    subu $sp, $sp, 4
1272#    sw $t0, ($sp)
# end: IdentifierExp at 35.13; stackHeight = 24
# begin: IdentifierExp at 35.25; stackHeight = 24
1276#    lw $t0, 4($sp)
1280#    subu $sp, $sp, 8
1284#    sw $s5, 4($sp)
1288#    sw $t0, ($sp)
# end: IdentifierExp at 35.25; stackHeight = 32
1292#    lw $t0, 8($sp)
1296#    sw $s2, 8($sp)
1300#    move $s2, $t0
1304#    beq $s2, $zero, nullPtrException
1308#    lw $t0, -12($s2)
1312#    lw $t0, 52($t0)
1316#    jalr $t0 # delete
1320#    addu $sp, $sp, 8
1324#    lw $s2, ($sp)
1328#    addu $sp, $sp, 4
1332#    subu $sp, $sp, 4
1336#    sw $t0, ($sp)
# end: Call at 35.18; stackHeight = 24
1340#    lw $t0, ($sp)
1344#    addu $sp, $sp, 4
1348#    sw $t0, 16($sp)
# end: Assign at 35.11; stackHeight = 20
# begin: CallStatement at 36.11; stackHeight = 20
# begin: Call at 36.11; stackHeight = 20
# begin: IdentifierExp at 36.6; stackHeight = 20
1352#    lw $t0, 16($sp)
1356#    subu $sp, $sp, 4
1360#    sw $t0, ($sp)
# end: IdentifierExp at 36.6; stackHeight = 24
1364#    lw $t0, 0($sp)
1368#    sw $s2, 0($sp)
1372#    move $s2, $t0
1376#    beq $s2, $zero, nullPtrException
1380#    lw $t0, -12($s2)
1384#    lw $t0, 40($t0)
1388#    jalr $t0 # print
1392#    addu $sp, $sp, 0
1396#    lw $s2, ($sp)
1400#    addu $sp, $sp, 4
1404#    subu $sp, $sp, 4
1408#    sw $t0, ($sp)
# end: Call at 36.11; stackHeight = 24
1412#    lw $t0, ($sp)
1416#    addu $sp, $sp, 4
# end: CallStatement at 36.11; stackHeight = 20
# end: Block at 28.39; stackHeight = 20
# begin: Assign at 28.34; stackHeight = 20
# begin: Plus at 28.35; stackHeight = 20
# begin: IdentifierExp at 28.34; stackHeight = 20
1420#    lw $t0, 0($sp)
1424#    subu $sp, $sp, 8
1428#    sw $s5, 4($sp)
1432#    sw $t0, ($sp)
# end: IdentifierExp at 28.34; stackHeight = 28
# begin: IntegerLiteral at 28.35; stackHeight = 28
1436#    li $t0, 1
1440#    subu $sp, $sp, 8
1444#    sw $s5, 4($sp)
1448#    sw $t0, ($sp)
# end: IntegerLiteral at 28.35; stackHeight = 36
1452#    lw $t2, ($sp)
1456#    addu $sp, $sp, 8
1460#    lw $t1, ($sp)
1464#    addu $sp, $sp, 8
1468#    addu $t0, $t1, $t2
1472#    subu $sp, $sp, 8
1476#    sw $s5, 4($sp)
1480#    sw $t0, ($sp)
# end: Plus at 28.35; stackHeight = 28
1484#    lw $t0, ($sp)
1488#    addu $sp, $sp, 8
1492#    sw $t0, 0($sp)
# end: Assign at 28.34; stackHeight = 20
# end: Block at 28.2; stackHeight = 20
1496:  while_cond_93:
# begin: Not at 28.18; stackHeight = 20
# begin: Call at 28.24; stackHeight = 20
# begin: IdentifierExp at 28.19; stackHeight = 20
1496#    lw $t0, 16($sp)
1500#    subu $sp, $sp, 4
1504#    sw $t0, ($sp)
# end: IdentifierExp at 28.19; stackHeight = 24
1508#    lw $t0, 0($sp)
1512#    sw $s2, 0($sp)
1516#    move $s2, $t0
1520#    beq $s2, $zero, nullPtrException
1524#    lw $t0, -12($s2)
1528#    lw $t0, 12($t0)
1532#    jalr $t0 # isNull
1536#    addu $sp, $sp, 0
1540#    lw $s2, ($sp)
1544#    addu $sp, $sp, 4
1548#    subu $sp, $sp, 4
1552#    sw $t0, ($sp)
# end: Call at 28.24; stackHeight = 24
1556#    lw $t0, ($sp)
1560#    xor $t0, $t0, 1
1564#    sw $t0, ($sp)
# end: Not at 28.18; stackHeight = 24
1568#    lw $t0, ($sp)
1572#    addu $sp, $sp, 4
1576#    bne $t0, $zero, while_top_93
1580:  break_target_93:
# end: BreakTarget at 28.2; stackHeight = 20
1580#    addu $sp, $sp, 8
# end: Block at 28.2; stackHeight = 12
1584#    addu $sp, $sp, 12
1588#    lw $ra, ($sp)
1592#    addu $sp, $sp, 4
1596#    jr $ra
.globl mth_RedBlackTree_isNull
1600:mth_RedBlackTree_isNull:
1600#    subu $sp, $sp, 4
1604#    sw $ra, ($sp)
# begin: False at 47.9; stackHeight = 0
1608#    subu $sp, $sp, 4
1612#    sw $zero, ($sp)
# end: False at 47.9; stackHeight = 4
1616#    lw $t0, ($sp)
1620#    addu $sp, $sp, 4
1624#    addu $sp, $sp, 0
1628#    lw $ra, ($sp)
1632#    addu $sp, $sp, 4
1636#    jr $ra
.globl mth_RedBlackTree_isBlack
1640:mth_RedBlackTree_isBlack:
1640#    subu $sp, $sp, 4
1644#    sw $ra, ($sp)
# begin: True at 52.9; stackHeight = 0
1648#    li $t0, 1
1652#    subu $sp, $sp, 4
1656#    sw $t0, ($sp)
# end: True at 52.9; stackHeight = 4
1660#    lw $t0, ($sp)
1664#    addu $sp, $sp, 4
1668#    addu $sp, $sp, 0
1672#    lw $ra, ($sp)
1676#    addu $sp, $sp, 4
1680#    jr $ra
.globl mth_RedBlackTree_setBlack
1684:mth_RedBlackTree_setBlack:
1684#    subu $sp, $sp, 4
1688#    sw $ra, ($sp)
1692#    addu $sp, $sp, 0
1696#    lw $ra, ($sp)
1700#    addu $sp, $sp, 4
1704#    jr $ra
.globl mth_RedBlackTree_isRed
1708:mth_RedBlackTree_isRed:
1708#    subu $sp, $sp, 4
1712#    sw $ra, ($sp)
# begin: Not at 61.9; stackHeight = 0
# begin: Call at 61.10; stackHeight = 0
# begin: This at 61.10; stackHeight = 0
1716#    subu $sp, $sp, 4
1720#    sw $s2, ($sp)
# end: This at 61.10; stackHeight = 4
1724#    lw $t0, 0($sp)
1728#    sw $s2, 0($sp)
1732#    move $s2, $t0
1736#    beq $s2, $zero, nullPtrException
1740#    lw $t0, -12($s2)
1744#    lw $t0, 16($t0)
1748#    jalr $t0 # isBlack
1752#    addu $sp, $sp, 0
1756#    lw $s2, ($sp)
1760#    addu $sp, $sp, 4
1764#    subu $sp, $sp, 4
1768#    sw $t0, ($sp)
# end: Call at 61.10; stackHeight = 4
1772#    lw $t0, ($sp)
1776#    xor $t0, $t0, 1
1780#    sw $t0, ($sp)
# end: Not at 61.9; stackHeight = 4
1784#    lw $t0, ($sp)
1788#    addu $sp, $sp, 4
1792#    addu $sp, $sp, 0
1796#    lw $ra, ($sp)
1800#    addu $sp, $sp, 4
1804#    jr $ra
.globl mth_RedBlackTree_helpInsert
1808:mth_RedBlackTree_helpInsert:
1808#    subu $sp, $sp, 4
1812#    sw $ra, ($sp)
# begin: Null at 66.9; stackHeight = 0
1816#    subu $sp, $sp, 4
1820#    sw $0, ($sp)
# end: Null at 66.9; stackHeight = 4
1824#    lw $t0, ($sp)
1828#    addu $sp, $sp, 4
1832#    addu $sp, $sp, 0
1836#    lw $ra, ($sp)
1840#    addu $sp, $sp, 4
1844#    jr $ra
.globl mth_RedBlackTree_insert
1848:mth_RedBlackTree_insert:
1848#    subu $sp, $sp, 4
1852#    sw $ra, ($sp)
# begin: LocalVarDecl at 72.15; stackHeight = 0
# begin: Call at 72.30; stackHeight = 0
# begin: This at 72.30; stackHeight = 0
1856#    subu $sp, $sp, 4
1860#    sw $s2, ($sp)
# end: This at 72.30; stackHeight = 4
# begin: IdentifierExp at 72.41; stackHeight = 4
1864#    lw $t0, 8($sp)
1868#    subu $sp, $sp, 8
1872#    sw $s5, 4($sp)
1876#    sw $t0, ($sp)
# end: IdentifierExp at 72.41; stackHeight = 12
1880#    lw $t0, 8($sp)
1884#    sw $s2, 8($sp)
1888#    move $s2, $t0
1892#    beq $s2, $zero, nullPtrException
1896#    lw $t0, -12($s2)
1900#    lw $t0, 28($t0)
1904#    jalr $t0 # helpInsert
1908#    addu $sp, $sp, 8
1912#    lw $s2, ($sp)
1916#    addu $sp, $sp, 4
1920#    subu $sp, $sp, 4
1924#    sw $t0, ($sp)
# end: Call at 72.30; stackHeight = 4
1928#"insertResult"    lw $zero, ($sp) #**"insertResult"
# end: LocalVarDecl at 72.15; stackHeight = 4
# begin: CallStatement at 74.15; stackHeight = 4
# begin: Call at 74.15; stackHeight = 4
# begin: IdentifierExp at 74.2; stackHeight = 4
1932#    lw $t0, 0($sp)
1936#    subu $sp, $sp, 4
1940#    sw $t0, ($sp)
# end: IdentifierExp at 74.2; stackHeight = 8
1944#    lw $t0, 0($sp)
1948#    sw $s2, 0($sp)
1952#    move $s2, $t0
1956#    beq $s2, $zero, nullPtrException
1960#    lw $t0, -12($s2)
1964#    lw $t0, 20($t0)
1968#    jalr $t0 # setBlack
1972#    addu $sp, $sp, 0
1976#    lw $s2, ($sp)
1980#    addu $sp, $sp, 4
1984#    subu $sp, $sp, 4
1988#    sw $t0, ($sp)
# end: Call at 74.15; stackHeight = 8
1992#    lw $t0, ($sp)
1996#    addu $sp, $sp, 4
# end: CallStatement at 74.15; stackHeight = 4
# begin: IdentifierExp at 75.9; stackHeight = 4
2000#    lw $t0, 0($sp)
2004#    subu $sp, $sp, 4
2008#    sw $t0, ($sp)
# end: IdentifierExp at 75.9; stackHeight = 8
2012#    lw $t0, ($sp)
2016#    addu $sp, $sp, 4
2020#    addu $sp, $sp, 4
2024#    lw $ra, ($sp)
2028#    addu $sp, $sp, 4
2032#    jr $ra
.globl mth_RedBlackTree_asNonNull
2036:mth_RedBlackTree_asNonNull:
2036#    subu $sp, $sp, 4
2040#    sw $ra, ($sp)
# begin: Null at 80.9; stackHeight = 0
2044#    subu $sp, $sp, 4
2048#    sw $0, ($sp)
# end: Null at 80.9; stackHeight = 4
2052#    lw $t0, ($sp)
2056#    addu $sp, $sp, 4
2060#    addu $sp, $sp, 0
2064#    lw $ra, ($sp)
2068#    addu $sp, $sp, 4
2072#    jr $ra
.globl mth_RedBlackTree_print
2076:mth_RedBlackTree_print:
2076#    subu $sp, $sp, 4
2080#    sw $ra, ($sp)
# begin: LocalVarDecl at 85.6; stackHeight = 0
# begin: NewObject at 85.12; stackHeight = 0
2084#    li $s6, 1
2088#    li $s7, 0
2092#    jal newObject
2096#    la $t0, CLASS_Lib
2100#    sw $t0, -12($s7)
# end: NewObject at 85.12; stackHeight = 4
2104#"lib"    lw $zero, ($sp) #**"lib"
# end: LocalVarDecl at 85.6; stackHeight = 4
# begin: CallStatement at 86.7; stackHeight = 4
# begin: Call at 86.7; stackHeight = 4
# begin: This at 86.2; stackHeight = 4
2108#    subu $sp, $sp, 4
2112#    sw $s2, ($sp)
# end: This at 86.2; stackHeight = 8
# begin: Null at 86.17; stackHeight = 8
2116#    subu $sp, $sp, 4
2120#    sw $0, ($sp)
# end: Null at 86.17; stackHeight = 12
# begin: IdentifierExp at 86.23; stackHeight = 12
2124#    lw $t0, 8($sp)
2128#    subu $sp, $sp, 4
2132#    sw $t0, ($sp)
# end: IdentifierExp at 86.23; stackHeight = 16
2136#    lw $t0, 8($sp)
2140#    sw $s2, 8($sp)
2144#    move $s2, $t0
2148#    beq $s2, $zero, nullPtrException
2152#    lw $t0, -12($s2)
2156#    lw $t0, 44($t0)
2160#    jalr $t0 # helpPrint
2164#    addu $sp, $sp, 8
2168#    lw $s2, ($sp)
2172#    addu $sp, $sp, 4
2176#    subu $sp, $sp, 4
2180#    sw $t0, ($sp)
# end: Call at 86.7; stackHeight = 8
2184#    lw $t0, ($sp)
2188#    addu $sp, $sp, 4
# end: CallStatement at 86.7; stackHeight = 4
2192#    addu $sp, $sp, 4
2196#    lw $ra, ($sp)
2200#    addu $sp, $sp, 4
2204#    jr $ra
.globl mth_RedBlackTree_helpPrint
2208:mth_RedBlackTree_helpPrint:
2208#    subu $sp, $sp, 4
2212#    sw $ra, ($sp)
2216#    addu $sp, $sp, 0
2220#    lw $ra, ($sp)
2224#    addu $sp, $sp, 4
2228#    jr $ra
.globl mth_RedBlackTree_lookup
2232:mth_RedBlackTree_lookup:
2232#    subu $sp, $sp, 4
2236#    sw $ra, ($sp)
# begin: False at 95.9; stackHeight = 0
2240#    subu $sp, $sp, 4
2244#    sw $zero, ($sp)
# end: False at 95.9; stackHeight = 4
2248#    lw $t0, ($sp)
2252#    addu $sp, $sp, 4
2256#    addu $sp, $sp, 0
2260#    lw $ra, ($sp)
2264#    addu $sp, $sp, 4
2268#    jr $ra
.globl mth_RedBlackTree_delete
2272:mth_RedBlackTree_delete:
2272#    subu $sp, $sp, 4
2276#    sw $ra, ($sp)
# begin: Call at 100.9; stackHeight = 0
# begin: This at 100.9; stackHeight = 0
2280#    subu $sp, $sp, 4
2284#    sw $s2, ($sp)
# end: This at 100.9; stackHeight = 4
# begin: IdentifierExp at 100.20; stackHeight = 4
2288#    lw $t0, 8($sp)
2292#    subu $sp, $sp, 8
2296#    sw $s5, 4($sp)
2300#    sw $t0, ($sp)
# end: IdentifierExp at 100.20; stackHeight = 12
# begin: NewArray at 100.26; stackHeight = 12
# begin: IntegerLiteral at 100.38; stackHeight = 12
2304#    li $t0, 1
2308#    subu $sp, $sp, 8
2312#    sw $s5, 4($sp)
2316#    sw $t0, ($sp)
# end: IntegerLiteral at 100.38; stackHeight = 20
2320#    lw $s7, ($sp)
2324#    addu $sp, $sp, 8
2328#    li $s6, 1
2332#    jal newObject
2336#    la $t0, CLASS_ARRAY_BOOLEAN
2340#    sw $t0, -12($s7)
# end: NewArray at 100.26; stackHeight = 16
2344#    lw $t0, 12($sp)
2348#    sw $s2, 12($sp)
2352#    move $s2, $t0
2356#    beq $s2, $zero, nullPtrException
2360#    lw $t0, -12($s2)
2364#    lw $t0, 56($t0)
2368#    jalr $t0 # helpDelete
2372#    addu $sp, $sp, 12
2376#    lw $s2, ($sp)
2380#    addu $sp, $sp, 4
2384#    subu $sp, $sp, 4
2388#    sw $t0, ($sp)
# end: Call at 100.9; stackHeight = 4
2392#    lw $t0, ($sp)
2396#    addu $sp, $sp, 4
2400#    addu $sp, $sp, 0
2404#    lw $ra, ($sp)
2408#    addu $sp, $sp, 4
2412#    jr $ra
.globl mth_RedBlackTree_helpDelete
2416:mth_RedBlackTree_helpDelete:
2416#    subu $sp, $sp, 4
2420#    sw $ra, ($sp)
# begin: This at 107.9; stackHeight = 0
2424#    subu $sp, $sp, 4
2428#    sw $s2, ($sp)
# end: This at 107.9; stackHeight = 4
2432#    lw $t0, ($sp)
2436#    addu $sp, $sp, 4
2440#    addu $sp, $sp, 0
2444#    lw $ra, ($sp)
2448#    addu $sp, $sp, 4
2452#    jr $ra
.globl mth_NullRedBlackTree_isNull
2456:mth_NullRedBlackTree_isNull:
2456#    subu $sp, $sp, 4
2460#    sw $ra, ($sp)
# begin: True at 116.9; stackHeight = 0
2464#    li $t0, 1
2468#    subu $sp, $sp, 4
2472#    sw $t0, ($sp)
# end: True at 116.9; stackHeight = 4
2476#    lw $t0, ($sp)
2480#    addu $sp, $sp, 4
2484#    addu $sp, $sp, 0
2488#    lw $ra, ($sp)
2492#    addu $sp, $sp, 4
2496#    jr $ra
.globl mth_NullRedBlackTree_helpInsert
2500:mth_NullRedBlackTree_helpInsert:
2500#    subu $sp, $sp, 4
2504#    sw $ra, ($sp)
# begin: Call at 121.35; stackHeight = 0
# begin: NewObject at 121.9; stackHeight = 0
2508#    li $s6, 3
2512#    li $s7, 2
2516#    jal newObject
2520#    la $t0, CLASS_NonNullRedBlackTree
2524#    sw $t0, -12($s7)
# end: NewObject at 121.9; stackHeight = 4
# begin: IdentifierExp at 121.40; stackHeight = 4
2528#    lw $t0, 8($sp)
2532#    subu $sp, $sp, 8
2536#    sw $s5, 4($sp)
2540#    sw $t0, ($sp)
# end: IdentifierExp at 121.40; stackHeight = 12
# begin: This at 121.45; stackHeight = 12
2544#    subu $sp, $sp, 4
2548#    sw $s2, ($sp)
# end: This at 121.45; stackHeight = 16
# begin: This at 121.50; stackHeight = 16
2552#    subu $sp, $sp, 4
2556#    sw $s2, ($sp)
# end: This at 121.50; stackHeight = 20
# begin: False at 121.55; stackHeight = 20
2560#    subu $sp, $sp, 4
2564#    sw $zero, ($sp)
# end: False at 121.55; stackHeight = 24
2568#    lw $t0, 20($sp)
2572#    sw $s2, 20($sp)
2576#    move $s2, $t0
2580#    beq $s2, $zero, nullPtrException
2584#    lw $t0, -12($s2)
2588#    lw $t0, 64($t0)
2592#    jalr $t0 # init
2596#    addu $sp, $sp, 20
2600#    lw $s2, ($sp)
2604#    addu $sp, $sp, 4
2608#    subu $sp, $sp, 4
2612#    sw $t0, ($sp)
# end: Call at 121.35; stackHeight = 4
2616#    lw $t0, ($sp)
2620#    addu $sp, $sp, 4
2624#    addu $sp, $sp, 0
2628#    lw $ra, ($sp)
2632#    addu $sp, $sp, 4
2636#    jr $ra
.globl mth_NonNullRedBlackTree_isBlack
2640:mth_NonNullRedBlackTree_isBlack:
2640#    subu $sp, $sp, 4
2644#    sw $ra, ($sp)
# begin: IdentifierExp at 135.9; stackHeight = 0
2648#    lw $t0, -20($s2)
2652#    subu $sp, $sp, 4
2656#    sw $t0, ($sp)
# end: IdentifierExp at 135.9; stackHeight = 4
2660#    lw $t0, ($sp)
2664#    addu $sp, $sp, 4
2668#    addu $sp, $sp, 0
2672#    lw $ra, ($sp)
2676#    addu $sp, $sp, 4
2680#    jr $ra
.globl mth_NonNullRedBlackTree_setBlack
2684:mth_NonNullRedBlackTree_setBlack:
2684#    subu $sp, $sp, 4
2688#    sw $ra, ($sp)
# begin: Assign at 140.10; stackHeight = 0
# begin: True at 140.12; stackHeight = 0
2692#    li $t0, 1
2696#    subu $sp, $sp, 4
2700#    sw $t0, ($sp)
# end: True at 140.12; stackHeight = 4
2704#    lw $t0, ($sp)
2708#    addu $sp, $sp, 4
2712#    sw $t0, -20($sp)
# end: Assign at 140.10; stackHeight = 0
2716#    addu $sp, $sp, 0
2720#    lw $ra, ($sp)
2724#    addu $sp, $sp, 4
2728#    jr $ra
.globl mth_NonNullRedBlackTree_setRed
2732:mth_NonNullRedBlackTree_setRed:
2732#    subu $sp, $sp, 4
2736#    sw $ra, ($sp)
# begin: Assign at 145.10; stackHeight = 0
# begin: False at 145.12; stackHeight = 0
2740#    subu $sp, $sp, 4
2744#    sw $zero, ($sp)
# end: False at 145.12; stackHeight = 4
2748#    lw $t0, ($sp)
2752#    addu $sp, $sp, 4
2756#    sw $t0, -20($sp)
# end: Assign at 145.10; stackHeight = 0
2760#    addu $sp, $sp, 0
2764#    lw $ra, ($sp)
2768#    addu $sp, $sp, 4
2772#    jr $ra
.globl mth_NonNullRedBlackTree_init
2776:mth_NonNullRedBlackTree_init:
2776#    subu $sp, $sp, 4
2780#    sw $ra, ($sp)
# begin: Assign at 151.12; stackHeight = 0
# begin: IdentifierExp at 151.14; stackHeight = 0
2784#    lw $t0, 16($sp)
2788#    subu $sp, $sp, 8
2792#    sw $s5, 4($sp)
2796#    sw $t0, ($sp)
# end: IdentifierExp at 151.14; stackHeight = 8
2800#    lw $t0, ($sp)
2804#    addu $sp, $sp, 8
2808#    sw $t0, -16($s2)
# end: Assign at 151.12; stackHeight = 0
# begin: Assign at 152.12; stackHeight = 0
# begin: IdentifierExp at 152.14; stackHeight = 0
2812#    lw $t0, 12($sp)
2816#    subu $sp, $sp, 4
2820#    sw $t0, ($sp)
# end: IdentifierExp at 152.14; stackHeight = 4
2824#    lw $t0, ($sp)
2828#    addu $sp, $sp, 4
2832#    sw $t0, 4($s2)
# end: Assign at 152.12; stackHeight = 0
# begin: Assign at 153.13; stackHeight = 0
# begin: IdentifierExp at 153.15; stackHeight = 0
2836#    lw $t0, 8($sp)
2840#    subu $sp, $sp, 4
2844#    sw $t0, ($sp)
# end: IdentifierExp at 153.15; stackHeight = 4
2848#    lw $t0, ($sp)
2852#    addu $sp, $sp, 4
2856#    sw $t0, 8($s2)
# end: Assign at 153.13; stackHeight = 0
# begin: Assign at 154.15; stackHeight = 0
# begin: IdentifierExp at 154.17; stackHeight = 0
2860#    lw $t0, 4($sp)
2864#    subu $sp, $sp, 4
2868#    sw $t0, ($sp)
# end: IdentifierExp at 154.17; stackHeight = 4
2872#    lw $t0, ($sp)
2876#    addu $sp, $sp, 4
2880#    sw $t0, -20($s2)
# end: Assign at 154.15; stackHeight = 0
# begin: This at 155.9; stackHeight = 0
2884#    subu $sp, $sp, 4
2888#    sw $s2, ($sp)
# end: This at 155.9; stackHeight = 4
2892#    lw $t0, ($sp)
2896#    addu $sp, $sp, 4
2900#    addu $sp, $sp, 0
2904#    lw $ra, ($sp)
2908#    addu $sp, $sp, 4
2912#    jr $ra
.globl mth_NonNullRedBlackTree_helpInsert
2916:mth_NonNullRedBlackTree_helpInsert:
2916#    subu $sp, $sp, 4
2920#    sw $ra, ($sp)
# begin: LocalVarDecl at 162.15; stackHeight = 0
# begin: This at 162.24; stackHeight = 0
2924#    subu $sp, $sp, 4
2928#    sw $s2, ($sp)
# end: This at 162.24; stackHeight = 4
2932#"rtnVal"    lw $zero, ($sp) #**"rtnVal"
# end: LocalVarDecl at 162.15; stackHeight = 4
# begin: If at 165.2; stackHeight = 4
# begin: GreaterThan at 165.11; stackHeight = 4
# begin: IdentifierExp at 165.6; stackHeight = 4
2936#    lw $t0, 8($sp)
2940#    subu $sp, $sp, 8
2944#    sw $s5, 4($sp)
2948#    sw $t0, ($sp)
# end: IdentifierExp at 165.6; stackHeight = 12
# begin: InstVarAccess at 165.17; stackHeight = 12
# begin: This at 165.13; stackHeight = 12
2952#    subu $sp, $sp, 4
2956#    sw $s2, ($sp)
# end: This at 165.13; stackHeight = 16
2960#    lw $t0, ($sp)
2964#    addu $sp, $sp, 4
2968#    beq $t0, $zero, nullPtrException
2972#    lw $t0, -64($t0)
2976#    subu $sp, $sp, 8
2980#    sw $s5, 4($sp)
2984#    sw $t0, ($sp)
# end: InstVarAccess at 165.17; stackHeight = 20
2988#    lw $t2, ($sp)
2992#    addu $sp, $sp, 8
2996#    lw $t1, ($sp)
3000#    addu $sp, $sp, 8
3004#    sgt $t0, $t1, $t2
3008#    subu $sp, $sp, 4
3012#    sw $t0, ($sp)
# end: GreaterThan at 165.11; stackHeight = 8
3016#    lw $t0, ($sp)
3020#    addu $sp, $sp, 4
3024#    beq $t0, $zero, if_else_271
# begin: Block at 165.24; stackHeight = 4
# begin: Assign at 167.12; stackHeight = 4
# begin: Call at 167.20; stackHeight = 4
# begin: IdentifierExp at 167.14; stackHeight = 4
3028#    lw $t0, 8($s2)
3032#    subu $sp, $sp, 4
3036#    sw $t0, ($sp)
# end: IdentifierExp at 167.14; stackHeight = 8
# begin: IdentifierExp at 167.31; stackHeight = 8
3040#    lw $t0, 12($sp)
3044#    subu $sp, $sp, 8
3048#    sw $s5, 4($sp)
3052#    sw $t0, ($sp)
# end: IdentifierExp at 167.31; stackHeight = 16
3056#    lw $t0, 8($sp)
3060#    sw $s2, 8($sp)
3064#    move $s2, $t0
3068#    beq $s2, $zero, nullPtrException
3072#    lw $t0, -12($s2)
3076#    lw $t0, 28($t0)
3080#    jalr $t0 # helpInsert
3084#    addu $sp, $sp, 8
3088#    lw $s2, ($sp)
3092#    addu $sp, $sp, 4
3096#    subu $sp, $sp, 4
3100#    sw $t0, ($sp)
# end: Call at 167.20; stackHeight = 8
3104#    lw $t0, ($sp)
3108#    addu $sp, $sp, 4
3112#    sw $t0, 12($sp)
# end: Assign at 167.12; stackHeight = 4
# begin: Assign at 168.13; stackHeight = 4
# begin: Call at 168.20; stackHeight = 4
# begin: This at 168.15; stackHeight = 4
3116#    subu $sp, $sp, 4
3120#    sw $s2, ($sp)
# end: This at 168.15; stackHeight = 8
# begin: False at 168.41; stackHeight = 8
3124#    subu $sp, $sp, 4
3128#    sw $zero, ($sp)
# end: False at 168.41; stackHeight = 12
3132#    lw $t0, 4($sp)
3136#    sw $s2, 4($sp)
3140#    move $s2, $t0
3144#    beq $s2, $zero, nullPtrException
3148#    lw $t0, -12($s2)
3152#    lw $t0, 88($t0)
3156#    jalr $t0 # rebalanceAfterInsert
3160#    addu $sp, $sp, 4
3164#    lw $s2, ($sp)
3168#    addu $sp, $sp, 4
3172#    subu $sp, $sp, 4
3176#    sw $t0, ($sp)
# end: Call at 168.20; stackHeight = 8
3180#    lw $t0, ($sp)
3184#    addu $sp, $sp, 4
3188#    sw $t0, 0($sp)
# end: Assign at 168.13; stackHeight = 4
# end: Block at 165.24; stackHeight = 4
3192#    j if_done_271
3196:  if_else_271:
# begin: If at 170.7; stackHeight = 4
# begin: LessThan at 170.16; stackHeight = 4
# begin: IdentifierExp at 170.11; stackHeight = 4
3196#    lw $t0, 8($sp)
3200#    subu $sp, $sp, 8
3204#    sw $s5, 4($sp)
3208#    sw $t0, ($sp)
# end: IdentifierExp at 170.11; stackHeight = 12
# begin: InstVarAccess at 170.22; stackHeight = 12
# begin: This at 170.18; stackHeight = 12
3212#    subu $sp, $sp, 4
3216#    sw $s2, ($sp)
# end: This at 170.18; stackHeight = 16
3220#    lw $t0, ($sp)
3224#    addu $sp, $sp, 4
3228#    beq $t0, $zero, nullPtrException
3232#    lw $t0, -64($t0)
3236#    subu $sp, $sp, 8
3240#    sw $s5, 4($sp)
3244#    sw $t0, ($sp)
# end: InstVarAccess at 170.22; stackHeight = 20
3248#    lw $t2, ($sp)
3252#    addu $sp, $sp, 8
3256#    lw $t1, ($sp)
3260#    addu $sp, $sp, 8
3264#    slt $t0, $t1, $t2
3268#    subu $sp, $sp, 4
3272#    sw $t0, ($sp)
# end: LessThan at 170.16; stackHeight = 8
3276#    lw $t0, ($sp)
3280#    addu $sp, $sp, 4
3284#    beq $t0, $zero, if_else_270
# begin: Block at 170.29; stackHeight = 4
# begin: Assign at 172.11; stackHeight = 4
# begin: Call at 172.18; stackHeight = 4
# begin: IdentifierExp at 172.13; stackHeight = 4
3288#    lw $t0, 4($s2)
3292#    subu $sp, $sp, 4
3296#    sw $t0, ($sp)
# end: IdentifierExp at 172.13; stackHeight = 8
# begin: IdentifierExp at 172.29; stackHeight = 8
3300#    lw $t0, 12($sp)
3304#    subu $sp, $sp, 8
3308#    sw $s5, 4($sp)
3312#    sw $t0, ($sp)
# end: IdentifierExp at 172.29; stackHeight = 16
3316#    lw $t0, 8($sp)
3320#    sw $s2, 8($sp)
3324#    move $s2, $t0
3328#    beq $s2, $zero, nullPtrException
3332#    lw $t0, -12($s2)
3336#    lw $t0, 28($t0)
3340#    jalr $t0 # helpInsert
3344#    addu $sp, $sp, 8
3348#    lw $s2, ($sp)
3352#    addu $sp, $sp, 4
3356#    subu $sp, $sp, 4
3360#    sw $t0, ($sp)
# end: Call at 172.18; stackHeight = 8
3364#    lw $t0, ($sp)
3368#    addu $sp, $sp, 4
3372#    sw $t0, 8($sp)
# end: Assign at 172.11; stackHeight = 4
# begin: Assign at 173.13; stackHeight = 4
# begin: Call at 173.20; stackHeight = 4
# begin: This at 173.15; stackHeight = 4
3376#    subu $sp, $sp, 4
3380#    sw $s2, ($sp)
# end: This at 173.15; stackHeight = 8
# begin: True at 173.41; stackHeight = 8
3384#    li $t0, 1
3388#    subu $sp, $sp, 4
3392#    sw $t0, ($sp)
# end: True at 173.41; stackHeight = 12
3396#    lw $t0, 4($sp)
3400#    sw $s2, 4($sp)
3404#    move $s2, $t0
3408#    beq $s2, $zero, nullPtrException
3412#    lw $t0, -12($s2)
3416#    lw $t0, 88($t0)
3420#    jalr $t0 # rebalanceAfterInsert
3424#    addu $sp, $sp, 4
3428#    lw $s2, ($sp)
3432#    addu $sp, $sp, 4
3436#    subu $sp, $sp, 4
3440#    sw $t0, ($sp)
# end: Call at 173.20; stackHeight = 8
3444#    lw $t0, ($sp)
3448#    addu $sp, $sp, 4
3452#    sw $t0, 0($sp)
# end: Assign at 173.13; stackHeight = 4
# end: Block at 170.29; stackHeight = 4
3456#    j if_done_270
3460:  if_else_270:
# begin: Block at 177.2; stackHeight = 4
# end: Block at 177.2; stackHeight = 4
3460:  if_done_270:
# end: If at 170.7; stackHeight = 4
3460:  if_done_271:
# end: If at 165.2; stackHeight = 4
# begin: IdentifierExp at 177.9; stackHeight = 4
3460#    lw $t0, 0($sp)
3464#    subu $sp, $sp, 4
3468#    sw $t0, ($sp)
# end: IdentifierExp at 177.9; stackHeight = 8
3472#    lw $t0, ($sp)
3476#    addu $sp, $sp, 4
3480#    addu $sp, $sp, 4
3484#    lw $ra, ($sp)
3488#    addu $sp, $sp, 4
3492#    jr $ra
.globl mth_NonNullRedBlackTree_lookup
3496:mth_NonNullRedBlackTree_lookup:
3496#    subu $sp, $sp, 4
3500#    sw $ra, ($sp)
# begin: LocalVarDecl at 182.10; stackHeight = 0
# begin: True at 182.19; stackHeight = 0
3504#    li $t0, 1
3508#    subu $sp, $sp, 4
3512#    sw $t0, ($sp)
# end: True at 182.19; stackHeight = 4
3516#"rtnVal"    lw $zero, ($sp) #**"rtnVal"
# end: LocalVarDecl at 182.10; stackHeight = 4
# begin: If at 183.2; stackHeight = 4
# begin: LessThan at 183.11; stackHeight = 4
# begin: IdentifierExp at 183.6; stackHeight = 4
3520#    lw $t0, 8($sp)
3524#    subu $sp, $sp, 8
3528#    sw $s5, 4($sp)
3532#    sw $t0, ($sp)
# end: IdentifierExp at 183.6; stackHeight = 12
# begin: InstVarAccess at 183.17; stackHeight = 12
# begin: This at 183.13; stackHeight = 12
3536#    subu $sp, $sp, 4
3540#    sw $s2, ($sp)
# end: This at 183.13; stackHeight = 16
3544#    lw $t0, ($sp)
3548#    addu $sp, $sp, 4
3552#    beq $t0, $zero, nullPtrException
3556#    lw $t0, -64($t0)
3560#    subu $sp, $sp, 8
3564#    sw $s5, 4($sp)
3568#    sw $t0, ($sp)
# end: InstVarAccess at 183.17; stackHeight = 20
3572#    lw $t2, ($sp)
3576#    addu $sp, $sp, 8
3580#    lw $t1, ($sp)
3584#    addu $sp, $sp, 8
3588#    slt $t0, $t1, $t2
3592#    subu $sp, $sp, 4
3596#    sw $t0, ($sp)
# end: LessThan at 183.11; stackHeight = 8
3600#    lw $t0, ($sp)
3604#    addu $sp, $sp, 4
3608#    beq $t0, $zero, if_else_303
# begin: Block at 183.24; stackHeight = 4
# begin: Assign at 184.13; stackHeight = 4
# begin: Call at 184.20; stackHeight = 4
# begin: IdentifierExp at 184.15; stackHeight = 4
3612#    lw $t0, 4($s2)
3616#    subu $sp, $sp, 4
3620#    sw $t0, ($sp)
# end: IdentifierExp at 184.15; stackHeight = 8
# begin: IdentifierExp at 184.27; stackHeight = 8
3624#    lw $t0, 12($sp)
3628#    subu $sp, $sp, 8
3632#    sw $s5, 4($sp)
3636#    sw $t0, ($sp)
# end: IdentifierExp at 184.27; stackHeight = 16
3640#    lw $t0, 8($sp)
3644#    sw $s2, 8($sp)
3648#    move $s2, $t0
3652#    beq $s2, $zero, nullPtrException
3656#    lw $t0, -12($s2)
3660#    lw $t0, 48($t0)
3664#    jalr $t0 # lookup
3668#    addu $sp, $sp, 8
3672#    lw $s2, ($sp)
3676#    addu $sp, $sp, 4
3680#    subu $sp, $sp, 4
3684#    sw $t0, ($sp)
# end: Call at 184.20; stackHeight = 8
3688#    lw $t0, ($sp)
3692#    addu $sp, $sp, 4
3696#    sw $t0, 0($sp)
# end: Assign at 184.13; stackHeight = 4
# end: Block at 183.24; stackHeight = 4
3700#    j if_done_303
3704:  if_else_303:
# begin: If at 186.7; stackHeight = 4
# begin: GreaterThan at 186.16; stackHeight = 4
# begin: IdentifierExp at 186.11; stackHeight = 4
3704#    lw $t0, 8($sp)
3708#    subu $sp, $sp, 8
3712#    sw $s5, 4($sp)
3716#    sw $t0, ($sp)
# end: IdentifierExp at 186.11; stackHeight = 12
# begin: InstVarAccess at 186.22; stackHeight = 12
# begin: This at 186.18; stackHeight = 12
3720#    subu $sp, $sp, 4
3724#    sw $s2, ($sp)
# end: This at 186.18; stackHeight = 16
3728#    lw $t0, ($sp)
3732#    addu $sp, $sp, 4
3736#    beq $t0, $zero, nullPtrException
3740#    lw $t0, -64($t0)
3744#    subu $sp, $sp, 8
3748#    sw $s5, 4($sp)
3752#    sw $t0, ($sp)
# end: InstVarAccess at 186.22; stackHeight = 20
3756#    lw $t2, ($sp)
3760#    addu $sp, $sp, 8
3764#    lw $t1, ($sp)
3768#    addu $sp, $sp, 8
3772#    sgt $t0, $t1, $t2
3776#    subu $sp, $sp, 4
3780#    sw $t0, ($sp)
# end: GreaterThan at 186.16; stackHeight = 8
3784#    lw $t0, ($sp)
3788#    addu $sp, $sp, 4
3792#    beq $t0, $zero, if_else_302
# begin: Block at 186.29; stackHeight = 4
# begin: Assign at 187.13; stackHeight = 4
# begin: Call at 187.21; stackHeight = 4
# begin: IdentifierExp at 187.15; stackHeight = 4
3796#    lw $t0, 8($s2)
3800#    subu $sp, $sp, 4
3804#    sw $t0, ($sp)
# end: IdentifierExp at 187.15; stackHeight = 8
# begin: IdentifierExp at 187.28; stackHeight = 8
3808#    lw $t0, 12($sp)
3812#    subu $sp, $sp, 8
3816#    sw $s5, 4($sp)
3820#    sw $t0, ($sp)
# end: IdentifierExp at 187.28; stackHeight = 16
3824#    lw $t0, 8($sp)
3828#    sw $s2, 8($sp)
3832#    move $s2, $t0
3836#    beq $s2, $zero, nullPtrException
3840#    lw $t0, -12($s2)
3844#    lw $t0, 48($t0)
3848#    jalr $t0 # lookup
3852#    addu $sp, $sp, 8
3856#    lw $s2, ($sp)
3860#    addu $sp, $sp, 4
3864#    subu $sp, $sp, 4
3868#    sw $t0, ($sp)
# end: Call at 187.21; stackHeight = 8
3872#    lw $t0, ($sp)
3876#    addu $sp, $sp, 4
3880#    sw $t0, 0($sp)
# end: Assign at 187.13; stackHeight = 4
# end: Block at 186.29; stackHeight = 4
3884#    j if_done_302
3888:  if_else_302:
# begin: Block at 189.2; stackHeight = 4
# end: Block at 189.2; stackHeight = 4
3888:  if_done_302:
# end: If at 186.7; stackHeight = 4
3888:  if_done_303:
# end: If at 183.2; stackHeight = 4
# begin: IdentifierExp at 189.9; stackHeight = 4
3888#    lw $t0, 0($sp)
3892#    subu $sp, $sp, 4
3896#    sw $t0, ($sp)
# end: IdentifierExp at 189.9; stackHeight = 8
3900#    lw $t0, ($sp)
3904#    addu $sp, $sp, 4
3908#    addu $sp, $sp, 4
3912#    lw $ra, ($sp)
3916#    addu $sp, $sp, 4
3920#    jr $ra
.globl mth_NonNullRedBlackTree_helpDelete
3924:mth_NonNullRedBlackTree_helpDelete:
3924#    subu $sp, $sp, 4
3928#    sw $ra, ($sp)
# begin: LocalVarDecl at 198.15; stackHeight = 0
# begin: Null at 198.24; stackHeight = 0
3932#    subu $sp, $sp, 4
3936#    sw $0, ($sp)
# end: Null at 198.24; stackHeight = 4
3940#"rtnVal"    lw $zero, ($sp) #**"rtnVal"
# end: LocalVarDecl at 198.15; stackHeight = 4
# begin: LocalVarDecl at 201.22; stackHeight = 4
# begin: This at 201.32; stackHeight = 4
3944#    subu $sp, $sp, 4
3948#    sw $s2, ($sp)
# end: This at 201.32; stackHeight = 8
3952#"rtnVal2"    lw $zero, ($sp) #**"rtnVal2"
# end: LocalVarDecl at 201.22; stackHeight = 8
# begin: If at 204.2; stackHeight = 8
# begin: Equals at 204.11; stackHeight = 8
# begin: IdentifierExp at 204.6; stackHeight = 8
3956#    lw $t0, 16($sp)
3960#    subu $sp, $sp, 8
3964#    sw $s5, 4($sp)
3968#    sw $t0, ($sp)
# end: IdentifierExp at 204.6; stackHeight = 16
# begin: InstVarAccess at 204.18; stackHeight = 16
# begin: This at 204.14; stackHeight = 16
3972#    subu $sp, $sp, 4
3976#    sw $s2, ($sp)
# end: This at 204.14; stackHeight = 20
3980#    lw $t0, ($sp)
3984#    addu $sp, $sp, 4
3988#    beq $t0, $zero, nullPtrException
3992#    lw $t0, -64($t0)
3996#    subu $sp, $sp, 8
4000#    sw $s5, 4($sp)
4004#    sw $t0, ($sp)
# end: InstVarAccess at 204.18; stackHeight = 24
4008#    lw $t2, ($sp)
4012#    addu $sp, $sp, 8
4016#    lw $t1, ($sp)
4020#    addu $sp, $sp, 8
4024#    seq $t0, $t1, $t2
4025##...subu $at,$t1,$t2
4029##...sltiu $t0,$at,1
4032#    subu $sp, $sp, 4
4036#    sw $t0, ($sp)
# end: Equals at 204.11; stackHeight = 12
4040#    lw $t0, ($sp)
4044#    addu $sp, $sp, 4
4048#    beq $t0, $zero, if_else_446
# begin: Block at 204.25; stackHeight = 8
# begin: If at 205.6; stackHeight = 8
# begin: Call at 205.16; stackHeight = 8
# begin: IdentifierExp at 205.10; stackHeight = 8
4052#    lw $t0, 8($s2)
4056#    subu $sp, $sp, 4
4060#    sw $t0, ($sp)
# end: IdentifierExp at 205.10; stackHeight = 12
4064#    lw $t0, 0($sp)
4068#    sw $s2, 0($sp)
4072#    move $s2, $t0
4076#    beq $s2, $zero, nullPtrException
4080#    lw $t0, -12($s2)
4084#    lw $t0, 12($t0)
4088#    jalr $t0 # isNull
4092#    addu $sp, $sp, 0
4096#    lw $s2, ($sp)
4100#    addu $sp, $sp, 4
4104#    subu $sp, $sp, 4
4108#    sw $t0, ($sp)
# end: Call at 205.16; stackHeight = 12
4112#    lw $t0, ($sp)
4116#    addu $sp, $sp, 4
4120#    beq $t0, $zero, if_else_411
# begin: Block at 205.26; stackHeight = 8
# begin: If at 206.3; stackHeight = 8
# begin: Call at 206.12; stackHeight = 8
# begin: IdentifierExp at 206.7; stackHeight = 8
4124#    lw $t0, 4($s2)
4128#    subu $sp, $sp, 4
4132#    sw $t0, ($sp)
# end: IdentifierExp at 206.7; stackHeight = 12
4136#    lw $t0, 0($sp)
4140#    sw $s2, 0($sp)
4144#    move $s2, $t0
4148#    beq $s2, $zero, nullPtrException
4152#    lw $t0, -12($s2)
4156#    lw $t0, 12($t0)
4160#    jalr $t0 # isNull
4164#    addu $sp, $sp, 0
4168#    lw $s2, ($sp)
4172#    addu $sp, $sp, 4
4176#    subu $sp, $sp, 4
4180#    sw $t0, ($sp)
# end: Call at 206.12; stackHeight = 12
4184#    lw $t0, ($sp)
4188#    addu $sp, $sp, 4
4192#    beq $t0, $zero, if_else_344
# begin: Block at 206.22; stackHeight = 8
# begin: Assign at 208.18; stackHeight = 8
# begin: IdentifierExp at 208.7; stackHeight = 8
4196#    lw $t0, 12($sp)
4200#    subu $sp, $sp, 4
4204#    sw $t0, ($sp)
# end: IdentifierExp at 208.7; stackHeight = 12
# begin: IntegerLiteral at 208.15; stackHeight = 12
4208#    li $t0, 0
4212#    subu $sp, $sp, 8
4216#    sw $s5, 4($sp)
4220#    sw $t0, ($sp)
# end: IntegerLiteral at 208.15; stackHeight = 20
# begin: IdentifierExp at 208.20; stackHeight = 20
4224#    lw $t0, -20($s2)
4228#    subu $sp, $sp, 4
4232#    sw $t0, ($sp)
# end: IdentifierExp at 208.20; stackHeight = 24
4236#    lw $t0, ($sp)
4240#    addu $sp, $sp, 4
4244#    lw $t1, ($sp)
4248#    addu $sp, $sp, 8
4252#    lw $t2, ($sp)
4256#    addu $sp, $sp, 4
4260#    beq $t2, $zero, nullPtrException
4264#    lw $t3, -4($t2)
4268#    bgeu $t1, $t3, arrayIndexOutOfBounds
4269##...sltu $at,$t1,$t3
4273##...beq $at,$zero,18324
4276#    sll $t1, $t1, 2
4280#    addu $t1, $t1, $t2
4284#    sw $t0, ($t1)
# end: Assign at 208.18; stackHeight = 8
# begin: Assign at 209.14; stackHeight = 8
# begin: IdentifierExp at 209.16; stackHeight = 8
4288#    lw $t0, 8($s2)
4292#    subu $sp, $sp, 4
4296#    sw $t0, ($sp)
# end: IdentifierExp at 209.16; stackHeight = 12
4300#    lw $t0, ($sp)
4304#    addu $sp, $sp, 4
4308#    sw $t0, 4($sp)
# end: Assign at 209.14; stackHeight = 8
# end: Block at 206.22; stackHeight = 8
4312#    j if_done_344
4316:  if_else_344:
# begin: Block at 211.8; stackHeight = 8
# begin: Assign at 213.14; stackHeight = 8
# begin: IdentifierExp at 213.16; stackHeight = 8
4316#    lw $t0, 4($s2)
4320#    subu $sp, $sp, 4
4324#    sw $t0, ($sp)
# end: IdentifierExp at 213.16; stackHeight = 12
4328#    lw $t0, ($sp)
4332#    addu $sp, $sp, 4
4336#    sw $t0, 4($sp)
# end: Assign at 213.14; stackHeight = 8
# begin: CallStatement at 214.14; stackHeight = 8
# begin: Call at 214.14; stackHeight = 8
# begin: IdentifierExp at 214.7; stackHeight = 8
4340#    lw $t0, 4($sp)
4344#    subu $sp, $sp, 4
4348#    sw $t0, ($sp)
# end: IdentifierExp at 214.7; stackHeight = 12
4352#    lw $t0, 0($sp)
4356#    sw $s2, 0($sp)
4360#    move $s2, $t0
4364#    beq $s2, $zero, nullPtrException
4368#    lw $t0, -12($s2)
4372#    lw $t0, 20($t0)
4376#    jalr $t0 # setBlack
4380#    addu $sp, $sp, 0
4384#    lw $s2, ($sp)
4388#    addu $sp, $sp, 4
4392#    subu $sp, $sp, 4
4396#    sw $t0, ($sp)
# end: Call at 214.14; stackHeight = 12
4400#    lw $t0, ($sp)
4404#    addu $sp, $sp, 4
# end: CallStatement at 214.14; stackHeight = 8
# end: Block at 211.8; stackHeight = 8
4408:  if_done_344:
# end: If at 206.3; stackHeight = 8
# end: Block at 205.26; stackHeight = 8
4408#    j if_done_411
4412:  if_else_411:
# begin: If at 217.11; stackHeight = 8
# begin: Call at 217.20; stackHeight = 8
# begin: IdentifierExp at 217.15; stackHeight = 8
4412#    lw $t0, 4($s2)
4416#    subu $sp, $sp, 4
4420#    sw $t0, ($sp)
# end: IdentifierExp at 217.15; stackHeight = 12
4424#    lw $t0, 0($sp)
4428#    sw $s2, 0($sp)
4432#    move $s2, $t0
4436#    beq $s2, $zero, nullPtrException
4440#    lw $t0, -12($s2)
4444#    lw $t0, 12($t0)
4448#    jalr $t0 # isNull
4452#    addu $sp, $sp, 0
4456#    lw $s2, ($sp)
4460#    addu $sp, $sp, 4
4464#    subu $sp, $sp, 4
4468#    sw $t0, ($sp)
# end: Call at 217.20; stackHeight = 12
4472#    lw $t0, ($sp)
4476#    addu $sp, $sp, 4
4480#    beq $t0, $zero, if_else_410
# begin: Block at 217.30; stackHeight = 8
# begin: Assign at 219.10; stackHeight = 8
# begin: IdentifierExp at 219.12; stackHeight = 8
4484#    lw $t0, 8($s2)
4488#    subu $sp, $sp, 4
4492#    sw $t0, ($sp)
# end: IdentifierExp at 219.12; stackHeight = 12
4496#    lw $t0, ($sp)
4500#    addu $sp, $sp, 4
4504#    sw $t0, 4($sp)
# end: Assign at 219.10; stackHeight = 8
# begin: CallStatement at 220.10; stackHeight = 8
# begin: Call at 220.10; stackHeight = 8
# begin: IdentifierExp at 220.3; stackHeight = 8
4508#    lw $t0, 4($sp)
4512#    subu $sp, $sp, 4
4516#    sw $t0, ($sp)
# end: IdentifierExp at 220.3; stackHeight = 12
4520#    lw $t0, 0($sp)
4524#    sw $s2, 0($sp)
4528#    move $s2, $t0
4532#    beq $s2, $zero, nullPtrException
4536#    lw $t0, -12($s2)
4540#    lw $t0, 20($t0)
4544#    jalr $t0 # setBlack
4548#    addu $sp, $sp, 0
4552#    lw $s2, ($sp)
4556#    addu $sp, $sp, 4
4560#    subu $sp, $sp, 4
4564#    sw $t0, ($sp)
# end: Call at 220.10; stackHeight = 12
4568#    lw $t0, ($sp)
4572#    addu $sp, $sp, 4
# end: CallStatement at 220.10; stackHeight = 8
# end: Block at 217.30; stackHeight = 8
4576#    j if_done_410
4580:  if_else_410:
# begin: Block at 222.11; stackHeight = 8
# begin: LocalVarDecl at 223.23; stackHeight = 8
# begin: Call at 223.36; stackHeight = 8
# begin: IdentifierExp at 223.30; stackHeight = 8
4580#    lw $t0, 8($s2)
4584#    subu $sp, $sp, 4
4588#    sw $t0, ($sp)
# end: IdentifierExp at 223.30; stackHeight = 12
4592#    lw $t0, 0($sp)
4596#    sw $s2, 0($sp)
4600#    move $s2, $t0
4604#    beq $s2, $zero, nullPtrException
4608#    lw $t0, -12($s2)
4612#    lw $t0, 36($t0)
4616#    jalr $t0 # asNonNull
4620#    addu $sp, $sp, 0
4624#    lw $s2, ($sp)
4628#    addu $sp, $sp, 4
4632#    subu $sp, $sp, 4
4636#    sw $t0, ($sp)
# end: Call at 223.36; stackHeight = 12
4640#"succ"    lw $zero, ($sp) #**"succ"
# end: LocalVarDecl at 223.23; stackHeight = 12
# begin: Block at 224.3; stackHeight = 12
# begin: Block at 224.8; stackHeight = 12
# end: Block at 224.8; stackHeight = 12
# begin: BreakTarget at 224.3; stackHeight = 12
4644#    j while_cond_380
4648:  while_top_380:
# begin: Block at 224.3; stackHeight = 12
# begin: Block at 224.12; stackHeight = 12
# begin: LocalVarDecl at 225.27; stackHeight = 12
# begin: Call at 225.44; stackHeight = 12
# begin: InstVarAccess at 225.38; stackHeight = 12
# begin: IdentifierExp at 225.34; stackHeight = 12
4648#    lw $t0, 0($sp)
4652#    subu $sp, $sp, 4
4656#    sw $t0, ($sp)
# end: IdentifierExp at 225.34; stackHeight = 16
4660#    lw $t0, ($sp)
4664#    addu $sp, $sp, 4
4668#    beq $t0, $zero, nullPtrException
4672#    lw $t0, 16($t0)
4676#    subu $sp, $sp, 4
4680#    sw $t0, ($sp)
# end: InstVarAccess at 225.38; stackHeight = 16
4684#    lw $t0, 0($sp)
4688#    sw $s2, 0($sp)
4692#    move $s2, $t0
4696#    beq $s2, $zero, nullPtrException
4700#    lw $t0, -12($s2)
4704#    lw $t0, 36($t0)
4708#    jalr $t0 # asNonNull
4712#    addu $sp, $sp, 0
4716#    lw $s2, ($sp)
4720#    addu $sp, $sp, 4
4724#    subu $sp, $sp, 4
4728#    sw $t0, ($sp)
# end: Call at 225.44; stackHeight = 16
4732#"next"    lw $zero, ($sp) #**"next"
# end: LocalVarDecl at 225.27; stackHeight = 16
# begin: If at 226.7; stackHeight = 16
# begin: Equals at 226.16; stackHeight = 16
# begin: IdentifierExp at 226.11; stackHeight = 16
4736#    lw $t0, 0($sp)
4740#    subu $sp, $sp, 4
4744#    sw $t0, ($sp)
# end: IdentifierExp at 226.11; stackHeight = 20
# begin: Null at 226.19; stackHeight = 20
4748#    subu $sp, $sp, 4
4752#    sw $0, ($sp)
# end: Null at 226.19; stackHeight = 24
4756#    lw $t2, ($sp)
4760#    addu $sp, $sp, 4
4764#    lw $t1, ($sp)
4768#    addu $sp, $sp, 4
4772#    seq $t0, $t1, $t2
4773##...subu $at,$t1,$t2
4777##...sltiu $t0,$at,1
4780#    subu $sp, $sp, 4
4784#    sw $t0, ($sp)
# end: Equals at 226.16; stackHeight = 20
4788#    lw $t0, ($sp)
4792#    addu $sp, $sp, 4
4796#    beq $t0, $zero, if_else_371
# begin: Break at 226.25; stackHeight = 16
4800#    addu $sp, $sp, 4
4804#    j break_target_380
# end: Break at 226.25; stackHeight = 12
4808#    j if_done_371
4812:  if_else_371:
# begin: Block at 227.7; stackHeight = 12
# end: Block at 227.7; stackHeight = 12
4812:  if_done_371:
# end: If at 226.7; stackHeight = 12
# begin: Assign at 227.12; stackHeight = 12
# begin: IdentifierExp at 227.14; stackHeight = 12
4812#    lw $t0, -4($sp)
4816#    subu $sp, $sp, 4
4820#    sw $t0, ($sp)
# end: IdentifierExp at 227.14; stackHeight = 16
4824#    lw $t0, ($sp)
4828#    addu $sp, $sp, 4
4832#    sw $t0, 0($sp)
# end: Assign at 227.12; stackHeight = 12
# end: Block at 224.12; stackHeight = 12
# begin: Block at 224.10; stackHeight = 12
# end: Block at 224.10; stackHeight = 12
# end: Block at 224.3; stackHeight = 12
4836:  while_cond_380:
# begin: True at 224.9; stackHeight = 12
4836#    li $t0, 1
4840#    subu $sp, $sp, 4
4844#    sw $t0, ($sp)
# end: True at 224.9; stackHeight = 16
4848#    lw $t0, ($sp)
4852#    addu $sp, $sp, 4
4856#    bne $t0, $zero, while_top_380
4860:  break_target_380:
# end: BreakTarget at 224.3; stackHeight = 12
# end: Block at 224.3; stackHeight = 12
# begin: LocalVarDecl at 231.7; stackHeight = 12
# begin: InstVarAccess at 231.18; stackHeight = 12
# begin: IdentifierExp at 231.14; stackHeight = 12
4860#    lw $t0, 0($sp)
4864#    subu $sp, $sp, 4
4868#    sw $t0, ($sp)
# end: IdentifierExp at 231.14; stackHeight = 16
4872#    lw $t0, ($sp)
4876#    addu $sp, $sp, 4
4880#    beq $t0, $zero, nullPtrException
4884#    lw $t0, -64($t0)
4888#    subu $sp, $sp, 8
4892#    sw $s5, 4($sp)
4896#    sw $t0, ($sp)
# end: InstVarAccess at 231.18; stackHeight = 20
4900#"temp"    lw $zero, ($sp) #**"temp"
# end: LocalVarDecl at 231.7; stackHeight = 20
# begin: Assign at 232.13; stackHeight = 20
# begin: InstVarAccess at 232.19; stackHeight = 20
# begin: This at 232.15; stackHeight = 20
4904#    subu $sp, $sp, 4
4908#    sw $s2, ($sp)
# end: This at 232.15; stackHeight = 24
4912#    lw $t0, ($sp)
4916#    addu $sp, $sp, 4
4920#    beq $t0, $zero, nullPtrException
4924#    lw $t0, -64($t0)
4928#    subu $sp, $sp, 8
4932#    sw $s5, 4($sp)
4936#    sw $t0, ($sp)
# end: InstVarAccess at 232.19; stackHeight = 28
# begin: IdentifierExp at 232.3; stackHeight = 28
4940#    lw $t0, 16($sp)
4944#    subu $sp, $sp, 4
4948#    sw $t0, ($sp)
# end: IdentifierExp at 232.3; stackHeight = 32
4952#    lw $t0, ($sp)
4956#    addu $sp, $sp, 8
4960#    lw $t1, ($sp)
4964#    addu $sp, $sp, 4
4968#    beq $t1, $zero, nullPtrException
4972#    sw $t0, -16($t1)
# end: Assign at 232.13; stackHeight = 20
# begin: Assign at 233.13; stackHeight = 20
# begin: IdentifierExp at 233.15; stackHeight = 20
4976#    lw $t0, 0($sp)
4980#    subu $sp, $sp, 8
4984#    sw $s5, 4($sp)
4988#    sw $t0, ($sp)
# end: IdentifierExp at 233.15; stackHeight = 28
4992#    lw $t0, ($sp)
4996#    addu $sp, $sp, 8
5000#    sw $t0, -16($s2)
# end: Assign at 233.13; stackHeight = 20
# begin: Assign at 236.17; stackHeight = 20
# begin: Call at 236.25; stackHeight = 20
# begin: IdentifierExp at 236.19; stackHeight = 20
5004#    lw $t0, 8($s2)
5008#    subu $sp, $sp, 4
5012#    sw $t0, ($sp)
# end: IdentifierExp at 236.19; stackHeight = 24
# begin: IdentifierExp at 236.36; stackHeight = 24
5016#    lw $t0, 32($sp)
5020#    subu $sp, $sp, 8
5024#    sw $s5, 4($sp)
5028#    sw $t0, ($sp)
# end: IdentifierExp at 236.36; stackHeight = 32
# begin: IdentifierExp at 236.42; stackHeight = 32
5032#    lw $t0, 36($sp)
5036#    subu $sp, $sp, 4
5040#    sw $t0, ($sp)
# end: IdentifierExp at 236.42; stackHeight = 36
5044#    lw $t0, 12($sp)
5048#    sw $s2, 12($sp)
5052#    move $s2, $t0
5056#    beq $s2, $zero, nullPtrException
5060#    lw $t0, -12($s2)
5064#    lw $t0, 56($t0)
5068#    jalr $t0 # helpDelete
5072#    addu $sp, $sp, 12
5076#    lw $s2, ($sp)
5080#    addu $sp, $sp, 4
5084#    subu $sp, $sp, 4
5088#    sw $t0, ($sp)
# end: Call at 236.25; stackHeight = 24
# begin: IdentifierExp at 236.3; stackHeight = 24
5092#    lw $t0, 16($sp)
5096#    subu $sp, $sp, 4
5100#    sw $t0, ($sp)
# end: IdentifierExp at 236.3; stackHeight = 28
5104#    lw $t0, ($sp)
5108#    addu $sp, $sp, 4
5112#    lw $t1, ($sp)
5116#    addu $sp, $sp, 4
5120#    beq $t1, $zero, nullPtrException
5124#    sw $t0, 8($t1)
# end: Assign at 236.17; stackHeight = 20
# begin: Assign at 239.10; stackHeight = 20
# begin: Call at 239.20; stackHeight = 20
# begin: IdentifierExp at 239.12; stackHeight = 20
5128#    lw $t0, 12($sp)
5132#    subu $sp, $sp, 4
5136#    sw $t0, ($sp)
# end: IdentifierExp at 239.12; stackHeight = 24
# begin: True at 239.38; stackHeight = 24
5140#    li $t0, 1
5144#    subu $sp, $sp, 4
5148#    sw $t0, ($sp)
# end: True at 239.38; stackHeight = 28
# begin: IdentifierExp at 239.44; stackHeight = 28
5152#    lw $t0, 32($sp)
5156#    subu $sp, $sp, 4
5160#    sw $t0, ($sp)
# end: IdentifierExp at 239.44; stackHeight = 32
5164#    lw $t0, 8($sp)
5168#    sw $s2, 8($sp)
5172#    move $s2, $t0
5176#    beq $s2, $zero, nullPtrException
5180#    lw $t0, -12($s2)
5184#    lw $t0, 68($t0)
5188#    jalr $t0 # adjustAfterDelete
5192#    addu $sp, $sp, 8
5196#    lw $s2, ($sp)
5200#    addu $sp, $sp, 4
5204#    subu $sp, $sp, 4
5208#    sw $t0, ($sp)
# end: Call at 239.20; stackHeight = 24
5212#    lw $t0, ($sp)
5216#    addu $sp, $sp, 4
5220#    sw $t0, 16($sp)
# end: Assign at 239.10; stackHeight = 20
5224#    addu $sp, $sp, 12
# end: Block at 222.11; stackHeight = 8
5228:  if_done_410:
# end: If at 217.11; stackHeight = 8
5228:  if_done_411:
# end: If at 205.6; stackHeight = 8
# end: Block at 204.25; stackHeight = 8
5228#    j if_done_446
5232:  if_else_446:
# begin: If at 242.7; stackHeight = 8
# begin: LessThan at 242.16; stackHeight = 8
# begin: IdentifierExp at 242.11; stackHeight = 8
5232#    lw $t0, 16($sp)
5236#    subu $sp, $sp, 8
5240#    sw $s5, 4($sp)
5244#    sw $t0, ($sp)
# end: IdentifierExp at 242.11; stackHeight = 16
# begin: InstVarAccess at 242.22; stackHeight = 16
# begin: This at 242.18; stackHeight = 16
5248#    subu $sp, $sp, 4
5252#    sw $s2, ($sp)
# end: This at 242.18; stackHeight = 20
5256#    lw $t0, ($sp)
5260#    addu $sp, $sp, 4
5264#    beq $t0, $zero, nullPtrException
5268#    lw $t0, -64($t0)
5272#    subu $sp, $sp, 8
5276#    sw $s5, 4($sp)
5280#    sw $t0, ($sp)
# end: InstVarAccess at 242.22; stackHeight = 24
5284#    lw $t2, ($sp)
5288#    addu $sp, $sp, 8
5292#    lw $t1, ($sp)
5296#    addu $sp, $sp, 8
5300#    slt $t0, $t1, $t2
5304#    subu $sp, $sp, 4
5308#    sw $t0, ($sp)
# end: LessThan at 242.16; stackHeight = 12
5312#    lw $t0, ($sp)
5316#    addu $sp, $sp, 4
5320#    beq $t0, $zero, if_else_445
# begin: Block at 242.29; stackHeight = 8
# begin: Assign at 244.19; stackHeight = 8
# begin: Call at 244.26; stackHeight = 8
# begin: IdentifierExp at 244.21; stackHeight = 8
5324#    lw $t0, 4($s2)
5328#    subu $sp, $sp, 4
5332#    sw $t0, ($sp)
# end: IdentifierExp at 244.21; stackHeight = 12
# begin: IdentifierExp at 244.37; stackHeight = 12
5336#    lw $t0, 20($sp)
5340#    subu $sp, $sp, 8
5344#    sw $s5, 4($sp)
5348#    sw $t0, ($sp)
# end: IdentifierExp at 244.37; stackHeight = 20
# begin: IdentifierExp at 244.43; stackHeight = 20
5352#    lw $t0, 24($sp)
5356#    subu $sp, $sp, 4
5360#    sw $t0, ($sp)
# end: IdentifierExp at 244.43; stackHeight = 24
5364#    lw $t0, 12($sp)
5368#    sw $s2, 12($sp)
5372#    move $s2, $t0
5376#    beq $s2, $zero, nullPtrException
5380#    lw $t0, -12($s2)
5384#    lw $t0, 56($t0)
5388#    jalr $t0 # helpDelete
5392#    addu $sp, $sp, 12
5396#    lw $s2, ($sp)
5400#    addu $sp, $sp, 4
5404#    subu $sp, $sp, 4
5408#    sw $t0, ($sp)
# end: Call at 244.26; stackHeight = 12
# begin: IdentifierExp at 244.6; stackHeight = 12
5412#    lw $t0, 4($sp)
5416#    subu $sp, $sp, 4
5420#    sw $t0, ($sp)
# end: IdentifierExp at 244.6; stackHeight = 16
5424#    lw $t0, ($sp)
5428#    addu $sp, $sp, 4
5432#    lw $t1, ($sp)
5436#    addu $sp, $sp, 4
5440#    beq $t1, $zero, nullPtrException
5444#    sw $t0, 4($t1)
# end: Assign at 244.19; stackHeight = 8
# begin: Assign at 245.13; stackHeight = 8
# begin: Call at 245.23; stackHeight = 8
# begin: IdentifierExp at 245.15; stackHeight = 8
5448#    lw $t0, 0($sp)
5452#    subu $sp, $sp, 4
5456#    sw $t0, ($sp)
# end: IdentifierExp at 245.15; stackHeight = 12
# begin: False at 245.41; stackHeight = 12
5460#    subu $sp, $sp, 4
5464#    sw $zero, ($sp)
# end: False at 245.41; stackHeight = 16
# begin: IdentifierExp at 245.48; stackHeight = 16
5468#    lw $t0, 20($sp)
5472#    subu $sp, $sp, 4
5476#    sw $t0, ($sp)
# end: IdentifierExp at 245.48; stackHeight = 20
5480#    lw $t0, 8($sp)
5484#    sw $s2, 8($sp)
5488#    move $s2, $t0
5492#    beq $s2, $zero, nullPtrException
5496#    lw $t0, -12($s2)
5500#    lw $t0, 68($t0)
5504#    jalr $t0 # adjustAfterDelete
5508#    addu $sp, $sp, 8
5512#    lw $s2, ($sp)
5516#    addu $sp, $sp, 4
5520#    subu $sp, $sp, 4
5524#    sw $t0, ($sp)
# end: Call at 245.23; stackHeight = 12
5528#    lw $t0, ($sp)
5532#    addu $sp, $sp, 4
5536#    sw $t0, 4($sp)
# end: Assign at 245.13; stackHeight = 8
# end: Block at 242.29; stackHeight = 8
5540#    j if_done_445
5544:  if_else_445:
# begin: Block at 247.7; stackHeight = 8
# begin: Assign at 249.20; stackHeight = 8
# begin: Call at 249.28; stackHeight = 8
# begin: IdentifierExp at 249.22; stackHeight = 8
5544#    lw $t0, 8($s2)
5548#    subu $sp, $sp, 4
5552#    sw $t0, ($sp)
# end: IdentifierExp at 249.22; stackHeight = 12
# begin: IdentifierExp at 249.39; stackHeight = 12
5556#    lw $t0, 20($sp)
5560#    subu $sp, $sp, 8
5564#    sw $s5, 4($sp)
5568#    sw $t0, ($sp)
# end: IdentifierExp at 249.39; stackHeight = 20
# begin: IdentifierExp at 249.45; stackHeight = 20
5572#    lw $t0, 24($sp)
5576#    subu $sp, $sp, 4
5580#    sw $t0, ($sp)
# end: IdentifierExp at 249.45; stackHeight = 24
5584#    lw $t0, 12($sp)
5588#    sw $s2, 12($sp)
5592#    move $s2, $t0
5596#    beq $s2, $zero, nullPtrException
5600#    lw $t0, -12($s2)
5604#    lw $t0, 56($t0)
5608#    jalr $t0 # helpDelete
5612#    addu $sp, $sp, 12
5616#    lw $s2, ($sp)
5620#    addu $sp, $sp, 4
5624#    subu $sp, $sp, 4
5628#    sw $t0, ($sp)
# end: Call at 249.28; stackHeight = 12
# begin: IdentifierExp at 249.6; stackHeight = 12
5632#    lw $t0, 4($sp)
5636#    subu $sp, $sp, 4
5640#    sw $t0, ($sp)
# end: IdentifierExp at 249.6; stackHeight = 16
5644#    lw $t0, ($sp)
5648#    addu $sp, $sp, 4
5652#    lw $t1, ($sp)
5656#    addu $sp, $sp, 4
5660#    beq $t1, $zero, nullPtrException
5664#    sw $t0, 8($t1)
# end: Assign at 249.20; stackHeight = 8
# begin: Assign at 250.13; stackHeight = 8
# begin: Call at 250.23; stackHeight = 8
# begin: IdentifierExp at 250.15; stackHeight = 8
5668#    lw $t0, 0($sp)
5672#    subu $sp, $sp, 4
5676#    sw $t0, ($sp)
# end: IdentifierExp at 250.15; stackHeight = 12
# begin: True at 250.41; stackHeight = 12
5680#    li $t0, 1
5684#    subu $sp, $sp, 4
5688#    sw $t0, ($sp)
# end: True at 250.41; stackHeight = 16
# begin: IdentifierExp at 250.47; stackHeight = 16
5692#    lw $t0, 20($sp)
5696#    subu $sp, $sp, 4
5700#    sw $t0, ($sp)
# end: IdentifierExp at 250.47; stackHeight = 20
5704#    lw $t0, 8($sp)
5708#    sw $s2, 8($sp)
5712#    move $s2, $t0
5716#    beq $s2, $zero, nullPtrException
5720#    lw $t0, -12($s2)
5724#    lw $t0, 68($t0)
5728#    jalr $t0 # adjustAfterDelete
5732#    addu $sp, $sp, 8
5736#    lw $s2, ($sp)
5740#    addu $sp, $sp, 4
5744#    subu $sp, $sp, 4
5748#    sw $t0, ($sp)
# end: Call at 250.23; stackHeight = 12
5752#    lw $t0, ($sp)
5756#    addu $sp, $sp, 4
5760#    sw $t0, 4($sp)
# end: Assign at 250.13; stackHeight = 8
# end: Block at 247.7; stackHeight = 8
5764:  if_done_445:
# end: If at 242.7; stackHeight = 8
5764:  if_done_446:
# end: If at 204.2; stackHeight = 8
# begin: IdentifierExp at 253.9; stackHeight = 8
5764#    lw $t0, 4($sp)
5768#    subu $sp, $sp, 4
5772#    sw $t0, ($sp)
# end: IdentifierExp at 253.9; stackHeight = 12
5776#    lw $t0, ($sp)
5780#    addu $sp, $sp, 4
5784#    addu $sp, $sp, 8
5788#    lw $ra, ($sp)
5792#    addu $sp, $sp, 4
5796#    jr $ra
.globl mth_NonNullRedBlackTree_adjustAfterDelete
5800:mth_NonNullRedBlackTree_adjustAfterDelete:
5800#    subu $sp, $sp, 4
5804#    sw $ra, ($sp)
# begin: LocalVarDecl at 263.22; stackHeight = 0
# begin: This at 263.31; stackHeight = 0
5808#    subu $sp, $sp, 4
5812#    sw $s2, ($sp)
# end: This at 263.31; stackHeight = 4
5816#"rtnVal"    lw $zero, ($sp) #**"rtnVal"
# end: LocalVarDecl at 263.22; stackHeight = 4
# begin: If at 265.2; stackHeight = 4
# begin: ArrayLookup at 265.13; stackHeight = 4
# begin: IntegerLiteral at 265.14; stackHeight = 4
5820#    li $t0, 0
5824#    subu $sp, $sp, 8
5828#    sw $s5, 4($sp)
5832#    sw $t0, ($sp)
# end: IntegerLiteral at 265.14; stackHeight = 12
# begin: IdentifierExp at 265.6; stackHeight = 12
5836#    lw $t0, 16($sp)
5840#    subu $sp, $sp, 4
5844#    sw $t0, ($sp)
# end: IdentifierExp at 265.6; stackHeight = 16
5848#    lw $t0, ($sp)
5852#    addu $sp, $sp, 4
5856#    lw $t1, ($sp)
5860#    addu $sp, $sp, 8
5864#    beq $t0, $zero, nullPtrException
5868#    lw $t3, -4($t0)
5872#    bgeu $t1, $t3, arrayIndexOutOfBounds
5873##...sltu $at,$t1,$t3
5877##...beq $at,$zero,18324
5880#    sll $t1, $t1, 2
5884#    addu $t1, $t1, $t0
5888#    lw $t0, ($t1)
5892#    subu $sp, $sp, 4
5896#    sw $t0, ($sp)
# end: ArrayLookup at 265.13; stackHeight = 8
5900#    lw $t0, ($sp)
5904#    addu $sp, $sp, 4
5908#    beq $t0, $zero, if_else_716
# begin: Block at 265.18; stackHeight = 4
# begin: Assign at 274.17; stackHeight = 4
# begin: IdentifierExp at 274.6; stackHeight = 4
5912#    lw $t0, 8($sp)
5916#    subu $sp, $sp, 4
5920#    sw $t0, ($sp)
# end: IdentifierExp at 274.6; stackHeight = 8
# begin: IntegerLiteral at 274.14; stackHeight = 8
5924#    li $t0, 0
5928#    subu $sp, $sp, 8
5932#    sw $s5, 4($sp)
5936#    sw $t0, ($sp)
# end: IntegerLiteral at 274.14; stackHeight = 16
# begin: False at 274.19; stackHeight = 16
5940#    subu $sp, $sp, 4
5944#    sw $zero, ($sp)
# end: False at 274.19; stackHeight = 20
5948#    lw $t0, ($sp)
5952#    addu $sp, $sp, 4
5956#    lw $t1, ($sp)
5960#    addu $sp, $sp, 8
5964#    lw $t2, ($sp)
5968#    addu $sp, $sp, 4
5972#    beq $t2, $zero, nullPtrException
5976#    lw $t3, -4($t2)
5980#    bgeu $t1, $t3, arrayIndexOutOfBounds
5981##...sltu $at,$t1,$t3
5985##...beq $at,$zero,18324
5988#    sll $t1, $t1, 2
5992#    addu $t1, $t1, $t2
5996#    sw $t0, ($t1)
# end: Assign at 274.17; stackHeight = 4
# begin: LocalVarDecl at 277.26; stackHeight = 4
# begin: This at 277.35; stackHeight = 4
6000#    subu $sp, $sp, 4
6004#    sw $s2, ($sp)
# end: This at 277.35; stackHeight = 8
6008#"parent"    lw $zero, ($sp) #**"parent"
# end: LocalVarDecl at 277.26; stackHeight = 8
# begin: LocalVarDecl at 278.26; stackHeight = 8
# begin: Call at 279.34; stackHeight = 8
# begin: Call at 279.10; stackHeight = 8
# begin: IdentifierExp at 279.3; stackHeight = 8
6012#    lw $t0, 0($sp)
6016#    subu $sp, $sp, 4
6020#    sw $t0, ($sp)
# end: IdentifierExp at 279.3; stackHeight = 12
# begin: IdentifierExp at 279.19; stackHeight = 12
6024#    lw $t0, 20($sp)
6028#    subu $sp, $sp, 4
6032#    sw $t0, ($sp)
# end: IdentifierExp at 279.19; stackHeight = 16
6036#    lw $t0, 4($sp)
6040#    sw $s2, 4($sp)
6044#    move $s2, $t0
6048#    beq $s2, $zero, nullPtrException
6052#    lw $t0, -12($s2)
6056#    lw $t0, 72($t0)
6060#    jalr $t0 # getRight
6064#    addu $sp, $sp, 4
6068#    lw $s2, ($sp)
6072#    addu $sp, $sp, 4
6076#    subu $sp, $sp, 4
6080#    sw $t0, ($sp)
# end: Call at 279.10; stackHeight = 12
6084#    lw $t0, 0($sp)
6088#    sw $s2, 0($sp)
6092#    move $s2, $t0
6096#    beq $s2, $zero, nullPtrException
6100#    lw $t0, -12($s2)
6104#    lw $t0, 36($t0)
6108#    jalr $t0 # asNonNull
6112#    addu $sp, $sp, 0
6116#    lw $s2, ($sp)
6120#    addu $sp, $sp, 4
6124#    subu $sp, $sp, 4
6128#    sw $t0, ($sp)
# end: Call at 279.34; stackHeight = 12
6132#"sibling"    lw $zero, ($sp) #**"sibling"
# end: LocalVarDecl at 278.26; stackHeight = 12
# begin: LocalVarDecl at 280.19; stackHeight = 12
# begin: Call at 280.41; stackHeight = 12
# begin: IdentifierExp at 280.33; stackHeight = 12
6136#    lw $t0, 0($sp)
6140#    subu $sp, $sp, 4
6144#    sw $t0, ($sp)
# end: IdentifierExp at 280.33; stackHeight = 16
# begin: IdentifierExp at 280.49; stackHeight = 16
6148#    lw $t0, 24($sp)
6152#    subu $sp, $sp, 4
6156#    sw $t0, ($sp)
# end: IdentifierExp at 280.49; stackHeight = 20
6160#    lw $t0, 4($sp)
6164#    sw $s2, 4($sp)
6168#    move $s2, $t0
6172#    beq $s2, $zero, nullPtrException
6176#    lw $t0, -12($s2)
6180#    lw $t0, 76($t0)
6184#    jalr $t0 # getLeft
6188#    addu $sp, $sp, 4
6192#    lw $s2, ($sp)
6196#    addu $sp, $sp, 4
6200#    subu $sp, $sp, 4
6204#    sw $t0, ($sp)
# end: Call at 280.41; stackHeight = 16
6208#"innerNephew"    lw $zero, ($sp) #**"innerNephew"
# end: LocalVarDecl at 280.19; stackHeight = 16
# begin: LocalVarDecl at 281.19; stackHeight = 16
# begin: Call at 281.41; stackHeight = 16
# begin: IdentifierExp at 281.33; stackHeight = 16
6212#    lw $t0, 4($sp)
6216#    subu $sp, $sp, 4
6220#    sw $t0, ($sp)
# end: IdentifierExp at 281.33; stackHeight = 20
# begin: IdentifierExp at 281.50; stackHeight = 20
6224#    lw $t0, 28($sp)
6228#    subu $sp, $sp, 4
6232#    sw $t0, ($sp)
# end: IdentifierExp at 281.50; stackHeight = 24
6236#    lw $t0, 4($sp)
6240#    sw $s2, 4($sp)
6244#    move $s2, $t0
6248#    beq $s2, $zero, nullPtrException
6252#    lw $t0, -12($s2)
6256#    lw $t0, 72($t0)
6260#    jalr $t0 # getRight
6264#    addu $sp, $sp, 4
6268#    lw $s2, ($sp)
6272#    addu $sp, $sp, 4
6276#    subu $sp, $sp, 4
6280#    sw $t0, ($sp)
# end: Call at 281.41; stackHeight = 20
6284#"outerNephew"    lw $zero, ($sp) #**"outerNephew"
# end: LocalVarDecl at 281.19; stackHeight = 20
# begin: If at 284.6; stackHeight = 20
# begin: Call at 284.17; stackHeight = 20
# begin: IdentifierExp at 284.10; stackHeight = 20
6288#    lw $t0, 12($sp)
6292#    subu $sp, $sp, 4
6296#    sw $t0, ($sp)
# end: IdentifierExp at 284.10; stackHeight = 24
6300#    lw $t0, 0($sp)
6304#    sw $s2, 0($sp)
6308#    move $s2, $t0
6312#    beq $s2, $zero, nullPtrException
6316#    lw $t0, -12($s2)
6320#    lw $t0, 24($t0)
6324#    jalr $t0 # isRed
6328#    addu $sp, $sp, 0
6332#    lw $s2, ($sp)
6336#    addu $sp, $sp, 4
6340#    subu $sp, $sp, 4
6344#    sw $t0, ($sp)
# end: Call at 284.17; stackHeight = 24
6348#    lw $t0, ($sp)
6352#    addu $sp, $sp, 4
6356#    beq $t0, $zero, if_else_713
# begin: Block at 284.26; stackHeight = 20
# begin: If at 285.3; stackHeight = 20
# begin: Call at 285.19; stackHeight = 20
# begin: IdentifierExp at 285.7; stackHeight = 20
6360#    lw $t0, 4($sp)
6364#    subu $sp, $sp, 4
6368#    sw $t0, ($sp)
# end: IdentifierExp at 285.7; stackHeight = 24
6372#    lw $t0, 0($sp)
6376#    sw $s2, 0($sp)
6380#    move $s2, $t0
6384#    beq $s2, $zero, nullPtrException
6388#    lw $t0, -12($s2)
6392#    lw $t0, 16($t0)
6396#    jalr $t0 # isBlack
6400#    addu $sp, $sp, 0
6404#    lw $s2, ($sp)
6408#    addu $sp, $sp, 4
6412#    subu $sp, $sp, 4
6416#    sw $t0, ($sp)
# end: Call at 285.19; stackHeight = 24
6420#    lw $t0, ($sp)
6424#    addu $sp, $sp, 4
6428#    beq $t0, $zero, if_else_573
# begin: Block at 285.30; stackHeight = 20
# begin: CallStatement at 287.14; stackHeight = 20
# begin: Call at 287.14; stackHeight = 20
# begin: IdentifierExp at 287.7; stackHeight = 20
6432#    lw $t0, 12($sp)
6436#    subu $sp, $sp, 4
6440#    sw $t0, ($sp)
# end: IdentifierExp at 287.7; stackHeight = 24
# begin: IdentifierExp at 287.23; stackHeight = 24
6444#    lw $t0, 8($sp)
6448#    subu $sp, $sp, 4
6452#    sw $t0, ($sp)
# end: IdentifierExp at 287.23; stackHeight = 28
# begin: IdentifierExp at 287.36; stackHeight = 28
6456#    lw $t0, 36($sp)
6460#    subu $sp, $sp, 4
6464#    sw $t0, ($sp)
# end: IdentifierExp at 287.36; stackHeight = 32
6468#    lw $t0, 8($sp)
6472#    sw $s2, 8($sp)
6476#    move $s2, $t0
6480#    beq $s2, $zero, nullPtrException
6484#    lw $t0, -12($s2)
6488#    lw $t0, 80($t0)
6492#    jalr $t0 # setRight
6496#    addu $sp, $sp, 8
6500#    lw $s2, ($sp)
6504#    addu $sp, $sp, 4
6508#    subu $sp, $sp, 4
6512#    sw $t0, ($sp)
# end: Call at 287.14; stackHeight = 24
6516#    lw $t0, ($sp)
6520#    addu $sp, $sp, 4
# end: CallStatement at 287.14; stackHeight = 20
# begin: CallStatement at 288.15; stackHeight = 20
# begin: Call at 288.15; stackHeight = 20
# begin: IdentifierExp at 288.7; stackHeight = 20
6524#    lw $t0, 8($sp)
6528#    subu $sp, $sp, 4
6532#    sw $t0, ($sp)
# end: IdentifierExp at 288.7; stackHeight = 24
# begin: IdentifierExp at 288.23; stackHeight = 24
6536#    lw $t0, 16($sp)
6540#    subu $sp, $sp, 4
6544#    sw $t0, ($sp)
# end: IdentifierExp at 288.23; stackHeight = 28
# begin: IdentifierExp at 288.31; stackHeight = 28
6548#    lw $t0, 36($sp)
6552#    subu $sp, $sp, 4
6556#    sw $t0, ($sp)
# end: IdentifierExp at 288.31; stackHeight = 32
6560#    lw $t0, 8($sp)
6564#    sw $s2, 8($sp)
6568#    move $s2, $t0
6572#    beq $s2, $zero, nullPtrException
6576#    lw $t0, -12($s2)
6580#    lw $t0, 84($t0)
6584#    jalr $t0 # setLeft
6588#    addu $sp, $sp, 8
6592#    lw $s2, ($sp)
6596#    addu $sp, $sp, 4
6600#    subu $sp, $sp, 4
6604#    sw $t0, ($sp)
# end: Call at 288.15; stackHeight = 24
6608#    lw $t0, ($sp)
6612#    addu $sp, $sp, 4
# end: CallStatement at 288.15; stackHeight = 20
# begin: Assign at 289.14; stackHeight = 20
# begin: IdentifierExp at 289.16; stackHeight = 20
6616#    lw $t0, 8($sp)
6620#    subu $sp, $sp, 4
6624#    sw $t0, ($sp)
# end: IdentifierExp at 289.16; stackHeight = 24
6628#    lw $t0, ($sp)
6632#    addu $sp, $sp, 4
6636#    sw $t0, 16($sp)
# end: Assign at 289.14; stackHeight = 20
# end: Block at 285.30; stackHeight = 20
6640#    j if_done_573
6644:  if_else_573:
# begin: If at 291.8; stackHeight = 20
# begin: Call at 291.24; stackHeight = 20
# begin: IdentifierExp at 291.12; stackHeight = 20
6644#    lw $t0, 0($sp)
6648#    subu $sp, $sp, 4
6652#    sw $t0, ($sp)
# end: IdentifierExp at 291.12; stackHeight = 24
6656#    lw $t0, 0($sp)
6660#    sw $s2, 0($sp)
6664#    move $s2, $t0
6668#    beq $s2, $zero, nullPtrException
6672#    lw $t0, -12($s2)
6676#    lw $t0, 24($t0)
6680#    jalr $t0 # isRed
6684#    addu $sp, $sp, 0
6688#    lw $s2, ($sp)
6692#    addu $sp, $sp, 4
6696#    subu $sp, $sp, 4
6700#    sw $t0, ($sp)
# end: Call at 291.24; stackHeight = 24
6704#    lw $t0, ($sp)
6708#    addu $sp, $sp, 4
6712#    beq $t0, $zero, if_else_572
# begin: Block at 291.33; stackHeight = 20
# begin: CallStatement at 293.14; stackHeight = 20
# begin: Call at 293.14; stackHeight = 20
# begin: IdentifierExp at 293.7; stackHeight = 20
6716#    lw $t0, 12($sp)
6720#    subu $sp, $sp, 4
6724#    sw $t0, ($sp)
# end: IdentifierExp at 293.7; stackHeight = 24
# begin: IdentifierExp at 293.23; stackHeight = 24
6728#    lw $t0, 8($sp)
6732#    subu $sp, $sp, 4
6736#    sw $t0, ($sp)
# end: IdentifierExp at 293.23; stackHeight = 28
# begin: IdentifierExp at 293.36; stackHeight = 28
6740#    lw $t0, 36($sp)
6744#    subu $sp, $sp, 4
6748#    sw $t0, ($sp)
# end: IdentifierExp at 293.36; stackHeight = 32
6752#    lw $t0, 8($sp)
6756#    sw $s2, 8($sp)
6760#    move $s2, $t0
6764#    beq $s2, $zero, nullPtrException
6768#    lw $t0, -12($s2)
6772#    lw $t0, 80($t0)
6776#    jalr $t0 # setRight
6780#    addu $sp, $sp, 8
6784#    lw $s2, ($sp)
6788#    addu $sp, $sp, 4
6792#    subu $sp, $sp, 4
6796#    sw $t0, ($sp)
# end: Call at 293.14; stackHeight = 24
6800#    lw $t0, ($sp)
6804#    addu $sp, $sp, 4
# end: CallStatement at 293.14; stackHeight = 20
# begin: CallStatement at 294.15; stackHeight = 20
# begin: Call at 294.15; stackHeight = 20
# begin: IdentifierExp at 294.7; stackHeight = 20
6808#    lw $t0, 8($sp)
6812#    subu $sp, $sp, 4
6816#    sw $t0, ($sp)
# end: IdentifierExp at 294.7; stackHeight = 24
# begin: IdentifierExp at 294.23; stackHeight = 24
6820#    lw $t0, 16($sp)
6824#    subu $sp, $sp, 4
6828#    sw $t0, ($sp)
# end: IdentifierExp at 294.23; stackHeight = 28
# begin: IdentifierExp at 294.31; stackHeight = 28
6832#    lw $t0, 36($sp)
6836#    subu $sp, $sp, 4
6840#    sw $t0, ($sp)
# end: IdentifierExp at 294.31; stackHeight = 32
6844#    lw $t0, 8($sp)
6848#    sw $s2, 8($sp)
6852#    move $s2, $t0
6856#    beq $s2, $zero, nullPtrException
6860#    lw $t0, -12($s2)
6864#    lw $t0, 84($t0)
6868#    jalr $t0 # setLeft
6872#    addu $sp, $sp, 8
6876#    lw $s2, ($sp)
6880#    addu $sp, $sp, 4
6884#    subu $sp, $sp, 4
6888#    sw $t0, ($sp)
# end: Call at 294.15; stackHeight = 24
6892#    lw $t0, ($sp)
6896#    addu $sp, $sp, 4
# end: CallStatement at 294.15; stackHeight = 20
# begin: CallStatement at 295.14; stackHeight = 20
# begin: Call at 295.14; stackHeight = 20
# begin: IdentifierExp at 295.7; stackHeight = 20
6900#    lw $t0, 12($sp)
6904#    subu $sp, $sp, 4
6908#    sw $t0, ($sp)
# end: IdentifierExp at 295.7; stackHeight = 24
6912#    lw $t0, 0($sp)
6916#    sw $s2, 0($sp)
6920#    move $s2, $t0
6924#    beq $s2, $zero, nullPtrException
6928#    lw $t0, -12($s2)
6932#    lw $t0, 20($t0)
6936#    jalr $t0 # setBlack
6940#    addu $sp, $sp, 0
6944#    lw $s2, ($sp)
6948#    addu $sp, $sp, 4
6952#    subu $sp, $sp, 4
6956#    sw $t0, ($sp)
# end: Call at 295.14; stackHeight = 24
6960#    lw $t0, ($sp)
6964#    addu $sp, $sp, 4
# end: CallStatement at 295.14; stackHeight = 20
# begin: CallStatement at 296.15; stackHeight = 20
# begin: Call at 296.15; stackHeight = 20
# begin: IdentifierExp at 296.7; stackHeight = 20
6968#    lw $t0, 8($sp)
6972#    subu $sp, $sp, 4
6976#    sw $t0, ($sp)
# end: IdentifierExp at 296.7; stackHeight = 24
6980#    lw $t0, 0($sp)
6984#    sw $s2, 0($sp)
6988#    move $s2, $t0
6992#    beq $s2, $zero, nullPtrException
6996#    lw $t0, -12($s2)
7000#    lw $t0, 60($t0)
7004#    jalr $t0 # setRed
7008#    addu $sp, $sp, 0
7012#    lw $s2, ($sp)
7016#    addu $sp, $sp, 4
7020#    subu $sp, $sp, 4
7024#    sw $t0, ($sp)
# end: Call at 296.15; stackHeight = 24
7028#    lw $t0, ($sp)
7032#    addu $sp, $sp, 4
# end: CallStatement at 296.15; stackHeight = 20
# begin: CallStatement at 297.19; stackHeight = 20
# begin: Call at 297.19; stackHeight = 20
# begin: IdentifierExp at 297.7; stackHeight = 20
7036#    lw $t0, 0($sp)
7040#    subu $sp, $sp, 4
7044#    sw $t0, ($sp)
# end: IdentifierExp at 297.7; stackHeight = 24
7048#    lw $t0, 0($sp)
7052#    sw $s2, 0($sp)
7056#    move $s2, $t0
7060#    beq $s2, $zero, nullPtrException
7064#    lw $t0, -12($s2)
7068#    lw $t0, 20($t0)
7072#    jalr $t0 # setBlack
7076#    addu $sp, $sp, 0
7080#    lw $s2, ($sp)
7084#    addu $sp, $sp, 4
7088#    subu $sp, $sp, 4
7092#    sw $t0, ($sp)
# end: Call at 297.19; stackHeight = 24
7096#    lw $t0, ($sp)
7100#    addu $sp, $sp, 4
# end: CallStatement at 297.19; stackHeight = 20
# begin: Assign at 298.14; stackHeight = 20
# begin: IdentifierExp at 298.16; stackHeight = 20
7104#    lw $t0, 8($sp)
7108#    subu $sp, $sp, 4
7112#    sw $t0, ($sp)
# end: IdentifierExp at 298.16; stackHeight = 24
7116#    lw $t0, ($sp)
7120#    addu $sp, $sp, 4
7124#    sw $t0, 16($sp)
# end: Assign at 298.14; stackHeight = 20
# end: Block at 291.33; stackHeight = 20
7128#    j if_done_572
7132:  if_else_572:
# begin: Block at 300.8; stackHeight = 20
# begin: LocalVarDecl at 302.27; stackHeight = 20
# begin: Call at 302.60; stackHeight = 20
# begin: IdentifierExp at 302.48; stackHeight = 20
7132#    lw $t0, 4($sp)
7136#    subu $sp, $sp, 4
7140#    sw $t0, ($sp)
# end: IdentifierExp at 302.48; stackHeight = 24
7144#    lw $t0, 0($sp)
7148#    sw $s2, 0($sp)
7152#    move $s2, $t0
7156#    beq $s2, $zero, nullPtrException
7160#    lw $t0, -12($s2)
7164#    lw $t0, 36($t0)
7168#    jalr $t0 # asNonNull
7172#    addu $sp, $sp, 0
7176#    lw $s2, ($sp)
7180#    addu $sp, $sp, 4
7184#    subu $sp, $sp, 4
7188#    sw $t0, ($sp)
# end: Call at 302.60; stackHeight = 24
7192#"innerNephewNonNull"    lw $zero, ($sp) #**"innerNephewNonNull"
# end: LocalVarDecl at 302.27; stackHeight = 24
# begin: CallStatement at 303.14; stackHeight = 24
# begin: Call at 303.14; stackHeight = 24
# begin: IdentifierExp at 303.7; stackHeight = 24
7196#    lw $t0, 16($sp)
7200#    subu $sp, $sp, 4
7204#    sw $t0, ($sp)
# end: IdentifierExp at 303.7; stackHeight = 28
# begin: Call at 303.42; stackHeight = 28
# begin: IdentifierExp at 303.23; stackHeight = 28
7208#    lw $t0, 4($sp)
7212#    subu $sp, $sp, 4
7216#    sw $t0, ($sp)
# end: IdentifierExp at 303.23; stackHeight = 32
# begin: IdentifierExp at 303.50; stackHeight = 32
7220#    lw $t0, 40($sp)
7224#    subu $sp, $sp, 4
7228#    sw $t0, ($sp)
# end: IdentifierExp at 303.50; stackHeight = 36
7232#    lw $t0, 4($sp)
7236#    sw $s2, 4($sp)
7240#    move $s2, $t0
7244#    beq $s2, $zero, nullPtrException
7248#    lw $t0, -12($s2)
7252#    lw $t0, 76($t0)
7256#    jalr $t0 # getLeft
7260#    addu $sp, $sp, 4
7264#    lw $s2, ($sp)
7268#    addu $sp, $sp, 4
7272#    subu $sp, $sp, 4
7276#    sw $t0, ($sp)
# end: Call at 303.42; stackHeight = 32
# begin: IdentifierExp at 304.9; stackHeight = 32
7280#    lw $t0, 40($sp)
7284#    subu $sp, $sp, 4
7288#    sw $t0, ($sp)
# end: IdentifierExp at 304.9; stackHeight = 36
7292#    lw $t0, 8($sp)
7296#    sw $s2, 8($sp)
7300#    move $s2, $t0
7304#    beq $s2, $zero, nullPtrException
7308#    lw $t0, -12($s2)
7312#    lw $t0, 80($t0)
7316#    jalr $t0 # setRight
7320#    addu $sp, $sp, 8
7324#    lw $s2, ($sp)
7328#    addu $sp, $sp, 4
7332#    subu $sp, $sp, 4
7336#    sw $t0, ($sp)
# end: Call at 303.14; stackHeight = 28
7340#    lw $t0, ($sp)
7344#    addu $sp, $sp, 4
# end: CallStatement at 303.14; stackHeight = 24
# begin: CallStatement at 305.15; stackHeight = 24
# begin: Call at 305.15; stackHeight = 24
# begin: IdentifierExp at 305.7; stackHeight = 24
7348#    lw $t0, 12($sp)
7352#    subu $sp, $sp, 4
7356#    sw $t0, ($sp)
# end: IdentifierExp at 305.7; stackHeight = 28
# begin: Call at 305.42; stackHeight = 28
# begin: IdentifierExp at 305.23; stackHeight = 28
7360#    lw $t0, 4($sp)
7364#    subu $sp, $sp, 4
7368#    sw $t0, ($sp)
# end: IdentifierExp at 305.23; stackHeight = 32
# begin: IdentifierExp at 305.51; stackHeight = 32
7372#    lw $t0, 40($sp)
7376#    subu $sp, $sp, 4
7380#    sw $t0, ($sp)
# end: IdentifierExp at 305.51; stackHeight = 36
7384#    lw $t0, 4($sp)
7388#    sw $s2, 4($sp)
7392#    move $s2, $t0
7396#    beq $s2, $zero, nullPtrException
7400#    lw $t0, -12($s2)
7404#    lw $t0, 72($t0)
7408#    jalr $t0 # getRight
7412#    addu $sp, $sp, 4
7416#    lw $s2, ($sp)
7420#    addu $sp, $sp, 4
7424#    subu $sp, $sp, 4
7428#    sw $t0, ($sp)
# end: Call at 305.42; stackHeight = 32
# begin: IdentifierExp at 306.9; stackHeight = 32
7432#    lw $t0, 40($sp)
7436#    subu $sp, $sp, 4
7440#    sw $t0, ($sp)
# end: IdentifierExp at 306.9; stackHeight = 36
7444#    lw $t0, 8($sp)
7448#    sw $s2, 8($sp)
7452#    move $s2, $t0
7456#    beq $s2, $zero, nullPtrException
7460#    lw $t0, -12($s2)
7464#    lw $t0, 84($t0)
7468#    jalr $t0 # setLeft
7472#    addu $sp, $sp, 8
7476#    lw $s2, ($sp)
7480#    addu $sp, $sp, 4
7484#    subu $sp, $sp, 4
7488#    sw $t0, ($sp)
# end: Call at 305.15; stackHeight = 28
7492#    lw $t0, ($sp)
7496#    addu $sp, $sp, 4
# end: CallStatement at 305.15; stackHeight = 24
# begin: CallStatement at 307.26; stackHeight = 24
# begin: Call at 307.26; stackHeight = 24
# begin: IdentifierExp at 307.7; stackHeight = 24
7500#    lw $t0, 0($sp)
7504#    subu $sp, $sp, 4
7508#    sw $t0, ($sp)
# end: IdentifierExp at 307.7; stackHeight = 28
# begin: IdentifierExp at 307.34; stackHeight = 28
7512#    lw $t0, 20($sp)
7516#    subu $sp, $sp, 4
7520#    sw $t0, ($sp)
# end: IdentifierExp at 307.34; stackHeight = 32
# begin: IdentifierExp at 307.42; stackHeight = 32
7524#    lw $t0, 40($sp)
7528#    subu $sp, $sp, 4
7532#    sw $t0, ($sp)
# end: IdentifierExp at 307.42; stackHeight = 36
7536#    lw $t0, 8($sp)
7540#    sw $s2, 8($sp)
7544#    move $s2, $t0
7548#    beq $s2, $zero, nullPtrException
7552#    lw $t0, -12($s2)
7556#    lw $t0, 84($t0)
7560#    jalr $t0 # setLeft
7564#    addu $sp, $sp, 8
7568#    lw $s2, ($sp)
7572#    addu $sp, $sp, 4
7576#    subu $sp, $sp, 4
7580#    sw $t0, ($sp)
# end: Call at 307.26; stackHeight = 28
7584#    lw $t0, ($sp)
7588#    addu $sp, $sp, 4
# end: CallStatement at 307.26; stackHeight = 24
# begin: CallStatement at 308.26; stackHeight = 24
# begin: Call at 308.26; stackHeight = 24
# begin: IdentifierExp at 308.7; stackHeight = 24
7592#    lw $t0, 0($sp)
7596#    subu $sp, $sp, 4
7600#    sw $t0, ($sp)
# end: IdentifierExp at 308.7; stackHeight = 28
# begin: IdentifierExp at 308.35; stackHeight = 28
7604#    lw $t0, 16($sp)
7608#    subu $sp, $sp, 4
7612#    sw $t0, ($sp)
# end: IdentifierExp at 308.35; stackHeight = 32
# begin: IdentifierExp at 308.44; stackHeight = 32
7616#    lw $t0, 40($sp)
7620#    subu $sp, $sp, 4
7624#    sw $t0, ($sp)
# end: IdentifierExp at 308.44; stackHeight = 36
7628#    lw $t0, 8($sp)
7632#    sw $s2, 8($sp)
7636#    move $s2, $t0
7640#    beq $s2, $zero, nullPtrException
7644#    lw $t0, -12($s2)
7648#    lw $t0, 80($t0)
7652#    jalr $t0 # setRight
7656#    addu $sp, $sp, 8
7660#    lw $s2, ($sp)
7664#    addu $sp, $sp, 4
7668#    subu $sp, $sp, 4
7672#    sw $t0, ($sp)
# end: Call at 308.26; stackHeight = 28
7676#    lw $t0, ($sp)
7680#    addu $sp, $sp, 4
# end: CallStatement at 308.26; stackHeight = 24
# begin: CallStatement at 309.15; stackHeight = 24
# begin: Call at 309.15; stackHeight = 24
# begin: IdentifierExp at 309.7; stackHeight = 24
7684#    lw $t0, 12($sp)
7688#    subu $sp, $sp, 4
7692#    sw $t0, ($sp)
# end: IdentifierExp at 309.7; stackHeight = 28
7696#    lw $t0, 0($sp)
7700#    sw $s2, 0($sp)
7704#    move $s2, $t0
7708#    beq $s2, $zero, nullPtrException
7712#    lw $t0, -12($s2)
7716#    lw $t0, 60($t0)
7720#    jalr $t0 # setRed
7724#    addu $sp, $sp, 0
7728#    lw $s2, ($sp)
7732#    addu $sp, $sp, 4
7736#    subu $sp, $sp, 4
7740#    sw $t0, ($sp)
# end: Call at 309.15; stackHeight = 28
7744#    lw $t0, ($sp)
7748#    addu $sp, $sp, 4
# end: CallStatement at 309.15; stackHeight = 24
# begin: CallStatement at 310.19; stackHeight = 24
# begin: Call at 310.19; stackHeight = 24
# begin: IdentifierExp at 310.7; stackHeight = 24
7752#    lw $t0, 8($sp)
7756#    subu $sp, $sp, 4
7760#    sw $t0, ($sp)
# end: IdentifierExp at 310.7; stackHeight = 28
7764#    lw $t0, 0($sp)
7768#    sw $s2, 0($sp)
7772#    move $s2, $t0
7776#    beq $s2, $zero, nullPtrException
7780#    lw $t0, -12($s2)
7784#    lw $t0, 20($t0)
7788#    jalr $t0 # setBlack
7792#    addu $sp, $sp, 0
7796#    lw $s2, ($sp)
7800#    addu $sp, $sp, 4
7804#    subu $sp, $sp, 4
7808#    sw $t0, ($sp)
# end: Call at 310.19; stackHeight = 28
7812#    lw $t0, ($sp)
7816#    addu $sp, $sp, 4
# end: CallStatement at 310.19; stackHeight = 24
# begin: Assign at 311.14; stackHeight = 24
# begin: IdentifierExp at 311.16; stackHeight = 24
7820#    lw $t0, 12($sp)
7824#    subu $sp, $sp, 4
7828#    sw $t0, ($sp)
# end: IdentifierExp at 311.16; stackHeight = 28
7832#    lw $t0, ($sp)
7836#    addu $sp, $sp, 4
7840#    sw $t0, 20($sp)
# end: Assign at 311.14; stackHeight = 24
7844#    addu $sp, $sp, 4
# end: Block at 300.8; stackHeight = 20
7848:  if_done_572:
# end: If at 291.8; stackHeight = 20
7848:  if_done_573:
# end: If at 285.3; stackHeight = 20
# end: Block at 284.26; stackHeight = 20
7848#    j if_done_713
7852:  if_else_713:
# begin: If at 314.11; stackHeight = 20
# begin: Call at 314.23; stackHeight = 20
# begin: IdentifierExp at 314.15; stackHeight = 20
7852#    lw $t0, 8($sp)
7856#    subu $sp, $sp, 4
7860#    sw $t0, ($sp)
# end: IdentifierExp at 314.15; stackHeight = 24
7864#    lw $t0, 0($sp)
7868#    sw $s2, 0($sp)
7872#    move $s2, $t0
7876#    beq $s2, $zero, nullPtrException
7880#    lw $t0, -12($s2)
7884#    lw $t0, 24($t0)
7888#    jalr $t0 # isRed
7892#    addu $sp, $sp, 0
7896#    lw $s2, ($sp)
7900#    addu $sp, $sp, 4
7904#    subu $sp, $sp, 4
7908#    sw $t0, ($sp)
# end: Call at 314.23; stackHeight = 24
7912#    lw $t0, ($sp)
7916#    addu $sp, $sp, 4
7920#    beq $t0, $zero, if_else_712
# begin: Block at 314.32; stackHeight = 20
# begin: LocalVarDecl at 315.23; stackHeight = 20
# begin: Call at 315.56; stackHeight = 20
# begin: IdentifierExp at 315.44; stackHeight = 20
7924#    lw $t0, 4($sp)
7928#    subu $sp, $sp, 4
7932#    sw $t0, ($sp)
# end: IdentifierExp at 315.44; stackHeight = 24
7936#    lw $t0, 0($sp)
7940#    sw $s2, 0($sp)
7944#    move $s2, $t0
7948#    beq $s2, $zero, nullPtrException
7952#    lw $t0, -12($s2)
7956#    lw $t0, 36($t0)
7960#    jalr $t0 # asNonNull
7964#    addu $sp, $sp, 0
7968#    lw $s2, ($sp)
7972#    addu $sp, $sp, 4
7976#    subu $sp, $sp, 4
7980#    sw $t0, ($sp)
# end: Call at 315.56; stackHeight = 24
7984#"innerNephewNonNull"    lw $zero, ($sp) #**"innerNephewNonNull"
# end: LocalVarDecl at 315.23; stackHeight = 24
# begin: LocalVarDecl at 316.16; stackHeight = 24
# begin: Call at 317.26; stackHeight = 24
# begin: IdentifierExp at 317.7; stackHeight = 24
7988#    lw $t0, 0($sp)
7992#    subu $sp, $sp, 4
7996#    sw $t0, ($sp)
# end: IdentifierExp at 317.7; stackHeight = 28
# begin: IdentifierExp at 317.34; stackHeight = 28
8000#    lw $t0, 36($sp)
8004#    subu $sp, $sp, 4
8008#    sw $t0, ($sp)
# end: IdentifierExp at 317.34; stackHeight = 32
8012#    lw $t0, 4($sp)
8016#    sw $s2, 4($sp)
8020#    move $s2, $t0
8024#    beq $s2, $zero, nullPtrException
8028#    lw $t0, -12($s2)
8032#    lw $t0, 76($t0)
8036#    jalr $t0 # getLeft
8040#    addu $sp, $sp, 4
8044#    lw $s2, ($sp)
8048#    addu $sp, $sp, 4
8052#    subu $sp, $sp, 4
8056#    sw $t0, ($sp)
# end: Call at 317.26; stackHeight = 28
8060#"innerGrandNephew"    lw $zero, ($sp) #**"innerGrandNephew"
# end: LocalVarDecl at 316.16; stackHeight = 28
# begin: If at 318.3; stackHeight = 28
# begin: Call at 318.24; stackHeight = 28
# begin: IdentifierExp at 318.7; stackHeight = 28
8064#    lw $t0, 0($sp)
8068#    subu $sp, $sp, 4
8072#    sw $t0, ($sp)
# end: IdentifierExp at 318.7; stackHeight = 32
8076#    lw $t0, 0($sp)
8080#    sw $s2, 0($sp)
8084#    move $s2, $t0
8088#    beq $s2, $zero, nullPtrException
8092#    lw $t0, -12($s2)
8096#    lw $t0, 24($t0)
8100#    jalr $t0 # isRed
8104#    addu $sp, $sp, 0
8108#    lw $s2, ($sp)
8112#    addu $sp, $sp, 4
8116#    subu $sp, $sp, 4
8120#    sw $t0, ($sp)
# end: Call at 318.24; stackHeight = 32
8124#    lw $t0, ($sp)
8128#    addu $sp, $sp, 4
8132#    beq $t0, $zero, if_else_638
# begin: Block at 318.33; stackHeight = 28
# begin: LocalVarDecl at 320.27; stackHeight = 28
# begin: Call at 321.21; stackHeight = 28
# begin: IdentifierExp at 321.4; stackHeight = 28
8136#    lw $t0, 0($sp)
8140#    subu $sp, $sp, 4
8144#    sw $t0, ($sp)
# end: IdentifierExp at 321.4; stackHeight = 32
8148#    lw $t0, 0($sp)
8152#    sw $s2, 0($sp)
8156#    move $s2, $t0
8160#    beq $s2, $zero, nullPtrException
8164#    lw $t0, -12($s2)
8168#    lw $t0, 36($t0)
8172#    jalr $t0 # asNonNull
8176#    addu $sp, $sp, 0
8180#    lw $s2, ($sp)
8184#    addu $sp, $sp, 4
8188#    subu $sp, $sp, 4
8192#    sw $t0, ($sp)
# end: Call at 321.21; stackHeight = 32
8196#"innerGrandNephewNonNull"    lw $zero, ($sp) #**"innerGrandNephewNonNull"
# end: LocalVarDecl at 320.27; stackHeight = 32
# begin: CallStatement at 322.14; stackHeight = 32
# begin: Call at 322.14; stackHeight = 32
# begin: IdentifierExp at 322.7; stackHeight = 32
8200#    lw $t0, 24($sp)
8204#    subu $sp, $sp, 4
8208#    sw $t0, ($sp)
# end: IdentifierExp at 322.7; stackHeight = 36
# begin: Call at 322.47; stackHeight = 36
# begin: IdentifierExp at 322.23; stackHeight = 36
8212#    lw $t0, 4($sp)
8216#    subu $sp, $sp, 4
8220#    sw $t0, ($sp)
# end: IdentifierExp at 322.23; stackHeight = 40
# begin: IdentifierExp at 322.55; stackHeight = 40
8224#    lw $t0, 48($sp)
8228#    subu $sp, $sp, 4
8232#    sw $t0, ($sp)
# end: IdentifierExp at 322.55; stackHeight = 44
8236#    lw $t0, 4($sp)
8240#    sw $s2, 4($sp)
8244#    move $s2, $t0
8248#    beq $s2, $zero, nullPtrException
8252#    lw $t0, -12($s2)
8256#    lw $t0, 76($t0)
8260#    jalr $t0 # getLeft
8264#    addu $sp, $sp, 4
8268#    lw $s2, ($sp)
8272#    addu $sp, $sp, 4
8276#    subu $sp, $sp, 4
8280#    sw $t0, ($sp)
# end: Call at 322.47; stackHeight = 40
# begin: IdentifierExp at 323.9; stackHeight = 40
8284#    lw $t0, 48($sp)
8288#    subu $sp, $sp, 4
8292#    sw $t0, ($sp)
# end: IdentifierExp at 323.9; stackHeight = 44
8296#    lw $t0, 8($sp)
8300#    sw $s2, 8($sp)
8304#    move $s2, $t0
8308#    beq $s2, $zero, nullPtrException
8312#    lw $t0, -12($s2)
8316#    lw $t0, 80($t0)
8320#    jalr $t0 # setRight
8324#    addu $sp, $sp, 8
8328#    lw $s2, ($sp)
8332#    addu $sp, $sp, 4
8336#    subu $sp, $sp, 4
8340#    sw $t0, ($sp)
# end: Call at 322.14; stackHeight = 36
8344#    lw $t0, ($sp)
8348#    addu $sp, $sp, 4
# end: CallStatement at 322.14; stackHeight = 32
# begin: CallStatement at 324.26; stackHeight = 32
# begin: Call at 324.26; stackHeight = 32
# begin: IdentifierExp at 324.7; stackHeight = 32
8352#    lw $t0, 8($sp)
8356#    subu $sp, $sp, 4
8360#    sw $t0, ($sp)
# end: IdentifierExp at 324.7; stackHeight = 36
# begin: Call at 325.37; stackHeight = 36
# begin: IdentifierExp at 325.13; stackHeight = 36
8364#    lw $t0, 4($sp)
8368#    subu $sp, $sp, 4
8372#    sw $t0, ($sp)
# end: IdentifierExp at 325.13; stackHeight = 40
# begin: IdentifierExp at 325.46; stackHeight = 40
8376#    lw $t0, 48($sp)
8380#    subu $sp, $sp, 4
8384#    sw $t0, ($sp)
# end: IdentifierExp at 325.46; stackHeight = 44
8388#    lw $t0, 4($sp)
8392#    sw $s2, 4($sp)
8396#    move $s2, $t0
8400#    beq $s2, $zero, nullPtrException
8404#    lw $t0, -12($s2)
8408#    lw $t0, 72($t0)
8412#    jalr $t0 # getRight
8416#    addu $sp, $sp, 4
8420#    lw $s2, ($sp)
8424#    addu $sp, $sp, 4
8428#    subu $sp, $sp, 4
8432#    sw $t0, ($sp)
# end: Call at 325.37; stackHeight = 40
# begin: IdentifierExp at 326.13; stackHeight = 40
8436#    lw $t0, 48($sp)
8440#    subu $sp, $sp, 4
8444#    sw $t0, ($sp)
# end: IdentifierExp at 326.13; stackHeight = 44
8448#    lw $t0, 8($sp)
8452#    sw $s2, 8($sp)
8456#    move $s2, $t0
8460#    beq $s2, $zero, nullPtrException
8464#    lw $t0, -12($s2)
8468#    lw $t0, 84($t0)
8472#    jalr $t0 # setLeft
8476#    addu $sp, $sp, 8
8480#    lw $s2, ($sp)
8484#    addu $sp, $sp, 4
8488#    subu $sp, $sp, 4
8492#    sw $t0, ($sp)
# end: Call at 324.26; stackHeight = 36
8496#    lw $t0, ($sp)
8500#    addu $sp, $sp, 4
# end: CallStatement at 324.26; stackHeight = 32
# begin: CallStatement at 327.31; stackHeight = 32
# begin: Call at 327.31; stackHeight = 32
# begin: IdentifierExp at 327.7; stackHeight = 32
8504#    lw $t0, 0($sp)
8508#    subu $sp, $sp, 4
8512#    sw $t0, ($sp)
# end: IdentifierExp at 327.7; stackHeight = 36
8516#    lw $t0, 0($sp)
8520#    sw $s2, 0($sp)
8524#    move $s2, $t0
8528#    beq $s2, $zero, nullPtrException
8532#    lw $t0, -12($s2)
8536#    lw $t0, 20($t0)
8540#    jalr $t0 # setBlack
8544#    addu $sp, $sp, 0
8548#    lw $s2, ($sp)
8552#    addu $sp, $sp, 4
8556#    subu $sp, $sp, 4
8560#    sw $t0, ($sp)
# end: Call at 327.31; stackHeight = 36
8564#    lw $t0, ($sp)
8568#    addu $sp, $sp, 4
# end: CallStatement at 327.31; stackHeight = 32
# begin: Assign at 328.14; stackHeight = 32
# begin: IdentifierExp at 328.16; stackHeight = 32
8572#    lw $t0, 0($sp)
8576#    subu $sp, $sp, 4
8580#    sw $t0, ($sp)
# end: IdentifierExp at 328.16; stackHeight = 36
8584#    lw $t0, ($sp)
8588#    addu $sp, $sp, 4
8592#    sw $t0, 28($sp)
# end: Assign at 328.14; stackHeight = 32
8596#    addu $sp, $sp, 4
# end: Block at 318.33; stackHeight = 28
8600#    j if_done_638
8604:  if_else_638:
# begin: Block at 330.8; stackHeight = 28
# begin: CallStatement at 332.14; stackHeight = 28
# begin: Call at 332.14; stackHeight = 28
# begin: IdentifierExp at 332.7; stackHeight = 28
8604#    lw $t0, 20($sp)
8608#    subu $sp, $sp, 4
8612#    sw $t0, ($sp)
# end: IdentifierExp at 332.7; stackHeight = 32
# begin: Call at 332.42; stackHeight = 32
# begin: IdentifierExp at 332.23; stackHeight = 32
8616#    lw $t0, 8($sp)
8620#    subu $sp, $sp, 4
8624#    sw $t0, ($sp)
# end: IdentifierExp at 332.23; stackHeight = 36
# begin: IdentifierExp at 332.50; stackHeight = 36
8628#    lw $t0, 44($sp)
8632#    subu $sp, $sp, 4
8636#    sw $t0, ($sp)
# end: IdentifierExp at 332.50; stackHeight = 40
8640#    lw $t0, 4($sp)
8644#    sw $s2, 4($sp)
8648#    move $s2, $t0
8652#    beq $s2, $zero, nullPtrException
8656#    lw $t0, -12($s2)
8660#    lw $t0, 76($t0)
8664#    jalr $t0 # getLeft
8668#    addu $sp, $sp, 4
8672#    lw $s2, ($sp)
8676#    addu $sp, $sp, 4
8680#    subu $sp, $sp, 4
8684#    sw $t0, ($sp)
# end: Call at 332.42; stackHeight = 36
# begin: IdentifierExp at 333.9; stackHeight = 36
8688#    lw $t0, 44($sp)
8692#    subu $sp, $sp, 4
8696#    sw $t0, ($sp)
# end: IdentifierExp at 333.9; stackHeight = 40
8700#    lw $t0, 8($sp)
8704#    sw $s2, 8($sp)
8708#    move $s2, $t0
8712#    beq $s2, $zero, nullPtrException
8716#    lw $t0, -12($s2)
8720#    lw $t0, 80($t0)
8724#    jalr $t0 # setRight
8728#    addu $sp, $sp, 8
8732#    lw $s2, ($sp)
8736#    addu $sp, $sp, 4
8740#    subu $sp, $sp, 4
8744#    sw $t0, ($sp)
# end: Call at 332.14; stackHeight = 32
8748#    lw $t0, ($sp)
8752#    addu $sp, $sp, 4
# end: CallStatement at 332.14; stackHeight = 28
# begin: CallStatement at 334.26; stackHeight = 28
# begin: Call at 334.26; stackHeight = 28
# begin: IdentifierExp at 334.7; stackHeight = 28
8756#    lw $t0, 4($sp)
8760#    subu $sp, $sp, 4
8764#    sw $t0, ($sp)
# end: IdentifierExp at 334.7; stackHeight = 32
# begin: IdentifierExp at 334.34; stackHeight = 32
8768#    lw $t0, 24($sp)
8772#    subu $sp, $sp, 4
8776#    sw $t0, ($sp)
# end: IdentifierExp at 334.34; stackHeight = 36
# begin: IdentifierExp at 334.42; stackHeight = 36
8780#    lw $t0, 44($sp)
8784#    subu $sp, $sp, 4
8788#    sw $t0, ($sp)
# end: IdentifierExp at 334.42; stackHeight = 40
8792#    lw $t0, 8($sp)
8796#    sw $s2, 8($sp)
8800#    move $s2, $t0
8804#    beq $s2, $zero, nullPtrException
8808#    lw $t0, -12($s2)
8812#    lw $t0, 84($t0)
8816#    jalr $t0 # setLeft
8820#    addu $sp, $sp, 8
8824#    lw $s2, ($sp)
8828#    addu $sp, $sp, 4
8832#    subu $sp, $sp, 4
8836#    sw $t0, ($sp)
# end: Call at 334.26; stackHeight = 32
8840#    lw $t0, ($sp)
8844#    addu $sp, $sp, 4
# end: CallStatement at 334.26; stackHeight = 28
# begin: CallStatement at 335.14; stackHeight = 28
# begin: Call at 335.14; stackHeight = 28
# begin: IdentifierExp at 335.7; stackHeight = 28
8848#    lw $t0, 20($sp)
8852#    subu $sp, $sp, 4
8856#    sw $t0, ($sp)
# end: IdentifierExp at 335.7; stackHeight = 32
8860#    lw $t0, 0($sp)
8864#    sw $s2, 0($sp)
8868#    move $s2, $t0
8872#    beq $s2, $zero, nullPtrException
8876#    lw $t0, -12($s2)
8880#    lw $t0, 60($t0)
8884#    jalr $t0 # setRed
8888#    addu $sp, $sp, 0
8892#    lw $s2, ($sp)
8896#    addu $sp, $sp, 4
8900#    subu $sp, $sp, 4
8904#    sw $t0, ($sp)
# end: Call at 335.14; stackHeight = 32
8908#    lw $t0, ($sp)
8912#    addu $sp, $sp, 4
# end: CallStatement at 335.14; stackHeight = 28
# begin: CallStatement at 336.15; stackHeight = 28
# begin: Call at 336.15; stackHeight = 28
# begin: IdentifierExp at 336.7; stackHeight = 28
8916#    lw $t0, 16($sp)
8920#    subu $sp, $sp, 4
8924#    sw $t0, ($sp)
# end: IdentifierExp at 336.7; stackHeight = 32
8928#    lw $t0, 0($sp)
8932#    sw $s2, 0($sp)
8936#    move $s2, $t0
8940#    beq $s2, $zero, nullPtrException
8944#    lw $t0, -12($s2)
8948#    lw $t0, 20($t0)
8952#    jalr $t0 # setBlack
8956#    addu $sp, $sp, 0
8960#    lw $s2, ($sp)
8964#    addu $sp, $sp, 4
8968#    subu $sp, $sp, 4
8972#    sw $t0, ($sp)
# end: Call at 336.15; stackHeight = 32
8976#    lw $t0, ($sp)
8980#    addu $sp, $sp, 4
# end: CallStatement at 336.15; stackHeight = 28
# begin: Assign at 337.14; stackHeight = 28
# begin: IdentifierExp at 337.16; stackHeight = 28
8984#    lw $t0, 16($sp)
8988#    subu $sp, $sp, 4
8992#    sw $t0, ($sp)
# end: IdentifierExp at 337.16; stackHeight = 32
8996#    lw $t0, ($sp)
9000#    addu $sp, $sp, 4
9004#    sw $t0, 24($sp)
# end: Assign at 337.14; stackHeight = 28
# end: Block at 330.8; stackHeight = 28
9008:  if_done_638:
# end: If at 318.3; stackHeight = 28
9008#    addu $sp, $sp, 8
# end: Block at 314.32; stackHeight = 20
9012#    j if_done_712
9016:  if_else_712:
# begin: Block at 340.11; stackHeight = 20
# begin: If at 341.3; stackHeight = 20
# begin: Call at 341.19; stackHeight = 20
# begin: IdentifierExp at 341.7; stackHeight = 20
9016#    lw $t0, 0($sp)
9020#    subu $sp, $sp, 4
9024#    sw $t0, ($sp)
# end: IdentifierExp at 341.7; stackHeight = 24
9028#    lw $t0, 0($sp)
9032#    sw $s2, 0($sp)
9036#    move $s2, $t0
9040#    beq $s2, $zero, nullPtrException
9044#    lw $t0, -12($s2)
9048#    lw $t0, 24($t0)
9052#    jalr $t0 # isRed
9056#    addu $sp, $sp, 0
9060#    lw $s2, ($sp)
9064#    addu $sp, $sp, 4
9068#    subu $sp, $sp, 4
9072#    sw $t0, ($sp)
# end: Call at 341.19; stackHeight = 24
9076#    lw $t0, ($sp)
9080#    addu $sp, $sp, 4
9084#    beq $t0, $zero, if_else_710
# begin: Block at 341.28; stackHeight = 20
# begin: CallStatement at 343.14; stackHeight = 20
# begin: Call at 343.14; stackHeight = 20
# begin: IdentifierExp at 343.7; stackHeight = 20
9088#    lw $t0, 12($sp)
9092#    subu $sp, $sp, 4
9096#    sw $t0, ($sp)
# end: IdentifierExp at 343.7; stackHeight = 24
# begin: Call at 343.31; stackHeight = 24
# begin: IdentifierExp at 343.23; stackHeight = 24
9100#    lw $t0, 12($sp)
9104#    subu $sp, $sp, 4
9108#    sw $t0, ($sp)
# end: IdentifierExp at 343.23; stackHeight = 28
# begin: IdentifierExp at 343.39; stackHeight = 28
9112#    lw $t0, 36($sp)
9116#    subu $sp, $sp, 4
9120#    sw $t0, ($sp)
# end: IdentifierExp at 343.39; stackHeight = 32
9124#    lw $t0, 4($sp)
9128#    sw $s2, 4($sp)
9132#    move $s2, $t0
9136#    beq $s2, $zero, nullPtrException
9140#    lw $t0, -12($s2)
9144#    lw $t0, 76($t0)
9148#    jalr $t0 # getLeft
9152#    addu $sp, $sp, 4
9156#    lw $s2, ($sp)
9160#    addu $sp, $sp, 4
9164#    subu $sp, $sp, 4
9168#    sw $t0, ($sp)
# end: Call at 343.31; stackHeight = 28
# begin: IdentifierExp at 343.55; stackHeight = 28
9172#    lw $t0, 36($sp)
9176#    subu $sp, $sp, 4
9180#    sw $t0, ($sp)
# end: IdentifierExp at 343.55; stackHeight = 32
9184#    lw $t0, 8($sp)
9188#    sw $s2, 8($sp)
9192#    move $s2, $t0
9196#    beq $s2, $zero, nullPtrException
9200#    lw $t0, -12($s2)
9204#    lw $t0, 80($t0)
9208#    jalr $t0 # setRight
9212#    addu $sp, $sp, 8
9216#    lw $s2, ($sp)
9220#    addu $sp, $sp, 4
9224#    subu $sp, $sp, 4
9228#    sw $t0, ($sp)
# end: Call at 343.14; stackHeight = 24
9232#    lw $t0, ($sp)
9236#    addu $sp, $sp, 4
# end: CallStatement at 343.14; stackHeight = 20
# begin: CallStatement at 344.15; stackHeight = 20
# begin: Call at 344.15; stackHeight = 20
# begin: IdentifierExp at 344.7; stackHeight = 20
9240#    lw $t0, 8($sp)
9244#    subu $sp, $sp, 4
9248#    sw $t0, ($sp)
# end: IdentifierExp at 344.7; stackHeight = 24
# begin: IdentifierExp at 344.23; stackHeight = 24
9252#    lw $t0, 16($sp)
9256#    subu $sp, $sp, 4
9260#    sw $t0, ($sp)
# end: IdentifierExp at 344.23; stackHeight = 28
# begin: IdentifierExp at 344.31; stackHeight = 28
9264#    lw $t0, 36($sp)
9268#    subu $sp, $sp, 4
9272#    sw $t0, ($sp)
# end: IdentifierExp at 344.31; stackHeight = 32
9276#    lw $t0, 8($sp)
9280#    sw $s2, 8($sp)
9284#    move $s2, $t0
9288#    beq $s2, $zero, nullPtrException
9292#    lw $t0, -12($s2)
9296#    lw $t0, 84($t0)
9300#    jalr $t0 # setLeft
9304#    addu $sp, $sp, 8
9308#    lw $s2, ($sp)
9312#    addu $sp, $sp, 4
9316#    subu $sp, $sp, 4
9320#    sw $t0, ($sp)
# end: Call at 344.15; stackHeight = 24
9324#    lw $t0, ($sp)
9328#    addu $sp, $sp, 4
# end: CallStatement at 344.15; stackHeight = 20
# begin: CallStatement at 345.31; stackHeight = 20
# begin: Call at 345.31; stackHeight = 20
# begin: Call at 345.19; stackHeight = 20
# begin: IdentifierExp at 345.7; stackHeight = 20
9332#    lw $t0, 0($sp)
9336#    subu $sp, $sp, 4
9340#    sw $t0, ($sp)
# end: IdentifierExp at 345.7; stackHeight = 24
9344#    lw $t0, 0($sp)
9348#    sw $s2, 0($sp)
9352#    move $s2, $t0
9356#    beq $s2, $zero, nullPtrException
9360#    lw $t0, -12($s2)
9364#    lw $t0, 36($t0)
9368#    jalr $t0 # asNonNull
9372#    addu $sp, $sp, 0
9376#    lw $s2, ($sp)
9380#    addu $sp, $sp, 4
9384#    subu $sp, $sp, 4
9388#    sw $t0, ($sp)
# end: Call at 345.19; stackHeight = 24
9392#    lw $t0, 0($sp)
9396#    sw $s2, 0($sp)
9400#    move $s2, $t0
9404#    beq $s2, $zero, nullPtrException
9408#    lw $t0, -12($s2)
9412#    lw $t0, 20($t0)
9416#    jalr $t0 # setBlack
9420#    addu $sp, $sp, 0
9424#    lw $s2, ($sp)
9428#    addu $sp, $sp, 4
9432#    subu $sp, $sp, 4
9436#    sw $t0, ($sp)
# end: Call at 345.31; stackHeight = 24
9440#    lw $t0, ($sp)
9444#    addu $sp, $sp, 4
# end: CallStatement at 345.31; stackHeight = 20
# begin: Assign at 346.14; stackHeight = 20
# begin: IdentifierExp at 346.16; stackHeight = 20
9448#    lw $t0, 8($sp)
9452#    subu $sp, $sp, 4
9456#    sw $t0, ($sp)
# end: IdentifierExp at 346.16; stackHeight = 24
9460#    lw $t0, ($sp)
9464#    addu $sp, $sp, 4
9468#    sw $t0, 16($sp)
# end: Assign at 346.14; stackHeight = 20
# end: Block at 341.28; stackHeight = 20
9472#    j if_done_710
9476:  if_else_710:
# begin: If at 348.8; stackHeight = 20
# begin: Call at 348.24; stackHeight = 20
# begin: IdentifierExp at 348.12; stackHeight = 20
9476#    lw $t0, 4($sp)
9480#    subu $sp, $sp, 4
9484#    sw $t0, ($sp)
# end: IdentifierExp at 348.12; stackHeight = 24
9488#    lw $t0, 0($sp)
9492#    sw $s2, 0($sp)
9496#    move $s2, $t0
9500#    beq $s2, $zero, nullPtrException
9504#    lw $t0, -12($s2)
9508#    lw $t0, 24($t0)
9512#    jalr $t0 # isRed
9516#    addu $sp, $sp, 0
9520#    lw $s2, ($sp)
9524#    addu $sp, $sp, 4
9528#    subu $sp, $sp, 4
9532#    sw $t0, ($sp)
# end: Call at 348.24; stackHeight = 24
9536#    lw $t0, ($sp)
9540#    addu $sp, $sp, 4
9544#    beq $t0, $zero, if_else_709
# begin: Block at 348.33; stackHeight = 20
# begin: LocalVarDecl at 350.27; stackHeight = 20
# begin: Call at 350.60; stackHeight = 20
# begin: IdentifierExp at 350.48; stackHeight = 20
9548#    lw $t0, 4($sp)
9552#    subu $sp, $sp, 4
9556#    sw $t0, ($sp)
# end: IdentifierExp at 350.48; stackHeight = 24
9560#    lw $t0, 0($sp)
9564#    sw $s2, 0($sp)
9568#    move $s2, $t0
9572#    beq $s2, $zero, nullPtrException
9576#    lw $t0, -12($s2)
9580#    lw $t0, 36($t0)
9584#    jalr $t0 # asNonNull
9588#    addu $sp, $sp, 0
9592#    lw $s2, ($sp)
9596#    addu $sp, $sp, 4
9600#    subu $sp, $sp, 4
9604#    sw $t0, ($sp)
# end: Call at 350.60; stackHeight = 24
9608#"innerNephewNonNull"    lw $zero, ($sp) #**"innerNephewNonNull"
# end: LocalVarDecl at 350.27; stackHeight = 24
# begin: CallStatement at 351.14; stackHeight = 24
# begin: Call at 351.14; stackHeight = 24
# begin: IdentifierExp at 351.7; stackHeight = 24
9612#    lw $t0, 16($sp)
9616#    subu $sp, $sp, 4
9620#    sw $t0, ($sp)
# end: IdentifierExp at 351.7; stackHeight = 28
# begin: Call at 351.42; stackHeight = 28
# begin: IdentifierExp at 351.23; stackHeight = 28
9624#    lw $t0, 4($sp)
9628#    subu $sp, $sp, 4
9632#    sw $t0, ($sp)
# end: IdentifierExp at 351.23; stackHeight = 32
# begin: IdentifierExp at 351.50; stackHeight = 32
9636#    lw $t0, 40($sp)
9640#    subu $sp, $sp, 4
9644#    sw $t0, ($sp)
# end: IdentifierExp at 351.50; stackHeight = 36
9648#    lw $t0, 4($sp)
9652#    sw $s2, 4($sp)
9656#    move $s2, $t0
9660#    beq $s2, $zero, nullPtrException
9664#    lw $t0, -12($s2)
9668#    lw $t0, 76($t0)
9672#    jalr $t0 # getLeft
9676#    addu $sp, $sp, 4
9680#    lw $s2, ($sp)
9684#    addu $sp, $sp, 4
9688#    subu $sp, $sp, 4
9692#    sw $t0, ($sp)
# end: Call at 351.42; stackHeight = 32
# begin: IdentifierExp at 352.9; stackHeight = 32
9696#    lw $t0, 40($sp)
9700#    subu $sp, $sp, 4
9704#    sw $t0, ($sp)
# end: IdentifierExp at 352.9; stackHeight = 36
9708#    lw $t0, 8($sp)
9712#    sw $s2, 8($sp)
9716#    move $s2, $t0
9720#    beq $s2, $zero, nullPtrException
9724#    lw $t0, -12($s2)
9728#    lw $t0, 80($t0)
9732#    jalr $t0 # setRight
9736#    addu $sp, $sp, 8
9740#    lw $s2, ($sp)
9744#    addu $sp, $sp, 4
9748#    subu $sp, $sp, 4
9752#    sw $t0, ($sp)
# end: Call at 351.14; stackHeight = 28
9756#    lw $t0, ($sp)
9760#    addu $sp, $sp, 4
# end: CallStatement at 351.14; stackHeight = 24
# begin: CallStatement at 353.15; stackHeight = 24
# begin: Call at 353.15; stackHeight = 24
# begin: IdentifierExp at 353.7; stackHeight = 24
9764#    lw $t0, 12($sp)
9768#    subu $sp, $sp, 4
9772#    sw $t0, ($sp)
# end: IdentifierExp at 353.7; stackHeight = 28
# begin: Call at 353.42; stackHeight = 28
# begin: IdentifierExp at 353.23; stackHeight = 28
9776#    lw $t0, 4($sp)
9780#    subu $sp, $sp, 4
9784#    sw $t0, ($sp)
# end: IdentifierExp at 353.23; stackHeight = 32
# begin: IdentifierExp at 353.51; stackHeight = 32
9788#    lw $t0, 40($sp)
9792#    subu $sp, $sp, 4
9796#    sw $t0, ($sp)
# end: IdentifierExp at 353.51; stackHeight = 36
9800#    lw $t0, 4($sp)
9804#    sw $s2, 4($sp)
9808#    move $s2, $t0
9812#    beq $s2, $zero, nullPtrException
9816#    lw $t0, -12($s2)
9820#    lw $t0, 72($t0)
9824#    jalr $t0 # getRight
9828#    addu $sp, $sp, 4
9832#    lw $s2, ($sp)
9836#    addu $sp, $sp, 4
9840#    subu $sp, $sp, 4
9844#    sw $t0, ($sp)
# end: Call at 353.42; stackHeight = 32
# begin: IdentifierExp at 354.9; stackHeight = 32
9848#    lw $t0, 40($sp)
9852#    subu $sp, $sp, 4
9856#    sw $t0, ($sp)
# end: IdentifierExp at 354.9; stackHeight = 36
9860#    lw $t0, 8($sp)
9864#    sw $s2, 8($sp)
9868#    move $s2, $t0
9872#    beq $s2, $zero, nullPtrException
9876#    lw $t0, -12($s2)
9880#    lw $t0, 84($t0)
9884#    jalr $t0 # setLeft
9888#    addu $sp, $sp, 8
9892#    lw $s2, ($sp)
9896#    addu $sp, $sp, 4
9900#    subu $sp, $sp, 4
9904#    sw $t0, ($sp)
# end: Call at 353.15; stackHeight = 28
9908#    lw $t0, ($sp)
9912#    addu $sp, $sp, 4
# end: CallStatement at 353.15; stackHeight = 24
# begin: CallStatement at 355.26; stackHeight = 24
# begin: Call at 355.26; stackHeight = 24
# begin: IdentifierExp at 355.7; stackHeight = 24
9916#    lw $t0, 0($sp)
9920#    subu $sp, $sp, 4
9924#    sw $t0, ($sp)
# end: IdentifierExp at 355.7; stackHeight = 28
# begin: IdentifierExp at 355.34; stackHeight = 28
9928#    lw $t0, 20($sp)
9932#    subu $sp, $sp, 4
9936#    sw $t0, ($sp)
# end: IdentifierExp at 355.34; stackHeight = 32
# begin: IdentifierExp at 355.42; stackHeight = 32
9940#    lw $t0, 40($sp)
9944#    subu $sp, $sp, 4
9948#    sw $t0, ($sp)
# end: IdentifierExp at 355.42; stackHeight = 36
9952#    lw $t0, 8($sp)
9956#    sw $s2, 8($sp)
9960#    move $s2, $t0
9964#    beq $s2, $zero, nullPtrException
9968#    lw $t0, -12($s2)
9972#    lw $t0, 84($t0)
9976#    jalr $t0 # setLeft
9980#    addu $sp, $sp, 8
9984#    lw $s2, ($sp)
9988#    addu $sp, $sp, 4
9992#    subu $sp, $sp, 4
9996#    sw $t0, ($sp)
# end: Call at 355.26; stackHeight = 28
10000#    lw $t0, ($sp)
10004#    addu $sp, $sp, 4
# end: CallStatement at 355.26; stackHeight = 24
# begin: CallStatement at 356.26; stackHeight = 24
# begin: Call at 356.26; stackHeight = 24
# begin: IdentifierExp at 356.7; stackHeight = 24
10008#    lw $t0, 0($sp)
10012#    subu $sp, $sp, 4
10016#    sw $t0, ($sp)
# end: IdentifierExp at 356.7; stackHeight = 28
# begin: IdentifierExp at 356.35; stackHeight = 28
10020#    lw $t0, 16($sp)
10024#    subu $sp, $sp, 4
10028#    sw $t0, ($sp)
# end: IdentifierExp at 356.35; stackHeight = 32
# begin: IdentifierExp at 356.44; stackHeight = 32
10032#    lw $t0, 40($sp)
10036#    subu $sp, $sp, 4
10040#    sw $t0, ($sp)
# end: IdentifierExp at 356.44; stackHeight = 36
10044#    lw $t0, 8($sp)
10048#    sw $s2, 8($sp)
10052#    move $s2, $t0
10056#    beq $s2, $zero, nullPtrException
10060#    lw $t0, -12($s2)
10064#    lw $t0, 80($t0)
10068#    jalr $t0 # setRight
10072#    addu $sp, $sp, 8
10076#    lw $s2, ($sp)
10080#    addu $sp, $sp, 4
10084#    subu $sp, $sp, 4
10088#    sw $t0, ($sp)
# end: Call at 356.26; stackHeight = 28
10092#    lw $t0, ($sp)
10096#    addu $sp, $sp, 4
# end: CallStatement at 356.26; stackHeight = 24
# begin: CallStatement at 357.26; stackHeight = 24
# begin: Call at 357.26; stackHeight = 24
# begin: IdentifierExp at 357.7; stackHeight = 24
10100#    lw $t0, 0($sp)
10104#    subu $sp, $sp, 4
10108#    sw $t0, ($sp)
# end: IdentifierExp at 357.7; stackHeight = 28
10112#    lw $t0, 0($sp)
10116#    sw $s2, 0($sp)
10120#    move $s2, $t0
10124#    beq $s2, $zero, nullPtrException
10128#    lw $t0, -12($s2)
10132#    lw $t0, 20($t0)
10136#    jalr $t0 # setBlack
10140#    addu $sp, $sp, 0
10144#    lw $s2, ($sp)
10148#    addu $sp, $sp, 4
10152#    subu $sp, $sp, 4
10156#    sw $t0, ($sp)
# end: Call at 357.26; stackHeight = 28
10160#    lw $t0, ($sp)
10164#    addu $sp, $sp, 4
# end: CallStatement at 357.26; stackHeight = 24
# begin: Assign at 358.14; stackHeight = 24
# begin: IdentifierExp at 358.16; stackHeight = 24
10168#    lw $t0, 0($sp)
10172#    subu $sp, $sp, 4
10176#    sw $t0, ($sp)
# end: IdentifierExp at 358.16; stackHeight = 28
10180#    lw $t0, ($sp)
10184#    addu $sp, $sp, 4
10188#    sw $t0, 20($sp)
# end: Assign at 358.14; stackHeight = 24
10192#    addu $sp, $sp, 4
# end: Block at 348.33; stackHeight = 20
10196#    j if_done_709
10200:  if_else_709:
# begin: Block at 360.8; stackHeight = 20
# begin: CallStatement at 362.15; stackHeight = 20
# begin: Call at 362.15; stackHeight = 20
# begin: IdentifierExp at 362.7; stackHeight = 20
10200#    lw $t0, 8($sp)
10204#    subu $sp, $sp, 4
10208#    sw $t0, ($sp)
# end: IdentifierExp at 362.7; stackHeight = 24
10212#    lw $t0, 0($sp)
10216#    sw $s2, 0($sp)
10220#    move $s2, $t0
10224#    beq $s2, $zero, nullPtrException
10228#    lw $t0, -12($s2)
10232#    lw $t0, 60($t0)
10236#    jalr $t0 # setRed
10240#    addu $sp, $sp, 0
10244#    lw $s2, ($sp)
10248#    addu $sp, $sp, 4
10252#    subu $sp, $sp, 4
10256#    sw $t0, ($sp)
# end: Call at 362.15; stackHeight = 24
10260#    lw $t0, ($sp)
10264#    addu $sp, $sp, 4
# end: CallStatement at 362.15; stackHeight = 20
# begin: Assign at 363.18; stackHeight = 20
# begin: IdentifierExp at 363.7; stackHeight = 20
10268#    lw $t0, 24($sp)
10272#    subu $sp, $sp, 4
10276#    sw $t0, ($sp)
# end: IdentifierExp at 363.7; stackHeight = 24
# begin: IntegerLiteral at 363.15; stackHeight = 24
10280#    li $t0, 0
10284#    subu $sp, $sp, 8
10288#    sw $s5, 4($sp)
10292#    sw $t0, ($sp)
# end: IntegerLiteral at 363.15; stackHeight = 32
# begin: True at 363.20; stackHeight = 32
10296#    li $t0, 1
10300#    subu $sp, $sp, 4
10304#    sw $t0, ($sp)
# end: True at 363.20; stackHeight = 36
10308#    lw $t0, ($sp)
10312#    addu $sp, $sp, 4
10316#    lw $t1, ($sp)
10320#    addu $sp, $sp, 8
10324#    lw $t2, ($sp)
10328#    addu $sp, $sp, 4
10332#    beq $t2, $zero, nullPtrException
10336#    lw $t3, -4($t2)
10340#    bgeu $t1, $t3, arrayIndexOutOfBounds
10341##...sltu $at,$t1,$t3
10345##...beq $at,$zero,18324
10348#    sll $t1, $t1, 2
10352#    addu $t1, $t1, $t2
10356#    sw $t0, ($t1)
# end: Assign at 363.18; stackHeight = 20
# end: Block at 360.8; stackHeight = 20
10360:  if_done_709:
# end: If at 348.8; stackHeight = 20
10360:  if_done_710:
# end: If at 341.3; stackHeight = 20
# end: Block at 340.11; stackHeight = 20
10360:  if_done_712:
# end: If at 314.11; stackHeight = 20
10360:  if_done_713:
# end: If at 284.6; stackHeight = 20
10360#    addu $sp, $sp, 16
# end: Block at 265.18; stackHeight = 4
10364#    j if_done_716
10368:  if_else_716:
# begin: Block at 370.2; stackHeight = 4
# end: Block at 370.2; stackHeight = 4
10368:  if_done_716:
# end: If at 265.2; stackHeight = 4
# begin: IdentifierExp at 370.9; stackHeight = 4
10368#    lw $t0, 0($sp)
10372#    subu $sp, $sp, 4
10376#    sw $t0, ($sp)
# end: IdentifierExp at 370.9; stackHeight = 8
10380#    lw $t0, ($sp)
10384#    addu $sp, $sp, 4
10388#    addu $sp, $sp, 4
10392#    lw $ra, ($sp)
10396#    addu $sp, $sp, 4
10400#    jr $ra
.globl mth_NonNullRedBlackTree_asNonNull
10404:mth_NonNullRedBlackTree_asNonNull:
10404#    subu $sp, $sp, 4
10408#    sw $ra, ($sp)
# begin: This at 375.9; stackHeight = 0
10412#    subu $sp, $sp, 4
10416#    sw $s2, ($sp)
# end: This at 375.9; stackHeight = 4
10420#    lw $t0, ($sp)
10424#    addu $sp, $sp, 4
10428#    addu $sp, $sp, 0
10432#    lw $ra, ($sp)
10436#    addu $sp, $sp, 4
10440#    jr $ra
.globl mth_NonNullRedBlackTree_getRight
10444:mth_NonNullRedBlackTree_getRight:
10444#    subu $sp, $sp, 4
10448#    sw $ra, ($sp)
# begin: LocalVarDecl at 380.15; stackHeight = 0
# begin: IdentifierExp at 380.24; stackHeight = 0
10452#    lw $t0, 8($s2)
10456#    subu $sp, $sp, 4
10460#    sw $t0, ($sp)
# end: IdentifierExp at 380.24; stackHeight = 4
10464#"rtnVal"    lw $zero, ($sp) #**"rtnVal"
# end: LocalVarDecl at 380.15; stackHeight = 4
# begin: If at 381.2; stackHeight = 4
# begin: IdentifierExp at 381.6; stackHeight = 4
10468#    lw $t0, 8($sp)
10472#    subu $sp, $sp, 4
10476#    sw $t0, ($sp)
# end: IdentifierExp at 381.6; stackHeight = 8
10480#    lw $t0, ($sp)
10484#    addu $sp, $sp, 4
10488#    beq $t0, $zero, if_else_735
# begin: Block at 381.21; stackHeight = 4
# begin: Assign at 382.13; stackHeight = 4
# begin: IdentifierExp at 382.15; stackHeight = 4
10492#    lw $t0, 4($s2)
10496#    subu $sp, $sp, 4
10500#    sw $t0, ($sp)
# end: IdentifierExp at 382.15; stackHeight = 8
10504#    lw $t0, ($sp)
10508#    addu $sp, $sp, 4
10512#    sw $t0, 0($sp)
# end: Assign at 382.13; stackHeight = 4
# end: Block at 381.21; stackHeight = 4
10516#    j if_done_735
10520:  if_else_735:
# begin: Block at 384.2; stackHeight = 4
# end: Block at 384.2; stackHeight = 4
10520:  if_done_735:
# end: If at 381.2; stackHeight = 4
# begin: IdentifierExp at 384.9; stackHeight = 4
10520#    lw $t0, 0($sp)
10524#    subu $sp, $sp, 4
10528#    sw $t0, ($sp)
# end: IdentifierExp at 384.9; stackHeight = 8
10532#    lw $t0, ($sp)
10536#    addu $sp, $sp, 4
10540#    addu $sp, $sp, 4
10544#    lw $ra, ($sp)
10548#    addu $sp, $sp, 4
10552#    jr $ra
.globl mth_NonNullRedBlackTree_getLeft
10556:mth_NonNullRedBlackTree_getLeft:
10556#    subu $sp, $sp, 4
10560#    sw $ra, ($sp)
# begin: Call at 389.9; stackHeight = 0
# begin: This at 389.9; stackHeight = 0
10564#    subu $sp, $sp, 4
10568#    sw $s2, ($sp)
# end: This at 389.9; stackHeight = 4
# begin: Not at 389.18; stackHeight = 4
# begin: IdentifierExp at 389.19; stackHeight = 4
10572#    lw $t0, 8($sp)
10576#    subu $sp, $sp, 4
10580#    sw $t0, ($sp)
# end: IdentifierExp at 389.19; stackHeight = 8
10584#    lw $t0, ($sp)
10588#    xor $t0, $t0, 1
10592#    sw $t0, ($sp)
# end: Not at 389.18; stackHeight = 8
10596#    lw $t0, 4($sp)
10600#    sw $s2, 4($sp)
10604#    move $s2, $t0
10608#    beq $s2, $zero, nullPtrException
10612#    lw $t0, -12($s2)
10616#    lw $t0, 72($t0)
10620#    jalr $t0 # getRight
10624#    addu $sp, $sp, 4
10628#    lw $s2, ($sp)
10632#    addu $sp, $sp, 4
10636#    subu $sp, $sp, 4
10640#    sw $t0, ($sp)
# end: Call at 389.9; stackHeight = 4
10644#    lw $t0, ($sp)
10648#    addu $sp, $sp, 4
10652#    addu $sp, $sp, 0
10656#    lw $ra, ($sp)
10660#    addu $sp, $sp, 4
10664#    jr $ra
.globl mth_NonNullRedBlackTree_setRight
10668:mth_NonNullRedBlackTree_setRight:
10668#    subu $sp, $sp, 4
10672#    sw $ra, ($sp)
# begin: If at 394.2; stackHeight = 0
# begin: IdentifierExp at 394.6; stackHeight = 0
10676#    lw $t0, 4($sp)
10680#    subu $sp, $sp, 4
10684#    sw $t0, ($sp)
# end: IdentifierExp at 394.6; stackHeight = 4
10688#    lw $t0, ($sp)
10692#    addu $sp, $sp, 4
10696#    beq $t0, $zero, if_else_759
# begin: Block at 394.21; stackHeight = 0
# begin: Assign at 395.11; stackHeight = 0
# begin: IdentifierExp at 395.13; stackHeight = 0
10700#    lw $t0, 8($sp)
10704#    subu $sp, $sp, 4
10708#    sw $t0, ($sp)
# end: IdentifierExp at 395.13; stackHeight = 4
10712#    lw $t0, ($sp)
10716#    addu $sp, $sp, 4
10720#    sw $t0, 4($sp)
# end: Assign at 395.11; stackHeight = 0
# end: Block at 394.21; stackHeight = 0
10724#    j if_done_759
10728:  if_else_759:
# begin: Block at 397.7; stackHeight = 0
# begin: Assign at 398.12; stackHeight = 0
# begin: IdentifierExp at 398.14; stackHeight = 0
10728#    lw $t0, 8($sp)
10732#    subu $sp, $sp, 4
10736#    sw $t0, ($sp)
# end: IdentifierExp at 398.14; stackHeight = 4
10740#    lw $t0, ($sp)
10744#    addu $sp, $sp, 4
10748#    sw $t0, 8($sp)
# end: Assign at 398.12; stackHeight = 0
# end: Block at 397.7; stackHeight = 0
10752:  if_done_759:
# end: If at 394.2; stackHeight = 0
10752#    addu $sp, $sp, 0
10756#    lw $ra, ($sp)
10760#    addu $sp, $sp, 4
10764#    jr $ra
.globl mth_NonNullRedBlackTree_setLeft
10768:mth_NonNullRedBlackTree_setLeft:
10768#    subu $sp, $sp, 4
10772#    sw $ra, ($sp)
# begin: CallStatement at 404.2; stackHeight = 0
# begin: Call at 404.2; stackHeight = 0
# begin: This at 404.2; stackHeight = 0
10776#    subu $sp, $sp, 4
10780#    sw $s2, ($sp)
# end: This at 404.2; stackHeight = 4
# begin: IdentifierExp at 404.11; stackHeight = 4
10784#    lw $t0, 12($sp)
10788#    subu $sp, $sp, 4
10792#    sw $t0, ($sp)
# end: IdentifierExp at 404.11; stackHeight = 8
# begin: Not at 404.17; stackHeight = 8
# begin: IdentifierExp at 404.18; stackHeight = 8
10796#    lw $t0, 12($sp)
10800#    subu $sp, $sp, 4
10804#    sw $t0, ($sp)
# end: IdentifierExp at 404.18; stackHeight = 12
10808#    lw $t0, ($sp)
10812#    xor $t0, $t0, 1
10816#    sw $t0, ($sp)
# end: Not at 404.17; stackHeight = 12
10820#    lw $t0, 8($sp)
10824#    sw $s2, 8($sp)
10828#    move $s2, $t0
10832#    beq $s2, $zero, nullPtrException
10836#    lw $t0, -12($s2)
10840#    lw $t0, 80($t0)
10844#    jalr $t0 # setRight
10848#    addu $sp, $sp, 8
10852#    lw $s2, ($sp)
10856#    addu $sp, $sp, 4
10860#    subu $sp, $sp, 4
10864#    sw $t0, ($sp)
# end: Call at 404.2; stackHeight = 4
10868#    lw $t0, ($sp)
10872#    addu $sp, $sp, 4
# end: CallStatement at 404.2; stackHeight = 0
10876#    addu $sp, $sp, 0
10880#    lw $ra, ($sp)
10884#    addu $sp, $sp, 4
10888#    jr $ra
.globl mth_NonNullRedBlackTree_rebalanceAfterInsert
10892:mth_NonNullRedBlackTree_rebalanceAfterInsert:
10892#    subu $sp, $sp, 4
10896#    sw $ra, ($sp)
# begin: LocalVarDecl at 419.15; stackHeight = 0
# begin: This at 419.24; stackHeight = 0
10900#    subu $sp, $sp, 4
10904#    sw $s2, ($sp)
# end: This at 419.24; stackHeight = 4
10908#"rtnVal"    lw $zero, ($sp) #**"rtnVal"
# end: LocalVarDecl at 419.15; stackHeight = 4
# begin: LocalVarDecl at 420.15; stackHeight = 4
# begin: Call at 420.25; stackHeight = 4
# begin: This at 420.25; stackHeight = 4
10912#    subu $sp, $sp, 4
10916#    sw $s2, ($sp)
# end: This at 420.25; stackHeight = 8
# begin: IdentifierExp at 420.34; stackHeight = 8
10920#    lw $t0, 12($sp)
10924#    subu $sp, $sp, 4
10928#    sw $t0, ($sp)
# end: IdentifierExp at 420.34; stackHeight = 12
10932#    lw $t0, 4($sp)
10936#    sw $s2, 4($sp)
10940#    move $s2, $t0
10944#    beq $s2, $zero, nullPtrException
10948#    lw $t0, -12($s2)
10952#    lw $t0, 72($t0)
10956#    jalr $t0 # getRight
10960#    addu $sp, $sp, 4
10964#    lw $s2, ($sp)
10968#    addu $sp, $sp, 4
10972#    subu $sp, $sp, 4
10976#    sw $t0, ($sp)
# end: Call at 420.25; stackHeight = 8
10980#"myRight"    lw $zero, ($sp) #**"myRight"
# end: LocalVarDecl at 420.15; stackHeight = 8
# begin: LocalVarDecl at 421.15; stackHeight = 8
# begin: Call at 421.24; stackHeight = 8
# begin: This at 421.24; stackHeight = 8
10984#    subu $sp, $sp, 4
10988#    sw $s2, ($sp)
# end: This at 421.24; stackHeight = 12
# begin: IdentifierExp at 421.32; stackHeight = 12
10992#    lw $t0, 16($sp)
10996#    subu $sp, $sp, 4
11000#    sw $t0, ($sp)
# end: IdentifierExp at 421.32; stackHeight = 16
11004#    lw $t0, 4($sp)
11008#    sw $s2, 4($sp)
11012#    move $s2, $t0
11016#    beq $s2, $zero, nullPtrException
11020#    lw $t0, -12($s2)
11024#    lw $t0, 76($t0)
11028#    jalr $t0 # getLeft
11032#    addu $sp, $sp, 4
11036#    lw $s2, ($sp)
11040#    addu $sp, $sp, 4
11044#    subu $sp, $sp, 4
11048#    sw $t0, ($sp)
# end: Call at 421.24; stackHeight = 12
11052#"myLeft"    lw $zero, ($sp) #**"myLeft"
# end: LocalVarDecl at 421.15; stackHeight = 12
# begin: If at 423.2; stackHeight = 12
# begin: Call at 423.14; stackHeight = 12
# begin: IdentifierExp at 423.6; stackHeight = 12
11056#    lw $t0, 4($sp)
11060#    subu $sp, $sp, 4
11064#    sw $t0, ($sp)
# end: IdentifierExp at 423.6; stackHeight = 16
11068#    lw $t0, 0($sp)
11072#    sw $s2, 0($sp)
11076#    move $s2, $t0
11080#    beq $s2, $zero, nullPtrException
11084#    lw $t0, -12($s2)
11088#    lw $t0, 24($t0)
11092#    jalr $t0 # isRed
11096#    addu $sp, $sp, 0
11100#    lw $s2, ($sp)
11104#    addu $sp, $sp, 4
11108#    subu $sp, $sp, 4
11112#    sw $t0, ($sp)
# end: Call at 423.14; stackHeight = 16
11116#    lw $t0, ($sp)
11120#    addu $sp, $sp, 4
11124#    beq $t0, $zero, if_else_908
# begin: Block at 423.23; stackHeight = 12
# begin: LocalVarDecl at 424.19; stackHeight = 12
# begin: Call at 424.54; stackHeight = 12
# begin: Call at 424.42; stackHeight = 12
# begin: IdentifierExp at 424.34; stackHeight = 12
11128#    lw $t0, 4($sp)
11132#    subu $sp, $sp, 4
11136#    sw $t0, ($sp)
# end: IdentifierExp at 424.34; stackHeight = 16
11140#    lw $t0, 0($sp)
11144#    sw $s2, 0($sp)
11148#    move $s2, $t0
11152#    beq $s2, $zero, nullPtrException
11156#    lw $t0, -12($s2)
11160#    lw $t0, 36($t0)
11164#    jalr $t0 # asNonNull
11168#    addu $sp, $sp, 0
11172#    lw $s2, ($sp)
11176#    addu $sp, $sp, 4
11180#    subu $sp, $sp, 4
11184#    sw $t0, ($sp)
# end: Call at 424.42; stackHeight = 16
# begin: IdentifierExp at 424.63; stackHeight = 16
11188#    lw $t0, 20($sp)
11192#    subu $sp, $sp, 4
11196#    sw $t0, ($sp)
# end: IdentifierExp at 424.63; stackHeight = 20
11200#    lw $t0, 4($sp)
11204#    sw $s2, 4($sp)
11208#    move $s2, $t0
11212#    beq $s2, $zero, nullPtrException
11216#    lw $t0, -12($s2)
11220#    lw $t0, 72($t0)
11224#    jalr $t0 # getRight
11228#    addu $sp, $sp, 4
11232#    lw $s2, ($sp)
11236#    addu $sp, $sp, 4
11240#    subu $sp, $sp, 4
11244#    sw $t0, ($sp)
# end: Call at 424.54; stackHeight = 16
11248#"myRightRight"    lw $zero, ($sp) #**"myRightRight"
# end: LocalVarDecl at 424.19; stackHeight = 16
# begin: LocalVarDecl at 425.19; stackHeight = 16
# begin: Call at 425.53; stackHeight = 16
# begin: Call at 425.41; stackHeight = 16
# begin: IdentifierExp at 425.33; stackHeight = 16
11252#    lw $t0, 8($sp)
11256#    subu $sp, $sp, 4
11260#    sw $t0, ($sp)
# end: IdentifierExp at 425.33; stackHeight = 20
11264#    lw $t0, 0($sp)
11268#    sw $s2, 0($sp)
11272#    move $s2, $t0
11276#    beq $s2, $zero, nullPtrException
11280#    lw $t0, -12($s2)
11284#    lw $t0, 36($t0)
11288#    jalr $t0 # asNonNull
11292#    addu $sp, $sp, 0
11296#    lw $s2, ($sp)
11300#    addu $sp, $sp, 4
11304#    subu $sp, $sp, 4
11308#    sw $t0, ($sp)
# end: Call at 425.41; stackHeight = 20
# begin: IdentifierExp at 425.61; stackHeight = 20
11312#    lw $t0, 24($sp)
11316#    subu $sp, $sp, 4
11320#    sw $t0, ($sp)
# end: IdentifierExp at 425.61; stackHeight = 24
11324#    lw $t0, 4($sp)
11328#    sw $s2, 4($sp)
11332#    move $s2, $t0
11336#    beq $s2, $zero, nullPtrException
11340#    lw $t0, -12($s2)
11344#    lw $t0, 76($t0)
11348#    jalr $t0 # getLeft
11352#    addu $sp, $sp, 4
11356#    lw $s2, ($sp)
11360#    addu $sp, $sp, 4
11364#    subu $sp, $sp, 4
11368#    sw $t0, ($sp)
# end: Call at 425.53; stackHeight = 20
11372#"myRightLeft"    lw $zero, ($sp) #**"myRightLeft"
# end: LocalVarDecl at 425.19; stackHeight = 20
# begin: If at 426.6; stackHeight = 20
# begin: Call at 426.23; stackHeight = 20
# begin: IdentifierExp at 426.10; stackHeight = 20
11376#    lw $t0, 4($sp)
11380#    subu $sp, $sp, 4
11384#    sw $t0, ($sp)
# end: IdentifierExp at 426.10; stackHeight = 24
11388#    lw $t0, 0($sp)
11392#    sw $s2, 0($sp)
11396#    move $s2, $t0
11400#    beq $s2, $zero, nullPtrException
11404#    lw $t0, -12($s2)
11408#    lw $t0, 24($t0)
11412#    jalr $t0 # isRed
11416#    addu $sp, $sp, 0
11420#    lw $s2, ($sp)
11424#    addu $sp, $sp, 4
11428#    subu $sp, $sp, 4
11432#    sw $t0, ($sp)
# end: Call at 426.23; stackHeight = 24
11436#    lw $t0, ($sp)
11440#    addu $sp, $sp, 4
11444#    beq $t0, $zero, if_else_905
# begin: Block at 426.32; stackHeight = 20
# begin: If at 427.3; stackHeight = 20
# begin: Call at 427.14; stackHeight = 20
# begin: IdentifierExp at 427.7; stackHeight = 20
11448#    lw $t0, 8($sp)
11452#    subu $sp, $sp, 4
11456#    sw $t0, ($sp)
# end: IdentifierExp at 427.7; stackHeight = 24
11460#    lw $t0, 0($sp)
11464#    sw $s2, 0($sp)
11468#    move $s2, $t0
11472#    beq $s2, $zero, nullPtrException
11476#    lw $t0, -12($s2)
11480#    lw $t0, 24($t0)
11484#    jalr $t0 # isRed
11488#    addu $sp, $sp, 0
11492#    lw $s2, ($sp)
11496#    addu $sp, $sp, 4
11500#    subu $sp, $sp, 4
11504#    sw $t0, ($sp)
# end: Call at 427.14; stackHeight = 24
11508#    lw $t0, ($sp)
11512#    addu $sp, $sp, 4
11516#    beq $t0, $zero, if_else_902
# begin: Block at 427.23; stackHeight = 20
# begin: Assign at 429.20; stackHeight = 20
# begin: False at 429.22; stackHeight = 20
11520#    subu $sp, $sp, 4
11524#    sw $zero, ($sp)
# end: False at 429.22; stackHeight = 24
11528#    lw $t0, ($sp)
11532#    addu $sp, $sp, 4
11536#    sw $t0, -20($s2)
# end: Assign at 429.20; stackHeight = 20
# begin: CallStatement at 430.14; stackHeight = 20
# begin: Call at 430.14; stackHeight = 20
# begin: IdentifierExp at 430.7; stackHeight = 20
11540#    lw $t0, 8($sp)
11544#    subu $sp, $sp, 4
11548#    sw $t0, ($sp)
# end: IdentifierExp at 430.7; stackHeight = 24
11552#    lw $t0, 0($sp)
11556#    sw $s2, 0($sp)
11560#    move $s2, $t0
11564#    beq $s2, $zero, nullPtrException
11568#    lw $t0, -12($s2)
11572#    lw $t0, 20($t0)
11576#    jalr $t0 # setBlack
11580#    addu $sp, $sp, 0
11584#    lw $s2, ($sp)
11588#    addu $sp, $sp, 4
11592#    subu $sp, $sp, 4
11596#    sw $t0, ($sp)
# end: Call at 430.14; stackHeight = 24
11600#    lw $t0, ($sp)
11604#    addu $sp, $sp, 4
# end: CallStatement at 430.14; stackHeight = 20
# begin: CallStatement at 431.15; stackHeight = 20
# begin: Call at 431.15; stackHeight = 20
# begin: IdentifierExp at 431.7; stackHeight = 20
11608#    lw $t0, 12($sp)
11612#    subu $sp, $sp, 4
11616#    sw $t0, ($sp)
# end: IdentifierExp at 431.7; stackHeight = 24
11620#    lw $t0, 0($sp)
11624#    sw $s2, 0($sp)
11628#    move $s2, $t0
11632#    beq $s2, $zero, nullPtrException
11636#    lw $t0, -12($s2)
11640#    lw $t0, 20($t0)
11644#    jalr $t0 # setBlack
11648#    addu $sp, $sp, 0
11652#    lw $s2, ($sp)
11656#    addu $sp, $sp, 4
11660#    subu $sp, $sp, 4
11664#    sw $t0, ($sp)
# end: Call at 431.15; stackHeight = 24
11668#    lw $t0, ($sp)
11672#    addu $sp, $sp, 4
# end: CallStatement at 431.15; stackHeight = 20
# end: Block at 427.23; stackHeight = 20
11676#    j if_done_902
11680:  if_else_902:
# begin: Block at 433.8; stackHeight = 20
# begin: LocalVarDecl at 434.27; stackHeight = 20
# begin: Call at 434.39; stackHeight = 20
# begin: IdentifierExp at 434.31; stackHeight = 20
11680#    lw $t0, 12($sp)
11684#    subu $sp, $sp, 4
11688#    sw $t0, ($sp)
# end: IdentifierExp at 434.31; stackHeight = 24
11692#    lw $t0, 0($sp)
11696#    sw $s2, 0($sp)
11700#    move $s2, $t0
11704#    beq $s2, $zero, nullPtrException
11708#    lw $t0, -12($s2)
11712#    lw $t0, 36($t0)
11716#    jalr $t0 # asNonNull
11720#    addu $sp, $sp, 0
11724#    lw $s2, ($sp)
11728#    addu $sp, $sp, 4
11732#    subu $sp, $sp, 4
11736#    sw $t0, ($sp)
# end: Call at 434.39; stackHeight = 24
11740#"r"    lw $zero, ($sp) #**"r"
# end: LocalVarDecl at 434.27; stackHeight = 24
# begin: If at 435.7; stackHeight = 24
# begin: Call at 435.37; stackHeight = 24
# begin: Call at 435.13; stackHeight = 24
# begin: IdentifierExp at 435.11; stackHeight = 24
11744#    lw $t0, 0($sp)
11748#    subu $sp, $sp, 4
11752#    sw $t0, ($sp)
# end: IdentifierExp at 435.11; stackHeight = 28
# begin: IdentifierExp at 435.22; stackHeight = 28
11756#    lw $t0, 32($sp)
11760#    subu $sp, $sp, 4
11764#    sw $t0, ($sp)
# end: IdentifierExp at 435.22; stackHeight = 32
11768#    lw $t0, 4($sp)
11772#    sw $s2, 4($sp)
11776#    move $s2, $t0
11780#    beq $s2, $zero, nullPtrException
11784#    lw $t0, -12($s2)
11788#    lw $t0, 72($t0)
11792#    jalr $t0 # getRight
11796#    addu $sp, $sp, 4
11800#    lw $s2, ($sp)
11804#    addu $sp, $sp, 4
11808#    subu $sp, $sp, 4
11812#    sw $t0, ($sp)
# end: Call at 435.13; stackHeight = 28
11816#    lw $t0, 0($sp)
11820#    sw $s2, 0($sp)
11824#    move $s2, $t0
11828#    beq $s2, $zero, nullPtrException
11832#    lw $t0, -12($s2)
11836#    lw $t0, 24($t0)
11840#    jalr $t0 # isRed
11844#    addu $sp, $sp, 0
11848#    lw $s2, ($sp)
11852#    addu $sp, $sp, 4
11856#    subu $sp, $sp, 4
11860#    sw $t0, ($sp)
# end: Call at 435.37; stackHeight = 28
11864#    lw $t0, ($sp)
11868#    addu $sp, $sp, 4
11872#    beq $t0, $zero, if_else_900
# begin: Block at 435.46; stackHeight = 24
# begin: Assign at 437.11; stackHeight = 24
# begin: IdentifierExp at 437.13; stackHeight = 24
11876#    lw $t0, 0($sp)
11880#    subu $sp, $sp, 4
11884#    sw $t0, ($sp)
# end: IdentifierExp at 437.13; stackHeight = 28
11888#    lw $t0, ($sp)
11892#    addu $sp, $sp, 4
11896#    sw $t0, 20($sp)
# end: Assign at 437.11; stackHeight = 24
# begin: CallStatement at 438.9; stackHeight = 24
# begin: Call at 438.9; stackHeight = 24
# begin: This at 438.4; stackHeight = 24
11900#    subu $sp, $sp, 4
11904#    sw $s2, ($sp)
# end: This at 438.4; stackHeight = 28
# begin: Call at 438.20; stackHeight = 28
# begin: IdentifierExp at 438.18; stackHeight = 28
11908#    lw $t0, 4($sp)
11912#    subu $sp, $sp, 4
11916#    sw $t0, ($sp)
# end: IdentifierExp at 438.18; stackHeight = 32
# begin: IdentifierExp at 438.28; stackHeight = 32
11920#    lw $t0, 36($sp)
11924#    subu $sp, $sp, 4
11928#    sw $t0, ($sp)
# end: IdentifierExp at 438.28; stackHeight = 36
11932#    lw $t0, 4($sp)
11936#    sw $s2, 4($sp)
11940#    move $s2, $t0
11944#    beq $s2, $zero, nullPtrException
11948#    lw $t0, -12($s2)
11952#    lw $t0, 76($t0)
11956#    jalr $t0 # getLeft
11960#    addu $sp, $sp, 4
11964#    lw $s2, ($sp)
11968#    addu $sp, $sp, 4
11972#    subu $sp, $sp, 4
11976#    sw $t0, ($sp)
# end: Call at 438.20; stackHeight = 32
# begin: IdentifierExp at 438.44; stackHeight = 32
11980#    lw $t0, 36($sp)
11984#    subu $sp, $sp, 4
11988#    sw $t0, ($sp)
# end: IdentifierExp at 438.44; stackHeight = 36
11992#    lw $t0, 8($sp)
11996#    sw $s2, 8($sp)
12000#    move $s2, $t0
12004#    beq $s2, $zero, nullPtrException
12008#    lw $t0, -12($s2)
12012#    lw $t0, 80($t0)
12016#    jalr $t0 # setRight
12020#    addu $sp, $sp, 8
12024#    lw $s2, ($sp)
12028#    addu $sp, $sp, 4
12032#    subu $sp, $sp, 4
12036#    sw $t0, ($sp)
# end: Call at 438.9; stackHeight = 28
12040#    lw $t0, ($sp)
12044#    addu $sp, $sp, 4
# end: CallStatement at 438.9; stackHeight = 24
# begin: CallStatement at 439.6; stackHeight = 24
# begin: Call at 439.6; stackHeight = 24
# begin: IdentifierExp at 439.4; stackHeight = 24
12048#    lw $t0, 0($sp)
12052#    subu $sp, $sp, 4
12056#    sw $t0, ($sp)
# end: IdentifierExp at 439.4; stackHeight = 28
# begin: This at 439.14; stackHeight = 28
12060#    subu $sp, $sp, 4
12064#    sw $s2, ($sp)
# end: This at 439.14; stackHeight = 32
# begin: IdentifierExp at 439.20; stackHeight = 32
12068#    lw $t0, 36($sp)
12072#    subu $sp, $sp, 4
12076#    sw $t0, ($sp)
# end: IdentifierExp at 439.20; stackHeight = 36
12080#    lw $t0, 8($sp)
12084#    sw $s2, 8($sp)
12088#    move $s2, $t0
12092#    beq $s2, $zero, nullPtrException
12096#    lw $t0, -12($s2)
12100#    lw $t0, 84($t0)
12104#    jalr $t0 # setLeft
12108#    addu $sp, $sp, 8
12112#    lw $s2, ($sp)
12116#    addu $sp, $sp, 4
12120#    subu $sp, $sp, 4
12124#    sw $t0, ($sp)
# end: Call at 439.6; stackHeight = 28
12128#    lw $t0, ($sp)
12132#    addu $sp, $sp, 4
# end: CallStatement at 439.6; stackHeight = 24
# begin: CallStatement at 440.9; stackHeight = 24
# begin: Call at 440.9; stackHeight = 24
# begin: This at 440.4; stackHeight = 24
12136#    subu $sp, $sp, 4
12140#    sw $s2, ($sp)
# end: This at 440.4; stackHeight = 28
12144#    lw $t0, 0($sp)
12148#    sw $s2, 0($sp)
12152#    move $s2, $t0
12156#    beq $s2, $zero, nullPtrException
12160#    lw $t0, -12($s2)
12164#    lw $t0, 60($t0)
12168#    jalr $t0 # setRed
12172#    addu $sp, $sp, 0
12176#    lw $s2, ($sp)
12180#    addu $sp, $sp, 4
12184#    subu $sp, $sp, 4
12188#    sw $t0, ($sp)
# end: Call at 440.9; stackHeight = 28
12192#    lw $t0, ($sp)
12196#    addu $sp, $sp, 4
# end: CallStatement at 440.9; stackHeight = 24
# begin: CallStatement at 441.6; stackHeight = 24
# begin: Call at 441.6; stackHeight = 24
# begin: IdentifierExp at 441.4; stackHeight = 24
12200#    lw $t0, 0($sp)
12204#    subu $sp, $sp, 4
12208#    sw $t0, ($sp)
# end: IdentifierExp at 441.4; stackHeight = 28
12212#    lw $t0, 0($sp)
12216#    sw $s2, 0($sp)
12220#    move $s2, $t0
12224#    beq $s2, $zero, nullPtrException
12228#    lw $t0, -12($s2)
12232#    lw $t0, 20($t0)
12236#    jalr $t0 # setBlack
12240#    addu $sp, $sp, 0
12244#    lw $s2, ($sp)
12248#    addu $sp, $sp, 4
12252#    subu $sp, $sp, 4
12256#    sw $t0, ($sp)
# end: Call at 441.6; stackHeight = 28
12260#    lw $t0, ($sp)
12264#    addu $sp, $sp, 4
# end: CallStatement at 441.6; stackHeight = 24
# end: Block at 435.46; stackHeight = 24
12268#    j if_done_900
12272:  if_else_900:
# begin: If at 443.12; stackHeight = 24
# begin: Call at 443.41; stackHeight = 24
# begin: Call at 443.18; stackHeight = 24
# begin: IdentifierExp at 443.16; stackHeight = 24
12272#    lw $t0, 0($sp)
12276#    subu $sp, $sp, 4
12280#    sw $t0, ($sp)
# end: IdentifierExp at 443.16; stackHeight = 28
# begin: IdentifierExp at 443.26; stackHeight = 28
12284#    lw $t0, 32($sp)
12288#    subu $sp, $sp, 4
12292#    sw $t0, ($sp)
# end: IdentifierExp at 443.26; stackHeight = 32
12296#    lw $t0, 4($sp)
12300#    sw $s2, 4($sp)
12304#    move $s2, $t0
12308#    beq $s2, $zero, nullPtrException
12312#    lw $t0, -12($s2)
12316#    lw $t0, 76($t0)
12320#    jalr $t0 # getLeft
12324#    addu $sp, $sp, 4
12328#    lw $s2, ($sp)
12332#    addu $sp, $sp, 4
12336#    subu $sp, $sp, 4
12340#    sw $t0, ($sp)
# end: Call at 443.18; stackHeight = 28
12344#    lw $t0, 0($sp)
12348#    sw $s2, 0($sp)
12352#    move $s2, $t0
12356#    beq $s2, $zero, nullPtrException
12360#    lw $t0, -12($s2)
12364#    lw $t0, 24($t0)
12368#    jalr $t0 # isRed
12372#    addu $sp, $sp, 0
12376#    lw $s2, ($sp)
12380#    addu $sp, $sp, 4
12384#    subu $sp, $sp, 4
12388#    sw $t0, ($sp)
# end: Call at 443.41; stackHeight = 28
12392#    lw $t0, ($sp)
12396#    addu $sp, $sp, 4
12400#    beq $t0, $zero, if_else_899
# begin: Block at 443.50; stackHeight = 24
# begin: LocalVarDecl at 445.24; stackHeight = 24
# begin: Call at 445.54; stackHeight = 24
# begin: Call at 445.31; stackHeight = 24
# begin: IdentifierExp at 445.29; stackHeight = 24
12404#    lw $t0, 0($sp)
12408#    subu $sp, $sp, 4
12412#    sw $t0, ($sp)
# end: IdentifierExp at 445.29; stackHeight = 28
# begin: IdentifierExp at 445.39; stackHeight = 28
12416#    lw $t0, 32($sp)
12420#    subu $sp, $sp, 4
12424#    sw $t0, ($sp)
# end: IdentifierExp at 445.39; stackHeight = 32
12428#    lw $t0, 4($sp)
12432#    sw $s2, 4($sp)
12436#    move $s2, $t0
12440#    beq $s2, $zero, nullPtrException
12444#    lw $t0, -12($s2)
12448#    lw $t0, 76($t0)
12452#    jalr $t0 # getLeft
12456#    addu $sp, $sp, 4
12460#    lw $s2, ($sp)
12464#    addu $sp, $sp, 4
12468#    subu $sp, $sp, 4
12472#    sw $t0, ($sp)
# end: Call at 445.31; stackHeight = 28
12476#    lw $t0, 0($sp)
12480#    sw $s2, 0($sp)
12484#    move $s2, $t0
12488#    beq $s2, $zero, nullPtrException
12492#    lw $t0, -12($s2)
12496#    lw $t0, 36($t0)
12500#    jalr $t0 # asNonNull
12504#    addu $sp, $sp, 0
12508#    lw $s2, ($sp)
12512#    addu $sp, $sp, 4
12516#    subu $sp, $sp, 4
12520#    sw $t0, ($sp)
# end: Call at 445.54; stackHeight = 28
12524#"rl"    lw $zero, ($sp) #**"rl"
# end: LocalVarDecl at 445.24; stackHeight = 28
# begin: Assign at 446.11; stackHeight = 28
# begin: IdentifierExp at 446.13; stackHeight = 28
12528#    lw $t0, 0($sp)
12532#    subu $sp, $sp, 4
12536#    sw $t0, ($sp)
# end: IdentifierExp at 446.13; stackHeight = 32
12540#    lw $t0, ($sp)
12544#    addu $sp, $sp, 4
12548#    sw $t0, 24($sp)
# end: Assign at 446.11; stackHeight = 28
# begin: CallStatement at 447.6; stackHeight = 28
# begin: Call at 447.6; stackHeight = 28
# begin: IdentifierExp at 447.4; stackHeight = 28
12552#    lw $t0, 4($sp)
12556#    subu $sp, $sp, 4
12560#    sw $t0, ($sp)
# end: IdentifierExp at 447.4; stackHeight = 32
# begin: Call at 447.17; stackHeight = 32
# begin: IdentifierExp at 447.14; stackHeight = 32
12564#    lw $t0, 4($sp)
12568#    subu $sp, $sp, 4
12572#    sw $t0, ($sp)
# end: IdentifierExp at 447.14; stackHeight = 36
# begin: IdentifierExp at 447.26; stackHeight = 36
12576#    lw $t0, 40($sp)
12580#    subu $sp, $sp, 4
12584#    sw $t0, ($sp)
# end: IdentifierExp at 447.26; stackHeight = 40
12588#    lw $t0, 4($sp)
12592#    sw $s2, 4($sp)
12596#    move $s2, $t0
12600#    beq $s2, $zero, nullPtrException
12604#    lw $t0, -12($s2)
12608#    lw $t0, 72($t0)
12612#    jalr $t0 # getRight
12616#    addu $sp, $sp, 4
12620#    lw $s2, ($sp)
12624#    addu $sp, $sp, 4
12628#    subu $sp, $sp, 4
12632#    sw $t0, ($sp)
# end: Call at 447.17; stackHeight = 36
# begin: IdentifierExp at 447.42; stackHeight = 36
12636#    lw $t0, 40($sp)
12640#    subu $sp, $sp, 4
12644#    sw $t0, ($sp)
# end: IdentifierExp at 447.42; stackHeight = 40
12648#    lw $t0, 8($sp)
12652#    sw $s2, 8($sp)
12656#    move $s2, $t0
12660#    beq $s2, $zero, nullPtrException
12664#    lw $t0, -12($s2)
12668#    lw $t0, 84($t0)
12672#    jalr $t0 # setLeft
12676#    addu $sp, $sp, 8
12680#    lw $s2, ($sp)
12684#    addu $sp, $sp, 4
12688#    subu $sp, $sp, 4
12692#    sw $t0, ($sp)
# end: Call at 447.6; stackHeight = 32
12696#    lw $t0, ($sp)
12700#    addu $sp, $sp, 4
# end: CallStatement at 447.6; stackHeight = 28
# begin: CallStatement at 448.7; stackHeight = 28
# begin: Call at 448.7; stackHeight = 28
# begin: IdentifierExp at 448.4; stackHeight = 28
12704#    lw $t0, 0($sp)
12708#    subu $sp, $sp, 4
12712#    sw $t0, ($sp)
# end: IdentifierExp at 448.4; stackHeight = 32
# begin: IdentifierExp at 448.16; stackHeight = 32
12716#    lw $t0, 8($sp)
12720#    subu $sp, $sp, 4
12724#    sw $t0, ($sp)
# end: IdentifierExp at 448.16; stackHeight = 36
# begin: IdentifierExp at 448.19; stackHeight = 36
12728#    lw $t0, 40($sp)
12732#    subu $sp, $sp, 4
12736#    sw $t0, ($sp)
# end: IdentifierExp at 448.19; stackHeight = 40
12740#    lw $t0, 8($sp)
12744#    sw $s2, 8($sp)
12748#    move $s2, $t0
12752#    beq $s2, $zero, nullPtrException
12756#    lw $t0, -12($s2)
12760#    lw $t0, 80($t0)
12764#    jalr $t0 # setRight
12768#    addu $sp, $sp, 8
12772#    lw $s2, ($sp)
12776#    addu $sp, $sp, 4
12780#    subu $sp, $sp, 4
12784#    sw $t0, ($sp)
# end: Call at 448.7; stackHeight = 32
12788#    lw $t0, ($sp)
12792#    addu $sp, $sp, 4
# end: CallStatement at 448.7; stackHeight = 28
# begin: CallStatement at 449.9; stackHeight = 28
# begin: Call at 449.9; stackHeight = 28
# begin: This at 449.4; stackHeight = 28
12796#    subu $sp, $sp, 4
12800#    sw $s2, ($sp)
# end: This at 449.4; stackHeight = 32
# begin: Call at 449.21; stackHeight = 32
# begin: IdentifierExp at 449.18; stackHeight = 32
12804#    lw $t0, 4($sp)
12808#    subu $sp, $sp, 4
12812#    sw $t0, ($sp)
# end: IdentifierExp at 449.18; stackHeight = 36
# begin: IdentifierExp at 449.29; stackHeight = 36
12816#    lw $t0, 40($sp)
12820#    subu $sp, $sp, 4
12824#    sw $t0, ($sp)
# end: IdentifierExp at 449.29; stackHeight = 40
12828#    lw $t0, 4($sp)
12832#    sw $s2, 4($sp)
12836#    move $s2, $t0
12840#    beq $s2, $zero, nullPtrException
12844#    lw $t0, -12($s2)
12848#    lw $t0, 76($t0)
12852#    jalr $t0 # getLeft
12856#    addu $sp, $sp, 4
12860#    lw $s2, ($sp)
12864#    addu $sp, $sp, 4
12868#    subu $sp, $sp, 4
12872#    sw $t0, ($sp)
# end: Call at 449.21; stackHeight = 36
# begin: IdentifierExp at 449.45; stackHeight = 36
12876#    lw $t0, 40($sp)
12880#    subu $sp, $sp, 4
12884#    sw $t0, ($sp)
# end: IdentifierExp at 449.45; stackHeight = 40
12888#    lw $t0, 8($sp)
12892#    sw $s2, 8($sp)
12896#    move $s2, $t0
12900#    beq $s2, $zero, nullPtrException
12904#    lw $t0, -12($s2)
12908#    lw $t0, 80($t0)
12912#    jalr $t0 # setRight
12916#    addu $sp, $sp, 8
12920#    lw $s2, ($sp)
12924#    addu $sp, $sp, 4
12928#    subu $sp, $sp, 4
12932#    sw $t0, ($sp)
# end: Call at 449.9; stackHeight = 32
12936#    lw $t0, ($sp)
12940#    addu $sp, $sp, 4
# end: CallStatement at 449.9; stackHeight = 28
# begin: CallStatement at 450.7; stackHeight = 28
# begin: Call at 450.7; stackHeight = 28
# begin: IdentifierExp at 450.4; stackHeight = 28
12944#    lw $t0, 0($sp)
12948#    subu $sp, $sp, 4
12952#    sw $t0, ($sp)
# end: IdentifierExp at 450.4; stackHeight = 32
# begin: This at 450.15; stackHeight = 32
12956#    subu $sp, $sp, 4
12960#    sw $s2, ($sp)
# end: This at 450.15; stackHeight = 36
# begin: IdentifierExp at 450.21; stackHeight = 36
12964#    lw $t0, 40($sp)
12968#    subu $sp, $sp, 4
12972#    sw $t0, ($sp)
# end: IdentifierExp at 450.21; stackHeight = 40
12976#    lw $t0, 8($sp)
12980#    sw $s2, 8($sp)
12984#    move $s2, $t0
12988#    beq $s2, $zero, nullPtrException
12992#    lw $t0, -12($s2)
12996#    lw $t0, 84($t0)
13000#    jalr $t0 # setLeft
13004#    addu $sp, $sp, 8
13008#    lw $s2, ($sp)
13012#    addu $sp, $sp, 4
13016#    subu $sp, $sp, 4
13020#    sw $t0, ($sp)
# end: Call at 450.7; stackHeight = 32
13024#    lw $t0, ($sp)
13028#    addu $sp, $sp, 4
# end: CallStatement at 450.7; stackHeight = 28
# begin: CallStatement at 451.9; stackHeight = 28
# begin: Call at 451.9; stackHeight = 28
# begin: This at 451.4; stackHeight = 28
13032#    subu $sp, $sp, 4
13036#    sw $s2, ($sp)
# end: This at 451.4; stackHeight = 32
13040#    lw $t0, 0($sp)
13044#    sw $s2, 0($sp)
13048#    move $s2, $t0
13052#    beq $s2, $zero, nullPtrException
13056#    lw $t0, -12($s2)
13060#    lw $t0, 60($t0)
13064#    jalr $t0 # setRed
13068#    addu $sp, $sp, 0
13072#    lw $s2, ($sp)
13076#    addu $sp, $sp, 4
13080#    subu $sp, $sp, 4
13084#    sw $t0, ($sp)
# end: Call at 451.9; stackHeight = 32
13088#    lw $t0, ($sp)
13092#    addu $sp, $sp, 4
# end: CallStatement at 451.9; stackHeight = 28
# begin: CallStatement at 452.7; stackHeight = 28
# begin: Call at 452.7; stackHeight = 28
# begin: IdentifierExp at 452.4; stackHeight = 28
13096#    lw $t0, 0($sp)
13100#    subu $sp, $sp, 4
13104#    sw $t0, ($sp)
# end: IdentifierExp at 452.4; stackHeight = 32
13108#    lw $t0, 0($sp)
13112#    sw $s2, 0($sp)
13116#    move $s2, $t0
13120#    beq $s2, $zero, nullPtrException
13124#    lw $t0, -12($s2)
13128#    lw $t0, 20($t0)
13132#    jalr $t0 # setBlack
13136#    addu $sp, $sp, 0
13140#    lw $s2, ($sp)
13144#    addu $sp, $sp, 4
13148#    subu $sp, $sp, 4
13152#    sw $t0, ($sp)
# end: Call at 452.7; stackHeight = 32
13156#    lw $t0, ($sp)
13160#    addu $sp, $sp, 4
# end: CallStatement at 452.7; stackHeight = 28
13164#    addu $sp, $sp, 4
# end: Block at 443.50; stackHeight = 24
13168#    j if_done_899
13172:  if_else_899:
# begin: Block at 454.3; stackHeight = 24
# end: Block at 454.3; stackHeight = 24
13172:  if_done_899:
# end: If at 443.12; stackHeight = 24
13172:  if_done_900:
# end: If at 435.7; stackHeight = 24
13172#    addu $sp, $sp, 4
# end: Block at 433.8; stackHeight = 20
13176:  if_done_902:
# end: If at 427.3; stackHeight = 20
# end: Block at 426.32; stackHeight = 20
13176#    j if_done_905
13180:  if_else_905:
# begin: Block at 456.2; stackHeight = 20
# end: Block at 456.2; stackHeight = 20
13180:  if_done_905:
# end: If at 426.6; stackHeight = 20
13180#    addu $sp, $sp, 8
# end: Block at 423.23; stackHeight = 12
13184#    j if_done_908
13188:  if_else_908:
# begin: Block at 457.2; stackHeight = 12
# end: Block at 457.2; stackHeight = 12
13188:  if_done_908:
# end: If at 423.2; stackHeight = 12
# begin: IdentifierExp at 457.9; stackHeight = 12
13188#    lw $t0, 8($sp)
13192#    subu $sp, $sp, 4
13196#    sw $t0, ($sp)
# end: IdentifierExp at 457.9; stackHeight = 16
13200#    lw $t0, ($sp)
13204#    addu $sp, $sp, 4
13208#    addu $sp, $sp, 12
13212#    lw $ra, ($sp)
13216#    addu $sp, $sp, 4
13220#    jr $ra
.globl mth_NonNullRedBlackTree_helpPrint
13224:mth_NonNullRedBlackTree_helpPrint:
13224#    subu $sp, $sp, 4
13228#    sw $ra, ($sp)
# begin: CallStatement at 461.8; stackHeight = 0
# begin: Call at 461.8; stackHeight = 0
# begin: IdentifierExp at 461.2; stackHeight = 0
13232#    lw $t0, 8($s2)
13236#    subu $sp, $sp, 4
13240#    sw $t0, ($sp)
# end: IdentifierExp at 461.2; stackHeight = 4
# begin: Call at 461.36; stackHeight = 4
# begin: NewObject at 461.18; stackHeight = 4
13244#    li $s6, 2
13248#    li $s7, 1
13252#    jal newObject
13256#    la $t0, CLASS_BooleanList
13260#    sw $t0, -12($s7)
# end: NewObject at 461.18; stackHeight = 8
# begin: True at 461.41; stackHeight = 8
13264#    li $t0, 1
13268#    subu $sp, $sp, 4
13272#    sw $t0, ($sp)
# end: True at 461.41; stackHeight = 12
# begin: IdentifierExp at 461.47; stackHeight = 12
13276#    lw $t0, 20($sp)
13280#    subu $sp, $sp, 4
13284#    sw $t0, ($sp)
# end: IdentifierExp at 461.47; stackHeight = 16
13288#    lw $t0, 8($sp)
13292#    sw $s2, 8($sp)
13296#    move $s2, $t0
13300#    beq $s2, $zero, nullPtrException
13304#    lw $t0, -12($s2)
13308#    lw $t0, 12($t0)
13312#    jalr $t0 # init
13316#    addu $sp, $sp, 8
13320#    lw $s2, ($sp)
13324#    addu $sp, $sp, 4
13328#    subu $sp, $sp, 4
13332#    sw $t0, ($sp)
# end: Call at 461.36; stackHeight = 8
# begin: IdentifierExp at 461.52; stackHeight = 8
13336#    lw $t0, 12($sp)
13340#    subu $sp, $sp, 4
13344#    sw $t0, ($sp)
# end: IdentifierExp at 461.52; stackHeight = 12
13348#    lw $t0, 8($sp)
13352#    sw $s2, 8($sp)
13356#    move $s2, $t0
13360#    beq $s2, $zero, nullPtrException
13364#    lw $t0, -12($s2)
13368#    lw $t0, 44($t0)
13372#    jalr $t0 # helpPrint
13376#    addu $sp, $sp, 8
13380#    lw $s2, ($sp)
13384#    addu $sp, $sp, 4
13388#    subu $sp, $sp, 4
13392#    sw $t0, ($sp)
# end: Call at 461.8; stackHeight = 4
13396#    lw $t0, ($sp)
13400#    addu $sp, $sp, 4
# end: CallStatement at 461.8; stackHeight = 0
# begin: CallStatement at 462.2; stackHeight = 0
# begin: Call at 462.2; stackHeight = 0
# begin: This at 462.2; stackHeight = 0
13404#    subu $sp, $sp, 4
13408#    sw $s2, ($sp)
# end: This at 462.2; stackHeight = 4
# begin: IdentifierExp at 462.18; stackHeight = 4
13412#    lw $t0, 12($sp)
13416#    subu $sp, $sp, 4
13420#    sw $t0, ($sp)
# end: IdentifierExp at 462.18; stackHeight = 8
# begin: IdentifierExp at 462.22; stackHeight = 8
13424#    lw $t0, 12($sp)
13428#    subu $sp, $sp, 4
13432#    sw $t0, ($sp)
# end: IdentifierExp at 462.22; stackHeight = 12
13436#    lw $t0, 8($sp)
13440#    sw $s2, 8($sp)
13444#    move $s2, $t0
13448#    beq $s2, $zero, nullPtrException
13452#    lw $t0, -12($s2)
13456#    lw $t0, 92($t0)
13460#    jalr $t0 # helpPrintIndent
13464#    addu $sp, $sp, 8
13468#    lw $s2, ($sp)
13472#    addu $sp, $sp, 4
13476#    subu $sp, $sp, 4
13480#    sw $t0, ($sp)
# end: Call at 462.2; stackHeight = 4
13484#    lw $t0, ($sp)
13488#    addu $sp, $sp, 4
# end: CallStatement at 462.2; stackHeight = 0
# begin: If at 463.2; stackHeight = 0
# begin: Equals at 463.9; stackHeight = 0
# begin: IdentifierExp at 463.6; stackHeight = 0
13492#    lw $t0, 8($sp)
13496#    subu $sp, $sp, 4
13500#    sw $t0, ($sp)
# end: IdentifierExp at 463.6; stackHeight = 4
# begin: Null at 463.12; stackHeight = 4
13504#    subu $sp, $sp, 4
13508#    sw $0, ($sp)
# end: Null at 463.12; stackHeight = 8
13512#    lw $t2, ($sp)
13516#    addu $sp, $sp, 4
13520#    lw $t1, ($sp)
13524#    addu $sp, $sp, 4
13528#    seq $t0, $t1, $t2
13529##...subu $at,$t1,$t2
13533##...sltiu $t0,$at,1
13536#    subu $sp, $sp, 4
13540#    sw $t0, ($sp)
# end: Equals at 463.9; stackHeight = 4
13544#    lw $t0, ($sp)
13548#    addu $sp, $sp, 4
13552#    beq $t0, $zero, if_else_950
# begin: Block at 463.18; stackHeight = 0
# begin: CallStatement at 464.10; stackHeight = 0
# begin: Call at 464.10; stackHeight = 0
# begin: IdentifierExp at 464.6; stackHeight = 0
13556#    lw $t0, 4($sp)
13560#    subu $sp, $sp, 4
13564#    sw $t0, ($sp)
# end: IdentifierExp at 464.6; stackHeight = 4
# begin: StringLiteral at 464.19; stackHeight = 4
13568#    la $t0, strLit_933
13572#    subu $sp, $sp, 4
13576#    sw $t0, ($sp)
# end: StringLiteral at 464.19; stackHeight = 8
13580#    lw $t0, 4($sp)
13584#    sw $s2, 4($sp)
13588#    move $s2, $t0
13592#    beq $s2, $zero, nullPtrException
13596#    lw $t0, -12($s2)
13600#    lw $t0, 24($t0)
13604#    jalr $t0 # printStr
13608#    addu $sp, $sp, 4
13612#    lw $s2, ($sp)
13616#    addu $sp, $sp, 4
13620#    subu $sp, $sp, 4
13624#    sw $t0, ($sp)
# end: Call at 464.10; stackHeight = 4
13628#    lw $t0, ($sp)
13632#    addu $sp, $sp, 4
# end: CallStatement at 464.10; stackHeight = 0
# end: Block at 463.18; stackHeight = 0
13636#    j if_done_950
13640:  if_else_950:
# begin: If at 466.7; stackHeight = 0
# begin: InstVarAccess at 466.13; stackHeight = 0
# begin: IdentifierExp at 466.11; stackHeight = 0
13640#    lw $t0, 8($sp)
13644#    subu $sp, $sp, 4
13648#    sw $t0, ($sp)
# end: IdentifierExp at 466.11; stackHeight = 4
13652#    lw $t0, ($sp)
13656#    addu $sp, $sp, 4
13660#    beq $t0, $zero, nullPtrException
13664#    lw $t0, -64($t0)
13668#    subu $sp, $sp, 4
13672#    sw $t0, ($sp)
# end: InstVarAccess at 466.13; stackHeight = 4
13676#    lw $t0, ($sp)
13680#    addu $sp, $sp, 4
13684#    beq $t0, $zero, if_else_949
# begin: Block at 466.19; stackHeight = 0
# begin: CallStatement at 467.10; stackHeight = 0
# begin: Call at 467.10; stackHeight = 0
# begin: IdentifierExp at 467.6; stackHeight = 0
13688#    lw $t0, 4($sp)
13692#    subu $sp, $sp, 4
13696#    sw $t0, ($sp)
# end: IdentifierExp at 467.6; stackHeight = 4
# begin: StringLiteral at 467.19; stackHeight = 4
13700#    la $t0, strLit_940
13704#    subu $sp, $sp, 4
13708#    sw $t0, ($sp)
# end: StringLiteral at 467.19; stackHeight = 8
13712#    lw $t0, 4($sp)
13716#    sw $s2, 4($sp)
13720#    move $s2, $t0
13724#    beq $s2, $zero, nullPtrException
13728#    lw $t0, -12($s2)
13732#    lw $t0, 24($t0)
13736#    jalr $t0 # printStr
13740#    addu $sp, $sp, 4
13744#    lw $s2, ($sp)
13748#    addu $sp, $sp, 4
13752#    subu $sp, $sp, 4
13756#    sw $t0, ($sp)
# end: Call at 467.10; stackHeight = 4
13760#    lw $t0, ($sp)
13764#    addu $sp, $sp, 4
# end: CallStatement at 467.10; stackHeight = 0
# end: Block at 466.19; stackHeight = 0
13768#    j if_done_949
13772:  if_else_949:
# begin: Block at 469.7; stackHeight = 0
# begin: CallStatement at 470.10; stackHeight = 0
# begin: Call at 470.10; stackHeight = 0
# begin: IdentifierExp at 470.6; stackHeight = 0
13772#    lw $t0, 4($sp)
13776#    subu $sp, $sp, 4
13780#    sw $t0, ($sp)
# end: IdentifierExp at 470.6; stackHeight = 4
# begin: StringLiteral at 470.19; stackHeight = 4
13784#    la $t0, strLit_945
13788#    subu $sp, $sp, 4
13792#    sw $t0, ($sp)
# end: StringLiteral at 470.19; stackHeight = 8
13796#    lw $t0, 4($sp)
13800#    sw $s2, 4($sp)
13804#    move $s2, $t0
13808#    beq $s2, $zero, nullPtrException
13812#    lw $t0, -12($s2)
13816#    lw $t0, 24($t0)
13820#    jalr $t0 # printStr
13824#    addu $sp, $sp, 4
13828#    lw $s2, ($sp)
13832#    addu $sp, $sp, 4
13836#    subu $sp, $sp, 4
13840#    sw $t0, ($sp)
# end: Call at 470.10; stackHeight = 4
13844#    lw $t0, ($sp)
13848#    addu $sp, $sp, 4
# end: CallStatement at 470.10; stackHeight = 0
# end: Block at 469.7; stackHeight = 0
13852:  if_done_949:
# end: If at 466.7; stackHeight = 0
13852:  if_done_950:
# end: If at 463.2; stackHeight = 0
# begin: If at 472.2; stackHeight = 0
# begin: Call at 472.6; stackHeight = 0
# begin: This at 472.6; stackHeight = 0
13852#    subu $sp, $sp, 4
13856#    sw $s2, ($sp)
# end: This at 472.6; stackHeight = 4
13860#    lw $t0, 0($sp)
13864#    sw $s2, 0($sp)
13868#    move $s2, $t0
13872#    beq $s2, $zero, nullPtrException
13876#    lw $t0, -12($s2)
13880#    lw $t0, 16($t0)
13884#    jalr $t0 # isBlack
13888#    addu $sp, $sp, 0
13892#    lw $s2, ($sp)
13896#    addu $sp, $sp, 4
13900#    subu $sp, $sp, 4
13904#    sw $t0, ($sp)
# end: Call at 472.6; stackHeight = 4
13908#    lw $t0, ($sp)
13912#    addu $sp, $sp, 4
13916#    beq $t0, $zero, if_else_963
# begin: Block at 472.17; stackHeight = 0
# begin: CallStatement at 473.10; stackHeight = 0
# begin: Call at 473.10; stackHeight = 0
# begin: IdentifierExp at 473.6; stackHeight = 0
13920#    lw $t0, 4($sp)
13924#    subu $sp, $sp, 4
13928#    sw $t0, ($sp)
# end: IdentifierExp at 473.6; stackHeight = 4
# begin: StringLiteral at 473.19; stackHeight = 4
13932#    la $t0, strLit_954
13936#    subu $sp, $sp, 4
13940#    sw $t0, ($sp)
# end: StringLiteral at 473.19; stackHeight = 8
13944#    lw $t0, 4($sp)
13948#    sw $s2, 4($sp)
13952#    move $s2, $t0
13956#    beq $s2, $zero, nullPtrException
13960#    lw $t0, -12($s2)
13964#    lw $t0, 24($t0)
13968#    jalr $t0 # printStr
13972#    addu $sp, $sp, 4
13976#    lw $s2, ($sp)
13980#    addu $sp, $sp, 4
13984#    subu $sp, $sp, 4
13988#    sw $t0, ($sp)
# end: Call at 473.10; stackHeight = 4
13992#    lw $t0, ($sp)
13996#    addu $sp, $sp, 4
# end: CallStatement at 473.10; stackHeight = 0
# end: Block at 472.17; stackHeight = 0
14000#    j if_done_963
14004:  if_else_963:
# begin: Block at 475.7; stackHeight = 0
# begin: CallStatement at 476.10; stackHeight = 0
# begin: Call at 476.10; stackHeight = 0
# begin: IdentifierExp at 476.6; stackHeight = 0
14004#    lw $t0, 4($sp)
14008#    subu $sp, $sp, 4
14012#    sw $t0, ($sp)
# end: IdentifierExp at 476.6; stackHeight = 4
# begin: StringLiteral at 476.19; stackHeight = 4
14016#    la $t0, strLit_959
14020#    subu $sp, $sp, 4
14024#    sw $t0, ($sp)
# end: StringLiteral at 476.19; stackHeight = 8
14028#    lw $t0, 4($sp)
14032#    sw $s2, 4($sp)
14036#    move $s2, $t0
14040#    beq $s2, $zero, nullPtrException
14044#    lw $t0, -12($s2)
14048#    lw $t0, 24($t0)
14052#    jalr $t0 # printStr
14056#    addu $sp, $sp, 4
14060#    lw $s2, ($sp)
14064#    addu $sp, $sp, 4
14068#    subu $sp, $sp, 4
14072#    sw $t0, ($sp)
# end: Call at 476.10; stackHeight = 4
14076#    lw $t0, ($sp)
14080#    addu $sp, $sp, 4
# end: CallStatement at 476.10; stackHeight = 0
# end: Block at 475.7; stackHeight = 0
14084:  if_done_963:
# end: If at 472.2; stackHeight = 0
# begin: CallStatement at 478.6; stackHeight = 0
# begin: Call at 478.6; stackHeight = 0
# begin: IdentifierExp at 478.2; stackHeight = 0
14084#    lw $t0, 4($sp)
14088#    subu $sp, $sp, 4
14092#    sw $t0, ($sp)
# end: IdentifierExp at 478.2; stackHeight = 4
# begin: IdentifierExp at 478.15; stackHeight = 4
14096#    lw $t0, -16($s2)
14100#    subu $sp, $sp, 8
14104#    sw $s5, 4($sp)
14108#    sw $t0, ($sp)
# end: IdentifierExp at 478.15; stackHeight = 12
14112#    lw $t0, 8($sp)
14116#    sw $s2, 8($sp)
14120#    move $s2, $t0
14124#    beq $s2, $zero, nullPtrException
14128#    lw $t0, -12($s2)
14132#    lw $t0, 32($t0)
14136#    jalr $t0 # printInt
14140#    addu $sp, $sp, 8
14144#    lw $s2, ($sp)
14148#    addu $sp, $sp, 4
14152#    subu $sp, $sp, 4
14156#    sw $t0, ($sp)
# end: Call at 478.6; stackHeight = 4
14160#    lw $t0, ($sp)
14164#    addu $sp, $sp, 4
# end: CallStatement at 478.6; stackHeight = 0
# begin: CallStatement at 479.6; stackHeight = 0
# begin: Call at 479.6; stackHeight = 0
# begin: IdentifierExp at 479.2; stackHeight = 0
14168#    lw $t0, 4($sp)
14172#    subu $sp, $sp, 4
14176#    sw $t0, ($sp)
# end: IdentifierExp at 479.2; stackHeight = 4
# begin: StringLiteral at 479.15; stackHeight = 4
14180#    la $t0, strLit_969
14184#    subu $sp, $sp, 4
14188#    sw $t0, ($sp)
# end: StringLiteral at 479.15; stackHeight = 8
14192#    lw $t0, 4($sp)
14196#    sw $s2, 4($sp)
14200#    move $s2, $t0
14204#    beq $s2, $zero, nullPtrException
14208#    lw $t0, -12($s2)
14212#    lw $t0, 24($t0)
14216#    jalr $t0 # printStr
14220#    addu $sp, $sp, 4
14224#    lw $s2, ($sp)
14228#    addu $sp, $sp, 4
14232#    subu $sp, $sp, 4
14236#    sw $t0, ($sp)
# end: Call at 479.6; stackHeight = 4
14240#    lw $t0, ($sp)
14244#    addu $sp, $sp, 4
# end: CallStatement at 479.6; stackHeight = 0
# begin: CallStatement at 480.7; stackHeight = 0
# begin: Call at 480.7; stackHeight = 0
# begin: IdentifierExp at 480.2; stackHeight = 0
14248#    lw $t0, 4($s2)
14252#    subu $sp, $sp, 4
14256#    sw $t0, ($sp)
# end: IdentifierExp at 480.2; stackHeight = 4
# begin: Call at 480.35; stackHeight = 4
# begin: NewObject at 480.17; stackHeight = 4
14260#    li $s6, 2
14264#    li $s7, 1
14268#    jal newObject
14272#    la $t0, CLASS_BooleanList
14276#    sw $t0, -12($s7)
# end: NewObject at 480.17; stackHeight = 8
# begin: False at 480.40; stackHeight = 8
14280#    subu $sp, $sp, 4
14284#    sw $zero, ($sp)
# end: False at 480.40; stackHeight = 12
# begin: IdentifierExp at 480.47; stackHeight = 12
14288#    lw $t0, 20($sp)
14292#    subu $sp, $sp, 4
14296#    sw $t0, ($sp)
# end: IdentifierExp at 480.47; stackHeight = 16
14300#    lw $t0, 8($sp)
14304#    sw $s2, 8($sp)
14308#    move $s2, $t0
14312#    beq $s2, $zero, nullPtrException
14316#    lw $t0, -12($s2)
14320#    lw $t0, 12($t0)
14324#    jalr $t0 # init
14328#    addu $sp, $sp, 8
14332#    lw $s2, ($sp)
14336#    addu $sp, $sp, 4
14340#    subu $sp, $sp, 4
14344#    sw $t0, ($sp)
# end: Call at 480.35; stackHeight = 8
# begin: IdentifierExp at 480.52; stackHeight = 8
14348#    lw $t0, 12($sp)
14352#    subu $sp, $sp, 4
14356#    sw $t0, ($sp)
# end: IdentifierExp at 480.52; stackHeight = 12
14360#    lw $t0, 8($sp)
14364#    sw $s2, 8($sp)
14368#    move $s2, $t0
14372#    beq $s2, $zero, nullPtrException
14376#    lw $t0, -12($s2)
14380#    lw $t0, 44($t0)
14384#    jalr $t0 # helpPrint
14388#    addu $sp, $sp, 8
14392#    lw $s2, ($sp)
14396#    addu $sp, $sp, 4
14400#    subu $sp, $sp, 4
14404#    sw $t0, ($sp)
# end: Call at 480.7; stackHeight = 4
14408#    lw $t0, ($sp)
14412#    addu $sp, $sp, 4
# end: CallStatement at 480.7; stackHeight = 0
14416#    addu $sp, $sp, 0
14420#    lw $ra, ($sp)
14424#    addu $sp, $sp, 4
14428#    jr $ra
.globl mth_NonNullRedBlackTree_helpPrintIndent
14432:mth_NonNullRedBlackTree_helpPrintIndent:
14432#    subu $sp, $sp, 4
14436#    sw $ra, ($sp)
# begin: If at 484.2; stackHeight = 0
# begin: Not at 484.9; stackHeight = 0
# begin: Equals at 484.9; stackHeight = 0
# begin: IdentifierExp at 484.6; stackHeight = 0
14440#    lw $t0, 8($sp)
14444#    subu $sp, $sp, 4
14448#    sw $t0, ($sp)
# end: IdentifierExp at 484.6; stackHeight = 4
# begin: Null at 484.12; stackHeight = 4
14452#    subu $sp, $sp, 4
14456#    sw $0, ($sp)
# end: Null at 484.12; stackHeight = 8
14460#    lw $t2, ($sp)
14464#    addu $sp, $sp, 4
14468#    lw $t1, ($sp)
14472#    addu $sp, $sp, 4
14476#    seq $t0, $t1, $t2
14477##...subu $at,$t1,$t2
14481##...sltiu $t0,$at,1
14484#    subu $sp, $sp, 4
14488#    sw $t0, ($sp)
# end: Equals at 484.9; stackHeight = 4
14492#    lw $t0, ($sp)
14496#    xor $t0, $t0, 1
14500#    sw $t0, ($sp)
# end: Not at 484.9; stackHeight = 4
14504#    lw $t0, ($sp)
14508#    addu $sp, $sp, 4
14512#    beq $t0, $zero, if_else_1027
# begin: Block at 484.18; stackHeight = 0
# begin: If at 485.6; stackHeight = 0
# begin: Not at 485.18; stackHeight = 0
# begin: Equals at 485.18; stackHeight = 0
# begin: InstVarAccess at 485.12; stackHeight = 0
# begin: IdentifierExp at 485.10; stackHeight = 0
14516#    lw $t0, 8($sp)
14520#    subu $sp, $sp, 4
14524#    sw $t0, ($sp)
# end: IdentifierExp at 485.10; stackHeight = 4
14528#    lw $t0, ($sp)
14532#    addu $sp, $sp, 4
14536#    beq $t0, $zero, nullPtrException
14540#    lw $t0, 16($t0)
14544#    subu $sp, $sp, 4
14548#    sw $t0, ($sp)
# end: InstVarAccess at 485.12; stackHeight = 4
# begin: Null at 485.21; stackHeight = 4
14552#    subu $sp, $sp, 4
14556#    sw $0, ($sp)
# end: Null at 485.21; stackHeight = 8
14560#    lw $t2, ($sp)
14564#    addu $sp, $sp, 4
14568#    lw $t1, ($sp)
14572#    addu $sp, $sp, 4
14576#    seq $t0, $t1, $t2
14577##...subu $at,$t1,$t2
14581##...sltiu $t0,$at,1
14584#    subu $sp, $sp, 4
14588#    sw $t0, ($sp)
# end: Equals at 485.18; stackHeight = 4
14592#    lw $t0, ($sp)
14596#    xor $t0, $t0, 1
14600#    sw $t0, ($sp)
# end: Not at 485.18; stackHeight = 4
14604#    lw $t0, ($sp)
14608#    addu $sp, $sp, 4
14612#    beq $t0, $zero, if_else_1024
# begin: Block at 485.27; stackHeight = 0
# begin: CallStatement at 486.3; stackHeight = 0
# begin: Call at 486.3; stackHeight = 0
# begin: This at 486.3; stackHeight = 0
14616#    subu $sp, $sp, 4
14620#    sw $s2, ($sp)
# end: This at 486.3; stackHeight = 4
# begin: InstVarAccess at 486.21; stackHeight = 4
# begin: IdentifierExp at 486.19; stackHeight = 4
14624#    lw $t0, 12($sp)
14628#    subu $sp, $sp, 4
14632#    sw $t0, ($sp)
# end: IdentifierExp at 486.19; stackHeight = 8
14636#    lw $t0, ($sp)
14640#    addu $sp, $sp, 4
14644#    beq $t0, $zero, nullPtrException
14648#    lw $t0, 16($t0)
14652#    subu $sp, $sp, 4
14656#    sw $t0, ($sp)
# end: InstVarAccess at 486.21; stackHeight = 8
# begin: IdentifierExp at 486.28; stackHeight = 8
14660#    lw $t0, 12($sp)
14664#    subu $sp, $sp, 4
14668#    sw $t0, ($sp)
# end: IdentifierExp at 486.28; stackHeight = 12
14672#    lw $t0, 8($sp)
14676#    sw $s2, 8($sp)
14680#    move $s2, $t0
14684#    beq $s2, $zero, nullPtrException
14688#    lw $t0, -12($s2)
14692#    lw $t0, 92($t0)
14696#    jalr $t0 # helpPrintIndent
14700#    addu $sp, $sp, 8
14704#    lw $s2, ($sp)
14708#    addu $sp, $sp, 4
14712#    subu $sp, $sp, 4
14716#    sw $t0, ($sp)
# end: Call at 486.3; stackHeight = 4
14720#    lw $t0, ($sp)
14724#    addu $sp, $sp, 4
# end: CallStatement at 486.3; stackHeight = 0
# begin: If at 487.3; stackHeight = 0
# begin: Equals at 487.14; stackHeight = 0
# begin: InstVarAccess at 487.9; stackHeight = 0
# begin: IdentifierExp at 487.7; stackHeight = 0
14728#    lw $t0, 8($sp)
14732#    subu $sp, $sp, 4
14736#    sw $t0, ($sp)
# end: IdentifierExp at 487.7; stackHeight = 4
14740#    lw $t0, ($sp)
14744#    addu $sp, $sp, 4
14748#    beq $t0, $zero, nullPtrException
14752#    lw $t0, -64($t0)
14756#    subu $sp, $sp, 4
14760#    sw $t0, ($sp)
# end: InstVarAccess at 487.9; stackHeight = 4
# begin: InstVarAccess at 487.24; stackHeight = 4
# begin: InstVarAccess at 487.19; stackHeight = 4
# begin: IdentifierExp at 487.17; stackHeight = 4
14764#    lw $t0, 12($sp)
14768#    subu $sp, $sp, 4
14772#    sw $t0, ($sp)
# end: IdentifierExp at 487.17; stackHeight = 8
14776#    lw $t0, ($sp)
14780#    addu $sp, $sp, 4
14784#    beq $t0, $zero, nullPtrException
14788#    lw $t0, 16($t0)
14792#    subu $sp, $sp, 4
14796#    sw $t0, ($sp)
# end: InstVarAccess at 487.19; stackHeight = 8
14800#    lw $t0, ($sp)
14804#    addu $sp, $sp, 4
14808#    beq $t0, $zero, nullPtrException
14812#    lw $t0, -64($t0)
14816#    subu $sp, $sp, 4
14820#    sw $t0, ($sp)
# end: InstVarAccess at 487.24; stackHeight = 8
14824#    lw $t2, ($sp)
14828#    addu $sp, $sp, 4
14832#    lw $t1, ($sp)
14836#    addu $sp, $sp, 4
14840#    seq $t0, $t1, $t2
14841##...subu $at,$t1,$t2
14845##...sltiu $t0,$at,1
14848#    subu $sp, $sp, 4
14852#    sw $t0, ($sp)
# end: Equals at 487.14; stackHeight = 4
14856#    lw $t0, ($sp)
14860#    addu $sp, $sp, 4
14864#    beq $t0, $zero, if_else_1017
# begin: Block at 487.30; stackHeight = 0
# begin: CallStatement at 488.11; stackHeight = 0
# begin: Call at 488.11; stackHeight = 0
# begin: IdentifierExp at 488.7; stackHeight = 0
14868#    lw $t0, 4($sp)
14872#    subu $sp, $sp, 4
14876#    sw $t0, ($sp)
# end: IdentifierExp at 488.7; stackHeight = 4
# begin: StringLiteral at 488.20; stackHeight = 4
14880#    la $t0, strLit_1008
14884#    subu $sp, $sp, 4
14888#    sw $t0, ($sp)
# end: StringLiteral at 488.20; stackHeight = 8
14892#    lw $t0, 4($sp)
14896#    sw $s2, 4($sp)
14900#    move $s2, $t0
14904#    beq $s2, $zero, nullPtrException
14908#    lw $t0, -12($s2)
14912#    lw $t0, 24($t0)
14916#    jalr $t0 # printStr
14920#    addu $sp, $sp, 4
14924#    lw $s2, ($sp)
14928#    addu $sp, $sp, 4
14932#    subu $sp, $sp, 4
14936#    sw $t0, ($sp)
# end: Call at 488.11; stackHeight = 4
14940#    lw $t0, ($sp)
14944#    addu $sp, $sp, 4
# end: CallStatement at 488.11; stackHeight = 0
# end: Block at 487.30; stackHeight = 0
14948#    j if_done_1017
14952:  if_else_1017:
# begin: Block at 490.8; stackHeight = 0
# begin: CallStatement at 491.11; stackHeight = 0
# begin: Call at 491.11; stackHeight = 0
# begin: IdentifierExp at 491.7; stackHeight = 0
14952#    lw $t0, 4($sp)
14956#    subu $sp, $sp, 4
14960#    sw $t0, ($sp)
# end: IdentifierExp at 491.7; stackHeight = 4
# begin: StringLiteral at 491.20; stackHeight = 4
14964#    la $t0, strLit_1013
14968#    subu $sp, $sp, 4
14972#    sw $t0, ($sp)
# end: StringLiteral at 491.20; stackHeight = 8
14976#    lw $t0, 4($sp)
14980#    sw $s2, 4($sp)
14984#    move $s2, $t0
14988#    beq $s2, $zero, nullPtrException
14992#    lw $t0, -12($s2)
14996#    lw $t0, 24($t0)
15000#    jalr $t0 # printStr
15004#    addu $sp, $sp, 4
15008#    lw $s2, ($sp)
15012#    addu $sp, $sp, 4
15016#    subu $sp, $sp, 4
15020#    sw $t0, ($sp)
# end: Call at 491.11; stackHeight = 4
15024#    lw $t0, ($sp)
15028#    addu $sp, $sp, 4
# end: CallStatement at 491.11; stackHeight = 0
# end: Block at 490.8; stackHeight = 0
15032:  if_done_1017:
# end: If at 487.3; stackHeight = 0
# end: Block at 485.27; stackHeight = 0
15032#    j if_done_1024
15036:  if_else_1024:
# begin: Block at 494.11; stackHeight = 0
# begin: CallStatement at 495.7; stackHeight = 0
# begin: Call at 495.7; stackHeight = 0
# begin: IdentifierExp at 495.3; stackHeight = 0
15036#    lw $t0, 4($sp)
15040#    subu $sp, $sp, 4
15044#    sw $t0, ($sp)
# end: IdentifierExp at 495.3; stackHeight = 4
# begin: StringLiteral at 495.16; stackHeight = 4
15048#    la $t0, strLit_1020
15052#    subu $sp, $sp, 4
15056#    sw $t0, ($sp)
# end: StringLiteral at 495.16; stackHeight = 8
15060#    lw $t0, 4($sp)
15064#    sw $s2, 4($sp)
15068#    move $s2, $t0
15072#    beq $s2, $zero, nullPtrException
15076#    lw $t0, -12($s2)
15080#    lw $t0, 24($t0)
15084#    jalr $t0 # printStr
15088#    addu $sp, $sp, 4
15092#    lw $s2, ($sp)
15096#    addu $sp, $sp, 4
15100#    subu $sp, $sp, 4
15104#    sw $t0, ($sp)
# end: Call at 495.7; stackHeight = 4
15108#    lw $t0, ($sp)
15112#    addu $sp, $sp, 4
# end: CallStatement at 495.7; stackHeight = 0
# end: Block at 494.11; stackHeight = 0
15116:  if_done_1024:
# end: If at 485.6; stackHeight = 0
# end: Block at 484.18; stackHeight = 0
15116#    j if_done_1027
15120:  if_else_1027:
# begin: Block at 498.5; stackHeight = 0
# end: Block at 498.5; stackHeight = 0
15120:  if_done_1027:
# end: If at 484.2; stackHeight = 0
15120#    addu $sp, $sp, 0
15124#    lw $ra, ($sp)
15128#    addu $sp, $sp, 4
15132#    jr $ra
.globl mth_BooleanList_init
15136:mth_BooleanList_init:
15136#    subu $sp, $sp, 4
15140#    sw $ra, ($sp)
# begin: Assign at 506.11; stackHeight = 0
# begin: IdentifierExp at 506.13; stackHeight = 0
15144#    lw $t0, 8($sp)
15148#    subu $sp, $sp, 4
15152#    sw $t0, ($sp)
# end: IdentifierExp at 506.13; stackHeight = 4
15156#    lw $t0, ($sp)
15160#    addu $sp, $sp, 4
15164#    sw $t0, -16($s2)
# end: Assign at 506.11; stackHeight = 0
# begin: Assign at 507.12; stackHeight = 0
# begin: IdentifierExp at 507.14; stackHeight = 0
15168#    lw $t0, 4($sp)
15172#    subu $sp, $sp, 4
15176#    sw $t0, ($sp)
# end: IdentifierExp at 507.14; stackHeight = 4
15180#    lw $t0, ($sp)
15184#    addu $sp, $sp, 4
15188#    sw $t0, 4($s2)
# end: Assign at 507.12; stackHeight = 0
# begin: This at 508.9; stackHeight = 0
15192#    subu $sp, $sp, 4
15196#    sw $s2, ($sp)
# end: This at 508.9; stackHeight = 4
15200#    lw $t0, ($sp)
15204#    addu $sp, $sp, 4
15208#    addu $sp, $sp, 0
15212#    lw $ra, ($sp)
15216#    addu $sp, $sp, 4
15220#    jr $ra
##############################################################
# MiniJava/UP library for MIPS/Spim -- version that assumes
#    one-word boolean on stack
# author: Steven R. Vegdahl
# date: 7-13 July 2004
# modified 12-17 March 2007
# modified 3-25 May 2007
# modified 2 May 2015
# modified 7 March 2016
# modified 11 May - 31 June 2017
# modified 2024 Steven Libby changed calling conventions
#               This is now passed in s2, 
#               and methods don't pop parameters
# status: Seems to work on all test cases.
###############################################################




###############################################################
# hashCode() - library method (class Object)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer (for Object)
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15224:mth_Object_hashCode:
    # for now, we'll return the -8 offset word, shifted/added to
    # itself, then XORed with a fixed "random" value
15224#    lw $t0,-8($s2) # get word with hash bits from this
15228#    srl $t1,$t0,11 # shift/add to introduce more "randomness"
15232#    addu $t0,$t1

15236#    jr $ra # return, no change to the stack

###############################################################
# equals() - library method (class Object)
# - tests whether two objects are equal
# - produces boolean that tells whether two objects are equal--
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15240:mth_Object_equals:
15240#    move $t0,$s2 # first pointer (this)
15244#    lw $t1,($sp) # second pointer
15248#    seq $t0,$t0,$t1 # produce boolean telling if they are equal
15249##...subu $at,$t0,$t1
15253##...sltiu $t0,$at,1

15256#    jr $ra # return

###############################################################
# hashCode() - library method (class String)
# - returns a hash code for an object
# - produces int that is the object's hash code
#   meaning that they are the same physical object
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - 1 if the objects were the same; 0 otherwise
###############################################################
15260:mth_String_hashCode:
15260#    move $t0,$s2 # put this pointer in t0

15264#    li $t2,0 # current hash value
15268#    lw $t1,-4($t0) # negative of number of characters in string
15272#    beq $t1,$zero,done_hashCode_String # if zero length => done
15276#    addu $t0,$t1 # address of first character in string +12,
                 # not accounting for padding and header words
15280#    and $t0,0xfffffffc # adjust for padding
15281##...lui $at,65535
15285##...ori $at,$at,0xfffc
15289##...and $t0,$t0,$at
15292#    subu $t1,$t0,$t1 # address at end of string +12
15296:loop_hashCode_String:    
15296#    sll $t4,$t2,5 # multiply by 32
15300#    subu $t2,$t4,$t2 # subtract original, so that it's now multiply by 31
15304#    lbu $t3,-12($t0) # current character
15308#    addu $t2,$t3 # add in current character
15312#    addu $t0,1 # go to next character's address
15316#    bne $t0,$t1,loop_hashCode_String # loop back if more
15320:done_hashCode_String:    

    # push int on stack
15320#    move $t0, $t2 # put $t2 in return slot
15324#    jr $ra # return

###############################################################
# toString() - library method (class Object)
# - returns a String version of the object
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
# ****NOTE: this method counts on the fact that the hashCode method
# ****is in slot 0 of the vtable    
###############################################################
15328:mth_Object_toString:
    # we need to append:
    # - a string created from the object name in the negative portion of
    #   the vtable
    # - an at-sign "@"
    # - the hex version of the hashcode for the object, with no leading
    #   zeros

    # save return address. Get new this pointer
15328#    subu $sp,4
15332#    sw $ra,($sp)
    
    # get hash value
15336#    lw $t2,-12($s2) # vtable address
15340#    lw $t0,($t2) # method address
15344#    jalr $t0
15348#    subu $sp,8 # push result (int in $t0) on stack
15352#    sw $s5,4($sp)
15356#    sw $t0,($sp)

    # compute print-size of hash value
15360#    li $t0, 1
15364#    lw $t1, ($sp)
15368#    srl $t1,$t1,4
15372#    beq $t1,$zero,toString_skip_loop
15376:toString_loop_top:
15376#    addu $t0,1
15380#    srl $t1,$t1,4
15384#    bne $t1,$zero,toString_loop_top
15388:toString_skip_loop:
15388#    subu $sp,8
15392#    sw $s5,4($sp)
15396#    sw $t0,($sp)
    
    ################################################################
    # at this point, the stack looks like (from top):
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    ################################################################

    # determine the size of the "prefix string"
15400#    lw $t2,-12($s2) # vtable address
15404#    move $t0,$t2
15408:toString_checkTagBit:
15408#    subu $t0,1
15412#    lb $t1,($t0)
15416#    and $t1,0x80
15417##...lui $at,0
15421##...ori $at,$at,0x80
15425##...and $t1,$t1,$at
15428#    beq $t1,$zero,toString_checkTagBit
15432#    subu $t1,$t2,$t0 # size of the prefix string, in bytes
15436#    subu $sp,8
15440#    sw $t1,($sp)
15444#    sw $s5,4($sp) # push size onto stack

    # determine the header words for the string object's header
15448#    move $s7,$zero # -4 offset header word
15452#    lw $t4,8($sp) # bytes for hash value
15456#    addu $t4,$t1 # bytes for prefix
    # add 8, to account for:
    #  - +1 for the '@' character
    #  - +4 for the vtable word
    #  - +3 to get the effect of rounding up rather than down
15460#    addu $t4,8
15464#    srl $s6,$t4,2 # divide by 4
    
    # allocate the object
15468#    jal newObject
        
    ################################################################
    # at this point, the stack looks like (from top):
    # - new object, allocated to be our string
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $s7 also contains the address of the new object
    ################################################################

15472#    li $t0,CLASS_String # store string vtable address into ...
15476#    sw $t0,-12($s7) # ... -12 offset in object header
15480#    lw $t2,-12($s2) # our object's vtable address
15484#    lw $t5,4($sp) # number characters in prefix
15488#    lw $t1,12($sp) # number of characters in hashcode
15492#    addu $t3,$t1,$t5 # number of characters in string ...
15496#    addu $t3,1 # ... including the '@' character
15500#    subu $t0,$zero,$t3 # store negated length into ...
15504#    sw $t0,-4($s7) # ... -4 offset header word
15508#    lw $t0,-8($s7) # get -8 offset header-word
15512#    bge $t0,$zero,skipMask_toString # don't strip hash code if not there
15513##...slt $at,$t0,$zero
15517##...beq $at,$zero,15536
15520#    and $t0,0xff # mask off object's hash value ...
15521##...lui $at,0
15525##...ori $at,$at,0xff
15529##...and $t0,$t0,$at
15532#    sw $t0,-8($s7) # ... and store back into -8 header-word
15536:skipMask_toString:
15536#    sll $t0,2 # convert to byte-offset (and shift off top bit, if there)
15540#    subu $t0,$s7,$t0 # address first byte of string +8
#    addu $t1,$t0,$t3 # address of one past last byte of string +8
    
    # copy the prefix into the string
15544#    subu $t4,$t2,$t5
15548:toString_copyLoop:    
15548#    lb $t3,($t4)
15552#    and $t3,0x7f # mask off sign bit (in case first word)
15553##...lui $at,0
15557##...ori $at,$at,0x7f
15561##...and $t3,$t3,$at
15564#    sb $t3,-8($t0)
15568#    addu $t4,1
15572#    addu $t0,1
15576#    blt $t4,$t2,toString_copyLoop
15577##...slt $at,$t4,$t2
15581##...bne $at,$zero,15548

    # copy the '@' sign
15584#    li $t3,'@'
15588#    sb $t3,-8($t0)
                
    ################################################################
    # at this point, the stack looks like (from top):
    # - the new string object that we are building
    # - number of characters in the prefix
    # - GC tag (5)
    # - print-size (in bytes) of the hash value
    # - GC tag (5)
    # - hash value
    # - GC tag (5)
    # - return address
    # - old this pointer
    # - ... rest of stack
    # $t0 contains the address of next byte to store, +8
    # $t1 the number of characters in the hashcode
    # $s2 contains the object on which toString() has been called
    # $s7 also contains the address of the new object
    ################################################################

    # store the hex version of the hash value
15592#    addu $t2,$t0,$t1 # address of last byte in string to store +8
15596#    lw $t3,20($sp) # hash code to print
15600:toString_hashCopyLoop:
15600#    and $t4,$t3,0xf
15604#    srl $t3,4
15608#    lb $t4,hexChars($t4)
15612#    sb $t4,-8($t2)
15616#    subu $t2,$t2,1
15620#    bgt $t2,$t0,toString_hashCopyLoop
15621##...slt $at,$t0,$t2
15625##...bne $at,$zero,15600

    # blow away stack until return address
    # put return address in $ra, 
    # and put return string on top of stack
15628#    addu $sp,28
15632#    lw $ra,($sp)
15636#    addu $sp,4
15640#    move $t0, $s7 # return string we created
15644#    jr $ra

###############################################################
# equals() - library method (class String)
# - the String version of the .equals method
# - produces false if the second object is null or is not a String ;
#   otherwise produces true iff the two strings have the same contents
# - parameters:
#   - $s2 - this-pointer
#   - ($sp) - object to compare to
#   - 4($sp) - old-this-pointer
# - return-value:
#   - ($sp) - 1 if the objects were the same; 0 otherwise
###############################################################
15648:mth_String_equals:
    
    # quick test for obvious false
15648#    lw $t0,($sp) # second parameter
15652#    beq $t0,$zero,goEsFalse # go return false if null
15656#    lw $t1,-12($t0) # vtable pointer
15660#    la $t2,CLASS_String # string vtable pointer
15664#    bne $t1,$t2,goEsFalse # go return false if not a string

    # save $ra, $s2, second parameter
    # we don't need to swap $s2, 
    # because it's still in the string class.
15668#    subu $sp,12
15672#    sw $ra,8($sp)
15676#    sw $s2,4($sp)
15680#    sw $t0,($sp)
15684#    jal mth_String_compareTo
15688#    lw $s2, 4($sp) #restore this pointer and pop parameters
15692#    addu $sp, 8 # pop parameters

    # return value is 1 iff result is 0; else 0
15696#    seq $t0,$t0,$zero
15697##...subu $at,$t0,$zero
15701##...sltiu $t0,$at,1

    # pop return address and return $t0
15704#    lw $ra,($sp)
15708#    addu $sp,4

15712#    jr $ra # return
    
15716:goEsFalse:
    # put 0 in $t0 and return
15716#    li $t0, 0
15720#    jr $ra # return

###############################################################
# toString() - library method (class String)
# - returns a String version of the object
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - the string version of the object
###############################################################
15724:mth_String_toString:
    #we are a string, so return this.
15724#    move $t0, $s2
15728#    jr $ra

###############################################################
# readLine() - library method (class Lib)
# - reads line from standard input
# - produces String that contains the line read, except that it
#   does not include the end-of-line character-sequence. An
#   end-of-line character-sequence is one of the following:
#   - a return character followed by a newline character
#   - a newline character not preceded by a return character
#   - a return character not followed by a newline character
#   - an end-of-file character that follows at least one data
#     character
# - returns null on end-of-file
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - pointer to string containing line that was read
# - anomalies:
#   - with bare "return", looks ahead one character to check for
#     newline.  This could cause non-intuitive behavior when
#     run interactively.
###############################################################
15732:mth_Lib_readLine:
    
15732#    subu $sp,$sp,8 # allocate space for data tag, saving $ra
15736#    sw $ra, 4($sp) # save $ra
15740#    move $t1,$sp # save "original" sp

15744:  doRead:

    # read the character
15744#    jal readLogicalChar

    # if we have a 'return', read another character to check for
    # newline
15748#    subu $t2,$v0,13
15752#    bne $t2,$zero,notReturnRL
15756#    jal readLogicalChar
15760#    subu $t2,$v0,10 # check for newline
15764#    beq $t2,$zero,foundNewLine
15768#    sw $v0,lastCharRead # push back character into queue
15772#    j foundNewLine # go process the line

15776:  notReturnRL:

    # at this point, $v0 has our character

15776#    subu $t0,$v0,10
15780#    beq $t0,$zero,foundNewLine
15784#    blt $v0,$zero,foundEof
15785##...slt $at,$v0,$zero
15789##...bne $at,$zero,15804

    # we have a character, so push it onto stack
15792#    subu $sp,$sp,4
15796#    sw $v0,($sp)

    # loop back up to get next character
15800#    j doRead

15804:  foundEof:
    # if we had actually read some characters before hitting
        # the eof, go return them as if a newline had been read
15804#    bne $t1,$sp foundNewLine

    # otherwise, we got end of file without having read any
    # new characters, so return null
15808#    li $s7, 0 # return-value: null
15812#    j rlReturn # return

15816:  foundNewLine:

    # at this point, we have our newline (or end-of-file), and all space
    # on the stack above $t1 are characters to be put into the string.
    # That is therefore the number of data words to allocate (plus 1
    # more for the class-pointer)


    # set up GC tag and char-count on stack
15816#    subu $t0,$t1,$sp # number of chars we read (times 4)
15820#    srl $s6,$t0,2 # number of words on stack with chars
15824#    subu $sp,$sp,4 # push char-count ...
15828#    sw $s6,($sp) # ... onto stack
15832#    addu $t2,$t0,5 # GC tag, incl. for count-word
15836#    sw $t2,($t1) # store GC tag
    
    # allocate the appropriate Object
15840#    addu $s6,$s6,7 # 3 to round up, plus 1 for v-table pointer word
15844#    srl $s6,$s6,2  # data words in object
15848#    move $s7,$zero # object words in object
15852#    jal newObject  # allocate space
    
    # store header words
15856#    la $t0,CLASS_String
15860#    sw $t0,-12($s7)# store class tag (String) into object
15864#    lw $t2,4($sp) # char-count
15868#    sll $t1,$t2,2 # 4 times number of chars
15872#    subu $t2,$zero,$t2 # negative of char-count
15876#    sw $t2,-4($s7) # store negative char-count as header-word 2

    # set up pointers to various parts of stack and object
15880#    lw $t0,-8($s7) # data words in object, possibly must mask off hash
15884#    bge $t0,$zero,skipMask_readLine # don't strip hash code if not there
15885##...slt $at,$t0,$zero
15889##...beq $at,$zero,15908
15892#    and $t0,0xff # mask off object's hash value ...
15893##...lui $at,0
15897##...ori $at,$at,0xff
15901##...and $t0,$t0,$at
15904#    sw $t0,-8($s7) # ... and store back into -8 header-word
15908:  skipMask_readLine:

15908#    sll $t0,$t0,2 # data bytes in object
15912#    subu $t0,$s7,$t0 # place to store first character (plus 8)    
15916#    subu $t0,$t0,$t2 # place to store last character (plus 9)
15920#    addu $sp,$sp,8 # pop redundant object-pointer and count
15924#    addu $t1,$t1,$sp # first non-char spot on stack

    # at this point:
    #  $t0 points to the target-spot for the last character (plus 9)
    #  $t1 contains top spot on the stack not containing a char
    #  $sp points to the word with the last source character

    # copy the characters, popping each off the stack

15928#    beq $sp,$t1,rlReturn
15932:  charCopyLoop:
15932#    lw $t2,($sp)
15936#    sb $t2,-9($t0)
15940#    addu $sp,$sp,4
15944#    subu $t0,$t0,1
15948#    bne $sp,$t1,charCopyLoop
15952:  rlReturn:

15952#    lw $ra, 4($sp)
15956#    addu $sp, 8   # pop $ra and pointless word off stack
15960#    move $t0, $s7 # return string we allocated in $s7
15964#    jr $ra

###################################################################
# readInt() - library method (class Lib)
# - skips whitespace
# - then attempts to read a base-10 integer from standard input
# - aborts program if a valid integer is not found
# - returns the integer that is read
# - truncates on overflow
# - parameter:
#   - $s2 - this-pointer
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
15968:mth_Lib_readInt:

    # save $ra by pushing onto stack
15968#    subu $sp,$sp,4
15972#    sw $ra,($sp)

15976:  riSkipWhiteLoop:
    # read a character
15976#    jal readLogicalChar

    # if character <= 32 ascii, check for whitespace; if not
    # whitespace, abort 
15980#    subu $t0,$v0,32
15984#    bgt $t0,$zero,nonWhite
15985##...slt $at,$zero,$t0
15989##...bne $at,$zero,16032
15992#    beq $t0,$zero,riSkipWhiteLoop # start over if space
15996#    subu $t0,$v0,10
16000#    beq $t0,$zero,riSkipWhiteLoop # start over if newline
16004#    subu $t0,$v0,9
16008#    beq $t0,$zero,riSkipWhiteLoop # start over if tab
16012#    subu $t0,$v0,13
16016#    beq $t0,$zero,riSkipWhiteLoop # start over if carriage return
16020#    subu $t0,$v0,12
16024#    beq $t0,$zero,riSkipWhiteLoop # start over if form-feed
16028#    j badIntegerFormat # illegal integer char: abort program

16032:  nonWhite:
16032#    subu $t0,$v0,'-'
16036#    li $t4,1 # final multiplier
16040#    bne $t0,$zero,helpReadInt # go read
16044#    li $t4,-1 # -1 in final multiplier

    # read another character to make up for the '-'
16048#    jal readLogicalChar

16052:  helpReadInt:
16052#    li $t2,10
16056#    subu $t1,$v0,'0' # convert digit to 0-9 value
16060#    bgeu $t1,$t2,badIntegerFormat # abort if not digit
16061##...sltu $at,$t1,$t2
16065##...beq $at,$zero,18348
16068#    move $t3,$t1 #

    #### at this point, $t3 contains value of the first digit read,
    #### and $t2 contains the value 10

16072:  digitLoop:
    # loop invariants:
    # - $t3 contains the value of the number we've read so far
    # - $t2 contains the value 10

16072#    jal readLogicalChar # read next character
16076#    subu $t1,$v0,'0' # convert digit to 0-9 value
16080#    bgeu $t1,$t2,doneDigitLoop # abort if not digit
16081##...sltu $at,$t1,$t2
16085##...beq $at,$zero,16104

16088#    mul $t3,$t3,$t2 # multiply old value by 10
16089##...mult $t3,$t2
16093##...mflo $t3
16096#    addu $t3,$t3,$t1 # add in value of new digit
16100#    j digitLoop

16104:  doneDigitLoop:

    # "push back" unused character into queue
16104#    sw $v0,lastCharRead

    # restore return address
16108#    lw $ra,($sp)
16112#    addu $sp, 4

    # multiply by sign and put return value in $t0
16116#    mult $t3,$t4 # multiply to account for poss. minus sign
16120#    mflo $t3
16124#    move $t0, $t3
    
    # return
16128#    jr $ra

###################################################################
# readChar() - library method (class Lib)
# - reads a single character from standard input
# - returns the integer that is the encoding of the character
# - returns -1 if end of file was encountered
# - parameter:
#   - ($sp) - old-this-pointer
# - return-value:
#   - $t0 - value that was read
###################################################################
16132:mth_Lib_readChar:

    # save $ra by pushing onto stack
16132#    subu $sp,$sp,4
16136#    sw $ra,($sp)

      # read the character
16140#    jal readLogicalChar

    # restore return address; put value in $t0
    # replacing this-pointer saved return address
16144#    lw $ra,($sp)
16148#    addu $sp, 4
16152#    move $t0, $v0

    # return
16156#    jr $ra

########################################################
# printStr(str) - library method (class Lib)
# - prints string to standard output
# parameters:
#   - ($sp) - the string to print
#   - 4($sp) - old-this-pointer
########################################################
16160:mth_Lib_printStr:
    # check for null, printing "(null)", if so
16160#    lw $t0,($sp)
16164#    bne $t0,$zero,psNotNull

    # print "(null)"
16168#    la $a0,nullStr
16172#    li $v0,4
16176#    syscall
16180#    j donePrintStr
    
16184:  psNotNull:
    ##### we have a non-null string #####
    # this means that:
    # - number of data words in -8($t0):
    #   - if the sign bit is 1, the low 31 bits
    #   - if the sign bit is 0, the low 8 bits
    # - negative of number of characters in string is in -4($t0)
    # - string begins at $t0-8-(#dataWords*4), stored 1 char per byte
16184#    subu $t0,$t0,8
16188#    lw $t1,($t0) # number of data words, but needs modification
16192#    blt $t1,$zero,skipPrintStr1
16193##...slt $at,$t1,$zero
16197##...bne $at,$zero,16216
16200#    and $t1,0xff # mask out all but low byte
16201##...lui $at,0
16205##...ori $at,$at,0xff
16209##...and $t1,$t1,$at
16212#    b skipPrintStr2
16216:skipPrintStr1:
16216#    and $t1,0x7ffffff
16217##...lui $at,2047
16221##...ori $at,$at,0xffff
16225##...and $t1,$t1,$at
16228:skipPrintStr2:    
16228#    sll $t1,$t1,2
16232#    subu $t1,$t0,$t1 # first word in string
16236#    lw $t0,4($t0) # negative of string-length
16240#    subu $t0,$t1,$t0 # byte just beyond last char in string

    # print the chars in the string
16244#    beq $t0,$t1,donePrintStr
16248:  psLoop:
16248#    lb $a0,($t1) # next byte
16252#    li $v0,11 # code for printing char
16256#        syscall # print the char
16260#    addu $t1,$t1,1 # go to next char
16264#    blt $t1,$t0,psLoop
16265##...slt $at,$t1,$t0
16269##...bne $at,$zero,16248

16272:  donePrintStr:
16272#    jr $ra

########################################################
# printInt(n) - library method (class Lib)
# - prints integer in decimal format to standard output
# - parameters:
#   - ($sp) - the integer to print
#   - 4($sp) - GC tag
#   - ($sp) - old-this-pointer
########################################################
16276:mth_Lib_printInt:
16276#    lw $a0,($sp)

    # print it
16280#    li $v0,1 # code for print-int
16284#    syscall

    # return
16288#    jr $ra

########################################################
# printBool(n) - library method (class Lib)
# - prints boolean to standard output
# - parameters:
#   - ($sp) - the boolean to print
#   - 4($sp) - old-this-pointer
########################################################
16292:mth_Lib_printBool:
    # pop value off stack, along with 'this'
16292#    lw $t0,($sp)

    # print either 'true' or 'false', depending on the value
16296#    la $a0,falseString
16300#    beq $t0,$zero,skipPB
16304#    la $a0,trueString
16308:  skipPB:
16308#    li $v0,4 # code for print-string
16312#    syscall

    # return
16316#    jr $ra

########################################################
# str.substring(n, k) - library method (class String)
# takes a substring of a string: Java: str.substring(n, k)
# - parameters after pushing RA:
#   - ($sp) - k: one beyond index of last char in subrange
#   - 4($sp) - GC tag
#   - 8($sp) - n: index of first char in subrange
#   - 12($sp) - GC tag
#   - 16($sp) - old this pointer
# - return value:
#  - $t0 - substring
########################################################
16320:mth_String_substring:

    # save $ra by pushing onto stack
16320#    subu $sp,$sp,4
16324#    sw $ra,($sp)

    # get string from this, we probably don't need the null check.
16328#    move $t0,$s2
16332#    beq $t0,$zero,nullPtrException

    # get both indices and string length, and ensure that
    #   0 <= n <= k <= length
16336#    lw $t0,-4($t0) # negative of string length
16340#    subu $t0,$zero,$t0 # string length
16344#    lw $t1,4($sp) # k
16348#    lw $t2,12($sp) # n
16352#    bgt $zero,$t2,strIndexOutOfBounds
16353##...slt $at,$t2,$zero
16357##...bne $at,$zero,18316
16360#    bgt $t2,$t1,strIndexOutOfBounds
16361##...slt $at,$t1,$t2
16365##...bne $at,$zero,18316
16368#    bgt $t1,$t0,strIndexOutOfBounds
16369##...slt $at,$t0,$t1
16373##...bne $at,$zero,18316

    # allocate memory
16376#    subu $s6,$t1,$t2 # # chars in target-string
16380#    addu $s6,$s6,7 # account for extra "class" (4) word + 3 to round up
16384#    srl $s6,$s6,2 # convert bytes-count to word-count
16388#    move $s7,$zero # (no object-bytes in string)
16392#    jal newObject

    # store "String" tag in object-type field
16396#    la $t0,CLASS_String
16400#    sw $t0,-12($s7)
    
    # mask off hash bits, if needed
16404#    lw $t4,-8($s7) # data words in source string
16408#    bge $t4,$zero,skipMask_substring # don't strip hash code if not there
16409##...slt $at,$t4,$zero
16413##...beq $at,$zero,16432
16416#    and $t4,0xff # mask off object's hash value ...
16417##...lui $at,0
16421##...ori $at,$at,0xff
16425##...and $t4,$t4,$at
16428#    sw $t4,-8($s7) # ... and store back into -8 header-word
16432:skipMask_substring:

    # store negative of count (=n-k) into object-length header-word
    # indicies have changed, because newObject is on stack
16432#    lw $t1,8($sp) # k
16436#    lw $t2,16($sp) # n
16440#    subu $t0,$t2,$t1 # value to store
16444#    sw $t0,-4($s7) # store value
    
16448#    move $t3,$s2 # source string pointer
    
    # skip byte-copy loop if length is zero
16452#    beq $zero,$t0,doneSubCopyzz

    # get pointers set up in preparation for copy
16456#    lw $t4,-8($t3) # data words in source string
16460#    sll $t4,$t4,2 # data bytes in source string (incl. padding)
16464#    subu $t3,$t3,$t4 # addr. of first data word of source string (+8)
16468#    addu $t3,$t3,$t2 # addr. of first source data byte to be copied (+8)
16472#    subu $t1,$t3,$t0 # addr. beyond last source data byte to be copied (+8)
16476#    lw $t2,-8($s7)   # data words in target string
16480#    sll $t2,$t2,2    # data bytes in target string
16484#    subu $t2,$s7,$t2 # addr. of first target data byte (+8)
    
    ############################################
    # at this point:
    # - we know that the string has a positive length
    # - $t3 contains 8 + address of the first source-byte
    # - $t1 contains 8 + limit-address of the first source-byte
    # - $t2 contains 8 + address first target byte
    ############################################

    # copy the bytes from source to target
16488:  subCopyLoopzz:
16488#    lb $t4,-8($t3)
16492#    sb $t4,-8($t2)
16496#    addu $t2,$t2,1
16500#    addu $t3,$t3,1
16504#    blt $t3,$t1,subCopyLoopzz
16505##...slt $at,$t3,$t1
16509##...bne $at,$zero,16488
    
16512:  doneSubCopyzz:
    # restore return address, store return value, pop stack
16512#    lw $ra,4($sp) # restore $ra
16516#    addu $sp,$sp,8 # pop ra, and allocated newObject
16520#    move $t0, $s7 # we're returning the string we got back
                  # from newObject
    
    # return
16524#    jr $ra

########################################################
# length() - library method (class String)
# returns length of a string: Java: str.length()
# - parameters:
#   - ($sp) - old this pointer
# - return-value:
#   - $t0 - length of string
########################################################
16528:mth_String_length:

    # the length is the negative of 4($s2)
16528#    lw $t0,-4($s2) # -length
16532#    subu $t0,$zero,$t0

    # return
16536#    jr $ra


########################################################
# str1.concat(str2) - library method (class String)
# (as in Java)
# - parameters:
#   - ($sp) - the second string
#   - 4($sp) - old this pointer
#   - $s2 - the first string (this)
# - returns:
#   - $t0 - pointer to concatenated string
########################################################
16540:mth_String_concat:
    # save $ra by pushing onto stack
16540#    subu $sp,$sp,4
16544#    sw $ra, ($sp)

    # get string pointers and check parameter for null
16548#    lw $t0,4($sp)
16552#    beq $t0,$zero,nullPtrException
16556#    move $t1,$s2
    
    # get lengths of two strings; allocate object whose size
    # is their sum divided by 4 (rounded up) plus 1
16560#    lw $t0,-4($t0) # negative size of second object
16564#    lw $t1,-4($t1) # negative size of first object
16568#    addu $s6,$t0,$t1 # sum of negative sizes
16572#    sra $s6,$s6,2 # negative word-size of char part
16576#    subu $s6,$zero,$s6 # word size of char part
16580#    addu $s6,$s6,1 # data word size, including v-table word
16584#    move $s7,$zero
16588#    jal newObject

    # store String vtable address in vtable address field
16592#    la $t0,CLASS_String
16596#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
16600#    lw $t4,-8($s7) # # data words in source string
16604#    bge $t4,$zero,skipMask_concat # don't strip hash code if not there
16605##...slt $at,$t4,$zero
16609##...beq $at,$zero,16628
16612#    and $t4,0xff # mask off object's hash value ...
16613##...lui $at,0
16617##...ori $at,$at,0xff
16621##...and $t4,$t4,$at
16624#    sw $t4,-8($s7) # ... and store back into -8 header-word
16628:skipMask_concat:

16628#    move $t9, $s7 # store return string in unused (I hope) t9 register

    #restore $t0, and $t1 after they were potentially blown
    #away by newObject
16632#    move $t1,$s2   # first object
16636#    lw $t0,8($sp) # second object
    
    # get negative sizes; sum and store in new object size-field
16640#    lw $t2,-4($t0) # negative length of second object
16644#    lw $t3,-4($t1) # negative length of first object
16648#    addu $t4,$t2,$t3 # sum of negative lengths
16652#    sw $t4,-4($s7) # store sum as negated target-string length

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is pointer to first object
    # - $t2 is negated length of second object
    # - $t3 is negated length of first object
    # - $s7 is pointer to new object
    #########################################################

    # compute addresses for moving data from first string
16656#    lw $t4,-8($t1) # # data words in first string
16660#    sll $t4,$t4,2 # # data bytes in first string
16664#    subu $t1,$t1,$t4 # addr. (+8) of first byte in first string
16668#    lw $t4,-8($s7) # # data words in new string
16672#    sll $t4,$t4,2 # # data bytes in new string
16676#    subu $s7,$s7,$t4 # addr. (+8) of first byte in new string
16680#    beq $zero,$t3,doneConcatLoop1zz # skip first loop is no bytes to copy
16684#    subu $t3,$t1,$t3 # limit (+8) address for first string

    #########################################################
    # at this point:
    # - $t0 is pointer to second object
    # - $t1 is address (+8) of first byte in first object
    # - $t2 is negated length of second object
    # - $t3 is limit-address (+8) of data in first object
    # - $s7 is address (+8) of first byte in new object
    # - note: if data-length of first object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop1'
    #########################################################

    # copy the bytes from first source to target
16688:  concatLoop1zz:
16688#    lb $t4,-8($t1)
16692#    sb $t4,-8($s7)
16696#    addu $s7,$s7,1
16700#    addu $t1,$t1,1
16704#    blt $t1,$t3,concatLoop1zz
16705##...slt $at,$t1,$t3
16709##...bne $at,$zero,16688
16712:  doneConcatLoop1zz:
  
    # if second string is empty, skip rest of copy
16712#    beq $zero,$t2,doneConcatLoop2zz

      # compute addresses for moving data from second string
16716#    lw $t4,-8($t0) # # data words in second string
16720#    sll $t4,$t4,2 # # data bytes in second string
16724#    subu $t1,$t0,$t4 # addr. (+8) of first byte in second string
16728#    subu $t3,$t1,$t2 # limit (+8) address for second string

    #########################################################
    # at this point:
    # - $t1 is address (+8) of first byte in second object
    # - $t3 is limit-address (+8) of data in second object
    # - $s7 is address (+8) of next byte to write new object
    # - note: if data-length of second object is zero, then
    #   we skip over this part, and go to 'doneConcatLoop2'
    #########################################################

    # copy the bytes from first source to target
16732:  concatLoop2zz:
16732#    lb $t4,-8($t1)
16736#    sb $t4,-8($s7)
16740#    addu $s7,$s7,1
16744#    addu $t1,$t1,1
16748#    blt $t1,$t3,concatLoop2zz
16749##...slt $at,$t1,$t3
16753##...bne $at,$zero,16732
16756:  doneConcatLoop2zz:
 
16756:  concatRtnzz:
    # return
16756#    move $t0, $t9 # put saved return string in $t0
16760#    lw $ra, 4($sp)
16764#    addu $sp, 8 # pop ra and allocated newObject
16768#    jr $ra

########################################################
# str.charAt(n) - library method (class String)
# accesses a character in a string, as in Java
# - parameters:
#   - ($sp) - the index, n
#   - 4($sp) - GC tag
#   - 8($sp) - old this pointer
#   - $s2    - this pointer
# - returns:
#   - $t0 - the character found.
########################################################
16772:mth_String_charAt:
    # get string
16772#    move $t0,$s2

    # check that index is in bounds
16776#    lw $t1,-4($t0) # negative of # data words in string
16780#    subu $t3,$zero,$t1 # # chars in string
16784#    lw $t2,($sp) # index
16788#    bgeu $t2,$t3,strIndexOutOfBounds
16789##...sltu $at,$t2,$t3
16793##...beq $at,$zero,18316

    # access element
16796#    lw $t1,-8($t0) # # data words in object
16800#    sll $t1,$t1,2 # - byte-offset from end of chars
16804#    subu $t1,$t2,$t1 # - address of first char in string, offset by 8
16808#    addu $t0,$t0,$t1 # - address of our char, offset by 8
16812#    lb $t0,-8($t0) # our char

    # return
16816#    jr $ra

########################################################
# intToString(n) - library method (class Lib)
# converts int to string: Java: ""+n
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
#   - $s2 - this-pointer
# - returns:
#   - $t0 - the string, which is the string representation of
#     the integer
########################################################
16820:mth_Lib_intToString:

    # save return address on stack; allocate space for dummy GC tag
16820#    subu $sp,$sp,8
16824#    sw $ra,4($sp)

    # save current sp
16828#    move $t0,$sp

    # move constant 10 into $t3 
    # (Good, I didn't know what li did, I'm glad this comment was here)
    # * slams head through wall *
16832#    li $t3,10

    # get argument, negate if negative
16836#    lw $t1,8($sp)
16840#    bge $t1,$zero,itsNonNegLoop
16841##...slt $at,$t1,$zero
16845##...beq $at,$zero,16852
16848#    subu $t1,$zero,$t1

    # loop through, computing unsigned remainder by 10, and
    # storing digits on stack until we reach 0
16852:  itsNonNegLoop:
16852#    divu $t1,$t3
16856#    mflo $t1 # quotient
16860#    mfhi $t4 # remainder
16864#    addu $t4,$t4,'0' # turn remainder into digit
16868#    subu $sp,$sp,4
16872#    sw $t4,($sp) # push digit onto stack
16876#    bne $t1,$zero,itsNonNegLoop

    # push '-' if negative
16880#    lw $t4,8($t0)
16884#    bge $t4,$zero,itsSkipNeg
16885##...slt $at,$t4,$zero
16889##...beq $at,$zero,16904
16892#    li $t4,'-'
16896#    subu $sp,$sp,4
16900#    sw $t4,($sp)
16904:  itsSkipNeg:

    ################################################
    # At this point, all of our digits have been pushed
    # onto the stack.  $sp points to the first one;
    # $t0 contains the limit-pointer (into which we need to
    # write a GC tag).
    ################################################

    # compute number of characters on stack (one word per character);
    # write GC tag onto stack; push char-count onto stack
16904#    subu $s6,$t0,$sp
16908#    addu $t3,$s6,5 # GC tag (including for count-word, about to be pushed)
16912#    sw $t3,($t0)
16916#    srl $s6,$s6,2
16920#    subu $sp,$sp,4
16924#    sw $s6,($sp)
    
    # allocate memory
16928#    addu $s6,$s6,7 # 3 to round up, plus 4 for vtable word
16932#    srl $s6,$s6,2
16936#    move $s7,$zero # no "object" words in object
16940#    jal newObject

    # restore char-count; pop it and return value from 'newObject'
16944#    lw $t0,4($sp)
16948#    addu $sp,$sp,8

    # store "String" tag into class field
16952#    subu $s7,$s7,8 # address of header-1 word
16956#    la $t1,CLASS_String
16960#    sw $t1,-4($s7)
        
    # mask off hash bits, if needed
16964#    lw $t4,($s7) # # data words in source string
16968#    bge $t4,$zero,skipMask_intToString # don't strip hash code if not there
16969##...slt $at,$t4,$zero
16973##...beq $at,$zero,16992
16976#    and $t4,0xff # mask off object's hash value ...
16977##...lui $at,0
16981##...ori $at,$at,0xff
16985##...and $t4,$t4,$at
16988#    sw $t4,($s7) # ... and store back into -8 header-word
16992:skipMask_intToString:
    
    # store negative of char-count into header-2 word
16992#    subu $t0,$zero,$t0
16996#    sw $t0,4($s7)

17000#    lw $t1,($s7) # number of data words in string
17004#    sll $t1,$t1,2 # number data bytes in string
17008#    subu $t1,$s7,$t1 # first location to store chars in string
17012#    subu $t0,$t1,$t0 # limit address for chars in string

    ####################################################
    # at this point:
    # - $sp contains first source character address
    # - $t1 contains first target character address
    # - $t0 contains target-limit address
    ####################################################

    # loop through and copy all elements as we pop them off the stack.
    # (In this case, we know that there is it least one.)
17016:  itsLoop:
17016#    lw $t2,($sp)
17020#    addu $sp,$sp,4
17024#    sb $t2,($t1)
17028#    addu $t1,$t1,1
17032#    bne $t1,$t0,itsLoop

    ####################################################
    # At this point
    # - ($t0+15)&0xfffffffe is our return value
    # - ($sp) contains garbage (old GC tag)
    # - 4($sp) contains return address
    ####################################################

    # adjust stack, restore return address; return
17036#    lw $ra,4($sp)
17040#    addu $sp,$sp,8
17044#    addu $t0,$t0,15
17048#    and $t0,$t0,0xfffffffc
17049##...lui $at,65535
17053##...ori $at,$at,0xfffc
17057##...and $t0,$t0,$at
17060#    jr $ra

########################################################
# intToChar(n) - library method (class Lib)
# converts int to a one-character string: Java: ""+(char)(n&0xff)
# - parameters:
#   - ($sp) - the value to convert, n
#   - 4($sp) - GC tag
#   - 8($sp) - old-this-pointer
# - returns:
#   - $t0 - the string, which is the converted character
# - note: only the low 8 bits of the value n are used
########################################################
17064:mth_Lib_intToChar:
    # save return address
17064#    subu $sp,$sp,4
17068#    sw $ra,($sp)

    # allocate object
17072#    li $s6,2
17076#    move $s7,$zero
17080#    jal newObject

    # get n from string.
17084#    lw $t1,8($sp)

    # store "String" tag into class field
17088#    la $t0,CLASS_String
17092#    sw $t0,-12($s7)
        
    # mask off hash bits, if needed
17096#    lw $t4,-8($s7) # # data words in source string
17100#    bge $t4,$zero,skipMask_intToChar # don't strip hash code if not there
17101##...slt $at,$t4,$zero
17105##...beq $at,$zero,17124
17108#    and $t4,0xff # mask off object's hash value ...
17109##...lui $at,0
17113##...ori $at,$at,0xff
17117##...and $t4,$t4,$at
17120#    sw $t4,-8($s7) # ... and store back into -8 header-word
17124:  skipMask_intToChar:

    # store data in string
17124#    sb $t1,-16($s7)
    
    # store negative of size in header-word 2
17128#    li $t0,-1
17132#    sw $t0,-4($s7)

    # we're returning $s7
17136#    move $t0, $s7

    # restore $ra, and pop return address and return string off stack
17140#    lw $ra,4($sp)
17144#    addu $sp,$sp,8

    # return
17148#    jr $ra

########################################################
# str1.compareTo(str2) - library method (class String)
# compares two strings as in Java
# - parameters:
#   - ($sp) - second string
#   - 4($sp) - old this pointer
#   - $s2 - first string (this)
# - returns:
#   - $t0 - -1, 0, or 1 depending on whether str1 is
#       lexographically less than, equal to or greater than str2
########################################################
17152:mth_String_compareTo:
    # get string pointers and check parameter for null
17152#    lw $t0,($sp) # second string
17156#    beq $t0,$zero,nullPtrException
17160#    move $t1,$s2 # first string
    
    # get (negatives of) respective byte-lengths
17164#    lw $t2,-4($t0) # negative length of second string
17168#    lw $t3,-4($t1) # negative length of first string

    # put tentative return value in $t5.
    # The tentative return value is the one that we will use if we get
    # to the end of the shorter string during our comparison-loop.
17172#    slt $t4,$t3,$t2
17176#    slt $t5,$t2,$t3
17180#    subu $t5,$t5,$t4
    
    # at this point:
    # - $t0 contains the pointer to the second string object
    # - $t1 contains the pointer to the first string object
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    # get begin-of-string addresses
17184#    lw $t2,-8($t0) # # data words in second string
17188#    lw $t3,-8($t1) # # data words in first string
17192#    sll $t2,$t2,2 # byte-offset to beginning of str2 (+8)
17196#    sll $t3,$t3,2 # byte-offset to beginning of str1 (+8)
17200#    subu $t0,$t0,$t2 # beginning of str1 address (+8)
17204#    subu $t1,$t1,$t3 # beginning of str2 address (+8)
    
    # put $t1-limit into $t2
17208#    beq $zero,$t5,skipStrCmpLenzz
17212#    move $t2,$t3
17216:  skipStrCmpLenzz:
17216#    add $t2,$t1,$t2
    
    # at this point:
    # - $t0 contains 8 plus the address of the first data-byte of str2
    # - $t1 contains 8 plus the address of the first data-byte of str1
    # - $t2 contains 8 plus the address of the last data-type of str1
    # - $t5 contains the value to return if the strings compare equal up
    #   to the length of the shortest word

    #######################################################
    # at this point, we have
    # - $t5 containing the tentative return-value
    # - $t1 containing address of first char in str2
    # - $t2 containing limit for $t1
    # - $t0 containing address of first char in str1
    #######################################################

    # loop through, until we find unequal words or we hit
    # our limit    
17220:  cmpLoopzz:
17220#    lw $t3,-8($t1) # word from str2
17224#    lw $t4,-8($t0) # word from str1
17228#    bne $t3,$t4,cmpNotEqualzz
17232#    addu $t1,$t1,4
17236#    addu $t0,$t0,4
17240#    bne $t1,$t2,cmpLoopzz

    # # got to the end of one string: go set up return
17244#    j cmpHitLimitzz

17248:  cmpNotEqualzz:
    # found unequal characters: return -1 or 1, depending on which is
    # greater
17248#    slt $t5,$t4,$t3 # 1 if str2 > str1, else 0
17252#    sll $t5,$t5,1 # 2 if str2 > str1, else 0
17256#    subu $t5,$t5,1 # 1 if str2 > str1, else -1
17260:  cmpHitLimitzz:
17260#    move $t0, $t5 # store return value
17264#    jr $ra # return

########################################################
# readLogicalChar (millicode)
#  - logically reads a character from standard input
#  - first checks character buffer, consuming it if possible
#  - return-result:
#    - returns character in $v0
#  - side-effects:
#    - reads a character
#    - clobbers $t0
########################################################
17268:readLogicalChar:

    # check if we already have a character
17268#    lw $v0,lastCharRead
17272#    li $t0,-2
17276#    beq $t0,$v0 doReadCh

    # we have our character from the buffer. Wipe out
    # buffer and return
17280#    sw $t0,lastCharRead # store -2 into buffer (i.e. "empty")
17284#    jr $ra # return
    
17288:  doReadCh:
    # we need to actually read a character: read and return
17288#    li $v0,12 # use system call to read a character
17292#    syscall
17296#    jr $ra # return

########################################################
# newObject (millicode)
#  - allocates a new object on the heap
#  - two-word header is set up properly
#  - all non-header words in object are set to zero
#  - parameters:
#    - $s6 = the number of data words in the negative-offset portion of
#      the object (including the vtable pointer); this value is 1 if the
#      object is an array; this should always be at least 1
#    - $s7 - second header-word, which is the number of object
#      words in the object
#      - $s7 may not be negative (this is checked); if so, the program is
#        aborted with an "array size of out bounds" error message
#      is treated as if it were zero
#  - return-result:
#    - returned in $s7
#    - and pushed on the stack
#  - side-effects:
#  - may trash all $tx registers and all $sx registers, except the
#    "permanent" ones, which get updated with values that are
#    consistent with the new space
########################################################
17300:newObject:
    # $s6 = # data words
    # $s7 = # object words (# data words if data-array allocation,
    # where a negative number is treated as 0)
    # $ra = return address
    # on return, pointer to new memory in two places:
    # - pushed onto top of stack
    # - in $s7
    
    # if the object-portion size is negative, abort with error
17300#    blt $s7,$zero arraySizeOutOfBounds
17301##...slt $at,$s7,$zero
17305##...bne $at,$zero,18332

    # mark the fact that we have not yet GC'd for this allocation
17308#    move $t5,$zero

    ###### TEMPORARY #######
    # for now, go a GC unconditionally, so that a full GC occurs
    # every time we allocate an object
    ### let's not do that for now
    # j doGC

17312:  gcJoin:

    # at this point:
    #  $s6 contains the before-header word count
    #  $s7 contains the second header word, which is also the
    #    after-header word count
    #  $t5 is zero iff we have not GC'd for this allocation

    # determine if we have enough memory available
17312#    addu $t0,$s6,$s7
17316#    sll $t0,$t0,2
17320#    addu $t0,$t0,8 # amount of memory needed
17324#    addu $t1,$t0,$s3
17328#    bgtu $t1,$s4,doGC
17329##...sltu $at,$s4,$t1
17333##...bne $at,$zero,17456

    # at this point:
    #  $s3 points to beginning of segment, and
    #  $t1 points just past the end

    # zero out the memory
17336#    move $t2,$s3
17340:  zeroObjLoop:
17340#    sw $zero,($s3)
17344#    lw $zero,($s3)

17348#    addu $s3,4
17352#    bltu $s3,$t1,zeroObjLoop
17353##...sltu $at,$s3,$t1
17357##...bne $at,$zero,17340

    # at this point:
    #  $s3 has been updated to point to the next free slot,
    #    which is also the points just past our object

    # compute pointer value and set up header-words
17360#    sll $t0,$s7,2    # number of post-header bytes
17364#    subu $t0,$s3,$t0 # pointer that we will return

    # determine the value to store in the first header-word:
    # if <= 255 (unsigned):
    #  - it goes into low byte
    #  - hash bits go into high three bytes, with top bit being 1
    # if >255 (unsigned)
    #  - it goes into full word (with a 0 in the high bit)
    
17368#    li $t2,255
17372#    bgeu $s6,$t2 firstHeaderLarge
17373##...sltu $at,$s6,$t2
17377##...beq $at,$zero,17424
17380#    lw $t1,prevHashConstant
17384#    addu $t1,0x12b68fd2
17385##...lui $at,4791
17389##...addiu $at,$at,-28718
17393##...addu $t1,$at,$t1
17396#    sw $t1,prevHashConstant # update hash constant
17400#    or $t1,0x80000000 # set top bit
17401##...lui $at,32768
17405##...or $t1,$at,$t1
17408#    and $t1,0xffffff00 # clear low bit
17409##...lui $at,65535
17413##...ori $at,$at,0xff00
17417##...and $t1,$t1,$at
17420#    or $s6,$t1
17424:firstHeaderLarge:
17424#    sw $s6,-8($t0) # store header-1 value
17428#    lw $zero,-8($t0)

    # store second header-value
17432#    sw $s7,-4($t0)   # second header-word
17436#    lw $zero,-4($t0)
    
    # put return-value into $s7 and also push it onto top of stack
17440#    move $s7,$t0
17444#    subu $sp,$sp,4
17448#    sw $t0,($sp)

17452#    jr $ra
    
17456:  doGC:
    #####################################################
    # We need to do a garbage-collect
    #####################################################
 
     ####### print that we are doing a GC ########
     ####### THESE THREE LINES WILL NORMALLY BE COMMENTED OUT #######
#         la $a0,gcMsg # prints message: "GC!" 
#         li $v0,4 # syscall-code for print-string 
#         syscall 
       

    # if we've already done a GC for this allocation, then
    # we are actually out heap-memory: abort program
17456#    bne $t5,$zero,outOfHeapMemory
      
    # increment the number of times we've done a GC, for later reporting
17460#    lw $t5,gcCount
17464#    addu $t5,1
17468#    sw $t5,gcCount

    # save $s2 (our only rooted register) on the stack
    # so that the garbage collector processes it
17472#    subu $sp,$sp,4
17476#    sw $s2,($sp)

    # set $s3 to the address of the new segment and the
    # end-limit of the new segment, respectively,
    # Also, update cur_seg to refer to the other segment
17480#    lw $t0,cur_seg
17484#    move $t7,$s4
17488#    la $t6,seg1_start
17489##...lui $t6,16
17493##...addiu $t6,$t6,19540
17496#    la $s3,seg0_start
17500#    la $s4,seg0_end
17501##...lui $s4,16
17505##...addiu $s4,$s4,19540
17508#    sw $zero,cur_seg
17512#    bne $t0,$zero,skipGc1
17516#    la $t6,seg0_start
17520#    la $s3,seg1_start
17521##...lui $s3,16
17525##...addiu $s3,$s3,19540
17528#    la $s4,seg1_end
17529##...lui $s4,32
17533##...addiu $s4,$s4,19540
17536#    sw $s5,cur_seg
17540:  skipGc1:
17540#    li $t5,0x80000000
17544#    lw $t0,stack_bottom
17548#    subu $t0,4


    ###############################################################
    # at this point:
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first address of the target space
    # - $s4 contains the limit address of the target space
    # - cur_seg has been updated to refer to the target space
    # - $t0 contains the address of the deepest stack element
    # - $sp contains the address of the top stack element
    # - $s2 is available for use, having been pushed onto the stack
    # - $t5 contains the value 0x80000000
    ###############################################################

    ###### begin outer loop to copy all stack-direct objects ######

17552:  gcStackCopyLoop:
17552#    lw $t1,($t0) # current stack element

    # test if we have a GC tag
17556#    sll $t2,$t1,31 # zero iff low bit was zero
17560#    bne $t2,$zero,gcBump # go skip data values if low bit not zero

    # bump stack-address pointer
17564#    subu $t0,$t0,4

    # if value is out of range (which includes null=0), and is
    # therefore does not refer to an object on the heap, just go
    # loop back and do the next one
17568#    bleu $t1,$t6,gcTestIterDone1
17569##...sltu $at,$t6,$t1
17573##...beq $at,$zero,17736
17576#    bgtu $t1,$t7,gcTestIterDone1
17577##...sltu $at,$t7,$t1
17581##...bne $at,$zero,17736

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
17584#    lw $t2,-8($t1) # possible forwarding tag
17588#    bne $t2,$zero,gcNoForward1 # if not forwarding tag, go copy
17592#    lw $t2,-4($t1) # forwarding pointer: object's new address
17596#    sw $t2,4($t0) # update stack value
17600#    j gcTestIterDone1 # do next iteration

17604:  gcNoForward1:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    # compute the amount of space that is needed
17604#    bge $t2,$zero,gcSkip2
17605##...slt $at,$t2,$zero
17609##...beq $at,$zero,17624
17612#    and $t2,0xff #### mask off hash value
17613##...lui $at,0
17617##...ori $at,$at,0xff
17621##...and $t2,$t2,$at
    #### OLD
    #### subu $t2,$zero,$t2 # set to 1 if -1 (number of data words)

17624:  gcSkip2:
17624#    sll $t2,$t2,2
17628#    addu $t2,$t2,8
17632#    subu $t4,$t1,$t2 # address of first word of source
17636#    lw $t3,-4($t1) # number of object words (negative means zero)
17640#    bge $t3,$zero,gcH2Neg1
17641##...slt $at,$t3,$zero
17645##...beq $at,$zero,17652
17648#    move $t3,$zero
17652:  gcH2Neg1:
17652#    sll $t3,$t3,2
17656#    addu $t3,$t3,$t1 # address one word past last word of source

17660#    addu $t2,$s3,$t2 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object (i.e., the address just beyond the object's header)
    # - $t2 contains the pointer to the target object
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0-2
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger" in the target space
17664#    lw $s0,($t4)
17668#    lw $s1,-8($t1)
17672#    sw $s1,($t4)
17676#    sw $s0,-8($t1)
    
    # copy all source bytes to the target
17680:  gCinnerCopy1:
17680#    lw $s0,($t4)
17684#    sw $s0,($s3)
17688#    addu $t4,$t4,4
17692#    addu $s3,$s3,4
17696#    bltu $t4,$t3,gCinnerCopy1
17697##...sltu $at,$t4,$t3
17701##...bne $at,$zero,17680

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
17704#    sw $zero,-8($t1) # 0 in first header-slot
17708#    sw $t2,-4($t1) # forwarding pointer in second header-slot

    # update the stack slot with the address in the target space
17712#    sw $t2,4($t0)
17716#    lw $zero,-8($t2)
17720#    lw $zero,-4($t2)

    # go handle next stack slot (testing if done)
17724#    j gcTestIterDone1

17728:  gcBump:
    #### we have a GC tag.  Bytes to skip: tag value + 3.
17728#    subu $t0,$t0,$t1
17732#    subu $t0,$t0,3

17736:  gcTestIterDone1:
17736#    bgeu $t0,$sp,gcStackCopyLoop
17737##...sltu $at,$t0,$sp
17741##...beq $at,$zero,17552

    ###### end outer loop to copy all stack-direct objects ######

    #############################################################
    # We have finished processing the stack elements.  Now we need
    # to update elements in the heap itself. This may itself involve
    # moving additional objects
    #############################################################

    #########################################################
    # At this point:
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # We want to set things up so that in addition:
    # - $t0 is the "trailing finger", containing the address
    #   of the first slot in target space that we have yet
    #   to process.
    # Then during processing:
    # - $t1 will contain the contents of the heap slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # And when we're actually copying an object:
    # - $t2 will contain pointer to the target object
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - available for use: $s0
    ##########################################################

    # set $t0 to be at the beginning of target-space
17744#    lw $t1,cur_seg
17748#    la $t0,seg0_start
17752#    beq $t1,$zero,gcSkip4
17756#    la $t0,seg1_start
17757##...lui $t0,16
17761##...addiu $t0,$t0,19540


17764:  gcSkip4:

    # if there were no objects put into the heap during stack
    # processing, we're done, so go finish up
17764#    bgeu $t0,$s3,gcFinishUp
17765##...sltu $at,$t0,$s3
17769##...beq $at,$zero,18060

    ###### begin outer loop to copy all non-stack-direct objects ######

17772:  gcHeapCopyLoop:
    # get data count for object; swap header-word with first word
    # of object so that they're back in the right place
17772#    lw $t1,($t0) # (what will be) first header word for current object
17776#    move $t2,$t1 # number data bytes in object (poss. w/hash bits)
17780#    bge $t2,$zero,gcSkip4a # are there hash bits?
17781##...slt $at,$t2,$zero
17785##...beq $at,$zero,17800
17788#    and $t2,0xff # mask off hash bits
17789##...lui $at,0
17793##...ori $at,$at,0xff
17797##...and $t2,$t2,$at
17800:gcSkip4a:    
17800#    sll $t2,$t2,2 # # data bytes
17804#    addu $t2,$t2,8 # to skip header words
17808#    addu $t2,$t0,$t2 # pointer to new object
17812#    lw $t3,-8($t2) # word to swap
17816#    sw $t1,-8($t2) # store header word
17820#    sw $t3,($t0) # restore first word of object

    ################################################
    # at this point:
    # - $t2 contains the pointer to our new object
    ################################################

    # check if we have a data array
17824#    lw $t1,-12($t2) # vtable pointer
17828#    li $t0,dataArrayVTableStart # address of vtable for first data array
17832#    blt $t1,$t0,gcNotDataArray # if data array, no more xforming to do
17833##...slt $at,$t1,$t0
17837##...bne $at,$zero,17856

    # We have a vtable address that is a data array.
    # we need skip over it then loop back to do next object.
17840:  skipToNextObj:
17840#    lw $t1,-4($t2) # data words in (object position of) array
    #### note: we know that it's not a string, so the value will
    #### not be artificially negative
17844#    sll $t1,$t1,2 # convert to byte-count
17848#    addu $t0,$t2,$t1 # skip over object
17852#    j gcTestIterDone2 # go do next object, if any

    ###################################################
    # at this point:
    # - the object has been restored to normal status--that is, the
    #   word-swap has been done
    # - $t2 contains a pointer to the object
    ###################################################
    
17856:  gcNotDataArray:
17856#    lw $t3,-4($t2) # # object words (negative treated as zero)
17860#    bge $t3,$zero,gcH2Neg2
17861##...slt $at,$t3,$zero
17865##...beq $at,$zero,17872
17868#    move $t3,$zero
17872:  gcH2Neg2:
17872#    sll $t3,$t3,2 # # object bytes
17876#    move $t0,$t2 # address of first pointer in object
17880#    add $s1,$t2,$t3 # limit address for this object

    #####################################################
    # At this point, we have to "translate" all pointers,
    # starting at $t0 to (but not including) $s1
    #####################################################

    # if there are no pointer-slots (i.e., $t0=$s1), skip this
    # part
17884#    beq $t0,$s1,gcTestIterDone2
    
17888:  gcNextPointerInObject:
    # get pointer from object
17888#    lw $t1,($t0)

    # if value is out of range, and is therefore does not refer
    # to an object, just go loop back and do the next one
17892#    bleu $t1,$t6,gcGoNextPointerSlot
17893##...sltu $at,$t6,$t1
17897##...beq $at,$zero,18040
17900#    bgtu $t1,$t7,gcGoNextPointerSlot
17901##...sltu $at,$t7,$t1
17905##...bne $at,$zero,18040

    # if the object has already been moved, update the stack-value
    # via the forwarding pointer
17908#    lw $t8,-8($t1) # possible forwarding tag
17912#    bne $t8,$zero,gcNoForward2 # if not forwarding tag, go copy
17916#    lw $t8,-4($t1) # forwarding pointer: object's new address
17920#    sw $t8,($t0) # update pointer in object
17924#    j gcGoNextPointerSlot # do next iteration

17928:  gcNoForward2:
    #########################################################
    # we actually need to copy the object into the new space
    #########################################################

    #########################################################
    # At this point:
    # - $t0 contains the address of the heap-slot we're translating
    # - $t1 will contain the contents of the heap-slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $s3 contains the first unallocated address of the
    #   target space, which will also be the first address
    #   of the target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # Then during processing:
    # And when we're actually copying an object:
    # - $t3 will contain the limit address of the source object
    # - $t4 will contain the first address of the source object
    # - $s1 will contain the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $t8 will contain a pointer to the target object
    # - available for use: $s0, $t8, $t9
    ##########################################################

    # compute the amount of space that is needed
17928#    bge $t8,$zero,gcSkip5 # # words in negative-offset portion
17929##...slt $at,$t8,$zero
17933##...beq $at,$zero,17948
17936#    and $t8,0xff # mask off hash bits
17937##...lui $at,0
17941##...ori $at,$at,0xff
17945##...and $t8,$t8,$at

17948:  gcSkip5:
17948#    sll $t8,$t8,2 # bytes in negative-offset portion ...
17952#    addu $t8,$t8,8 # ... add in bytes for header-words
17956#    subu $t4,$t1,$t8 # address of first word of source object
17960#    lw $t3,-4($t1) # # words in positive-offset portion
17964#    bge $t3,$zero,gcNoNeg
17965##...slt $at,$t3,$zero
17969##...beq $at,$zero,17976
17972#    move $t3,$zero # negative treated as zero
17976:  gcNoNeg:
17976#    sll $t3,$t3,2 # bytes in negative-offset portion
17980#    addu $t3,$t3,$t1 # address one word past last word of source

17984#    addu $t8,$s3,$t8 # pointer to target object

    #########################################################
    # At this point:
    # - $t0 contains the address of the stack slot we'll
    #   process next
    # - $t1 contains the contents of the stack slot we're
    #   currently working on, which is a pointer to the source
    #   object
    # - $t2 will contains pointer to the object we're in the
    #   middle of translating
    # - $t3 contains the limit address of the source object
    # - $t4 contains the first address of the source object
    # - $t5 contains the value 0x80000000
    # - $t6 contains the first address of the source space
    # - $t7 contains the limit address of the source space
    # - $t8 contains the pointer to the target object
    # - $s1 contains the the limit address for the current
    #   object that tells where the pointers in the object end
    # - $s3 contains the first unallocated address of the
    #   target space, which is also the first address of the
    #   target object
    # - $s4 contains the limit address of the target space
    # - $s5 contains the value 5
    # - $s6-7 contain the original parameters to the call to
    #   'newObject'
    # - $sp contains the address of the top stack element
    # - available for use: $s0, $t9
    #########################################################

    # swap first header word and first data word so that header
        # can be found by "trailing finger"
17988#    lw $s0,($t4)
17992#    lw $t9,-8($t1)
17996#    sw $t9,($t4)
18000#    sw $s0,-8($t1)

    # copy all source bytes to the target
18004:  gCinnerCopy2:
18004#    lw $s0,($t4)
18008#    sw $s0,($s3)
18012#    addu $t4,$t4,4
18016#    addu $s3,$s3,4
18020#    bltu $t4,$t3,gCinnerCopy2
18021##...sltu $at,$t4,$t3
18025##...bne $at,$zero,18004

    ###########################################################
    # All bytes have been copied to the target space.  We still
    # need to:
    # - set up forwarding pointer in source object
    # - update the pointer in the current stack slot
    ###########################################################

    # set up the forwarding pointer
18028#    sw $zero,-8($t1) # 0 in first header-slot
18032#    sw $t8,-4($t1) # forwarding pointer in second header-slot

    # update the heap-slot with the address in the target space
18036#    sw $t8,($t0)

18040:  gcGoNextPointerSlot:
    # bump $t0 to next slot in object; if not done, loop back
18040#    addu $t0,$t0,4
18044#    bltu $t0,$s1,gcNextPointerInObject
18045##...sltu $at,$t0,$s1
18049##...bne $at,$zero,17888

18052:  gcTestIterDone2:
18052#    bltu $t0,$s3,gcHeapCopyLoop
18053##...sltu $at,$t0,$s3
18057##...bne $at,$zero,17772

    ###### end outer loop to copy all non-stack-direct objects ######

18060:  gcFinishUp:
    # restore $s2 to its updated value by popping off stack
18060#    lw $s2,($sp)
18064#    addu $sp,$sp,4

    # mark us as having already GC'd
18068#    move $t5,$s5

    # go try and allocate again
18072#    j gcJoin
        

########################################################
# vm_init (millicode)
#  - initialzes the virtual machine
#  - values 5 stored in $s5
#  - zero ("this pointer") stored in $s2
#  - heap and heap-limit pointers stored respectively in $s3 and $s4
#  - address of bottom of stack stored in 'stack_bottom' memory
#    location
#  - (note: 'cur_seg' memory location is already set to 0)
########################################################
18076:vm_init:

    # mark bottom of stack
18076#    sw $sp,stack_bottom
    
    # set "this" pointer to be null, for now
18080#    move $s2,$zero

    #set up the "five" register
18084#    li $s5,5

18088#    la $s3,seg0_start
18092#    la $s4,seg0_end
18093##...lui $s4,16
18097##...addiu $s4,$s4,19540
    
    # return
18100#    jr $ra

########################################################
# divide (millicode)
#  - divides first arg by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
18104:divide:
    # get parameters; abort if divisor zero
18104#    lw $t0,($sp)
18108#    lw $t1,8($sp)
18112#    beq $t0,$zero,divByZeroError
    
    # perform division
18116#    div $t1,$t0
18120#    mflo $t0

    # store result, adjust stack and return
18124#    addu $sp,$sp,8 # adjust stack
18128#    sw $t0,($sp) # store result
18132#    jr $ra

########################################################
# remainder (millicode)
#  - takes remainder first arg divided by second (signed divide)
#  - aborts if divisor is zero
#  - follows calling conventions for library methods
#  - parameters:
#    - ($sp) divisor
#    - 4($sp) (dummy) GC tag
#    - 8($sp) dividend
#    - 12($sp) (dummy) GC tag
#  - return value:
#    - ($sp) result
#    - 4($sp) (dummy) GC tag
########################################################
18136:remainder:
    # get parameters; abort if divisor zero
18136#    lw $t0,($sp)
18140#    lw $t1,8($sp)
18144#    beq $t0,$zero,divByZeroError
    
    # perform division
18148#    div $t1,$t0
18152#    mfhi $t0

    # store result, adjust stack and return
18156#    addu $sp,$sp,8 # adjust stack
18160#    sw $t0,($sp) # store result
18164#    jr $ra
    
########################################################
# checkCast (millicode) - checks that a cast is legal
#  - aborts if null
#  - aborts if cast is illegal cast
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) object to check (now checked)
#  - side-effects: clobbers $t2 and $t3
########################################################
18168:checkCast:
    # get object, allow immediately if null
18168#    lw $t2,($sp)
18172#    beq $t2,$zero,checkCastReturn
    
    # get vtable address of object, abort if less than
    # lower limit or greater then or equal to higher
    # limit
18176#    lw $t2,-12($t2) # vtable address
18180#    bge $t2,$t1,castException
18181##...slt $at,$t2,$t1
18185##...beq $at,$zero,18356
18188#    blt $t2,$t0,castException
18189##...slt $at,$t2,$t0
18193##...bne $at,$zero,18356
    
    # return, leaving object unchanged on stack
18196:  checkCastReturn:    
18196#    jr $ra    

# checkCast:
#     # get object, allow immediately if null
#     lw $t2,($sp)
#     beq $t2,$zero,checkCastReturn
#     
#     # get vtable address of object (using Object vtable
#     # address for arrays)
#     lw $t3,-8($t2) # <= 0 if array
#     lw $t2,-12($t2) # vtable address (unless array)
#     bgt $t3,$zero,skipArrayCast
#     la $t2,CLASS_Object
#     
#     # get vtable address of object, abort if less than
#     # lower limit or greater then or equal to higher
#     # limit
#   skipArrayCast:
#     bge $t2,$t1,castException
#     blt $t2,$t0,castException
#     
#     # return, leaving object unchanged on stack
#   checkCastReturn:    
#     jr $ra    

########################################################
# instanceOf (millicode) - tests whether an object is
#   a member of a given class (or subclass)
#  - returns false if object is null
#  - parameters:
#    - ($sp) object to check
#    - $t0 address of vtable for target-class
#    - $t1 address one past vtable address of last
#      subclass of target-class
#  - return value:
#    - ($sp) true (1) or false (0), depending on whether
#      object is a member
#  - side-effects: clobbers $t2 and $t3
########################################################
18200:instanceOf:
    # get object, go return false if null
18200#    lw $t2,($sp)
18204#    beq $t2,$zero,doneInstanceOf
    
    # get vtable address of object, determine if we're >= the
    # lower limit, and if we're < the higher limit
18208#    lw $t2,-12($t2) # vtable address
18212#    sge $t0,$t2,$t0 # are we >= the lower limit?
18213##...slt $t0,$t2,$t0
18217##...xori $t0,$t0,0x1
18220#    slt $t1,$t2,$t1 # are we < the higher limit?
    
    # store the AND of the two conditions onto the stack; return
18224#    and $t2,$t0,$t1
18228#    sw $t2,($sp)
18232:doneInstanceOf: # if we reach here via branch, stack-top is zero,
            # which will now represent false
18232#    jr $ra


###########################################################
# jump-targets to terminate program:
# - exit: returns normally
# - outOfHeapMemory: prints "out of memory" error and returns
###########################################################

18236:exitError:
    # assumes $a0 has pointer to null-terminated string

    # print the string
18236#    li $v0,4 # syscall-code for print-string
18240#    syscall
18244:exit:
    # print termination message
18244#    li $v0,4 # syscall-code for print-string
18248#    la $a0,exitString
18252#    syscall

    # print number of garbage collections
18256#    li $v0,4 # syscall-code for print-string
18260#    la $a0,gcCountMsg
18264#    syscall # print "Number of ..."
18268#    lw $a0,gcCount # number of GC's
18272#    li $v0,1 # code for print-int
18276#    syscall
18280#    li $v0,4 # syscall-code for print-string
18284#    la $a0,newlineString
18288#    syscall # print newline

    # terminate execution
18292#    li $v0,10 #syscall-code for "exit"
18296#    syscall

18300:outOfHeapMemory:
18300#    la $a0,heapMemoryMsg
18304#    j exitError
18308:divByZeroError:
18308#    la $a0,divByZeroMsg
18312#    j exitError
18316:strIndexOutOfBounds:
18316#    la $a0,strIndexOutOfBoundsMsg
18320#    j exitError
18324:arrayIndexOutOfBounds:
18324#    la $a0,arrayIndexOutOfBoundsMsg
18328#    j exitError
18332:arraySizeOutOfBounds:
18332#    la $a0,arraySizeOutOfBoundsMsg
18336#    j exitError
18340:nullPtrException:
18340#    la $a0,nullPtrExceptionMsg
18344#    j exitError
18348:badIntegerFormat:
18348#    la $a0,badIntegerFormatMsg
18352#    j exitError
18356:castException:
18356#    la $a0,castExceptionMsg
18360#    j exitError
############## data section ################
    .data
19168:hexChars:
    .ascii "0123456789abcdef"
    .align 2
19184:cur_seg:
    .word 0

19188:lastCharRead:
    .word -2 # -2 => no buffered character
19192:prevHashConstant:
    .word 0x2785173c
19196:gcCount:
    .word 0

19200:heapMemoryMsg:
    .asciiz "ERROR: out of heap memory\n"
19227:divByZeroMsg:
    .asciiz "ERROR: divide by zero\n"
19250:strIndexOutOfBoundsMsg:
    .asciiz "ERROR: string index out of bounds\n"
19285:arrayIndexOutOfBoundsMsg:
    .asciiz "ERROR: array index out of bounds\n"
19319:arraySizeOutOfBoundsMsg:
    .asciiz "ERROR: array size out of bounds\n"
19352:nullPtrExceptionMsg:
    .asciiz "ERROR: null-pointer exception\n"
19383:badIntegerFormatMsg:
    .asciiz "ERROR: attempt to read badly formatted integer\n"
19431:castExceptionMsg:
    .asciiz "ERROR: illegal cast\n"
19452:gcMsg: 
      .asciiz "\nGC!\n"
19458:gcCountMsg: 
      .asciiz "Number of garbage collections: "

19490:nullStr:
    .asciiz "null"
19495:trueString:
    .asciiz "true"
19500:falseString:
    .asciiz "false"
19506:exitString:
    .ascii "Program execution completed."
    #### "falls through" here
19534:newlineString:
    .asciiz "\n"
    
    .align 2
19536:stack_bottom:
    .word 0

# heapFudge: # temporary fudge amount to exercise GC
#     .word 0

19540:seg0_start:
    .space 0x100000
1068116:seg0_end:
1068116:seg1_start:
    .space 0x100000
2116692:seg1_end:
